<?xml version="1.0"?>
<doc>
    <assembly>
        <name>XCLNetTools</name>
    </assembly>
    <members>
        <member name="T:XCLNetTools.Cache.CacheClass">
            <summary>
            缓存相关的操作类
            </summary>
        </member>
        <member name="M:XCLNetTools.Cache.CacheClass.GetCache(System.String)">
            <summary>
            获取当前应用程序指定CacheKey的Cache值
            </summary>
            <param name="CacheKey">缓存key名</param>
            <returns>该缓存的值</returns>
        </member>
        <member name="M:XCLNetTools.Cache.CacheClass.SetCache(System.String,System.Object)">
            <summary>
            设置当前应用程序指定CacheKey的Cache值
            </summary>
            <param name="CacheKey">缓存key名</param>
            <param name="objObject">缓存key值</param>
        </member>
        <member name="M:XCLNetTools.Cache.CacheClass.SetCache(System.String,System.Object,System.DateTime,System.TimeSpan)">
            <summary>
            设置当前应用程序指定CacheKey的Cache值
            </summary>
            <param name="CacheKey">缓存key名</param>
            <param name="objObject">缓存key值</param>
            <param name="absoluteExpiration">所插入对象将到期并被从缓存中移除的时间</param>
            <param name="slidingExpiration">最后一次访问所插入对象时与该对象到期时之间的时间间隔</param>
        </member>
        <member name="M:XCLNetTools.Cache.CacheClass.Clear(System.String)">
            <summary>
            删除指定缓存
            </summary>
            <param name="key">缓存key名</param>
        </member>
        <member name="M:XCLNetTools.Cache.CacheClass.Exists(System.String)">
            <summary>
            指定缓存是否存在
            </summary>
            <param name="key">缓存名</param>
            <returns>true:存在</returns>
        </member>
        <member name="M:XCLNetTools.Cache.CacheClass.RemoveAllCache">
            <summary>
            移除全部缓存
            </summary>
        </member>
        <member name="T:XCLNetTools.Common.Consts">
            <summary>
            常量
            </summary>
        </member>
        <member name="F:XCLNetTools.Common.Consts.RegHttpScheme">
            <summary>
            http Scheme（忽略大小写）
            </summary>
        </member>
        <member name="F:XCLNetTools.Common.Consts.RegPhone">
            <summary>
            电话号码正则
            </summary>
        </member>
        <member name="F:XCLNetTools.Common.Consts.RegNumber">
            <summary>
            无符号数字正则
            </summary>
        </member>
        <member name="F:XCLNetTools.Common.Consts.RegNumberSign">
            <summary>
            有符号数字正则
            </summary>
        </member>
        <member name="F:XCLNetTools.Common.Consts.RegDecimal">
            <summary>
            无符号小数正则
            </summary>
        </member>
        <member name="F:XCLNetTools.Common.Consts.RegDecimalSign">
            <summary>
            有符号小数正则
            </summary>
        </member>
        <member name="F:XCLNetTools.Common.Consts.RegEmail">
            <summary>
            email地址正则
            </summary>
        </member>
        <member name="F:XCLNetTools.Common.Consts.RegCHZN">
            <summary>
            中文正则
            </summary>
        </member>
        <member name="F:XCLNetTools.Common.Consts.RegURL">
            <summary>
            http(s)地址正则
            </summary>
        </member>
        <member name="F:XCLNetTools.Common.Consts.RegMD5_32Uppercase">
            <summary>
            md5正则（32位大写）
            </summary>
        </member>
        <member name="F:XCLNetTools.Common.Consts.WeekName">
            <summary>
            星期名
            </summary>
        </member>
        <member name="F:XCLNetTools.Common.Consts.CNDigit">
            <summary>
            中文数字
            </summary>
        </member>
        <member name="F:XCLNetTools.Common.Consts.ChineseRegex">
            <summary>
            汉字的正则表达式.eg: if(MyRegex.IsMatch(chrstr.ToString()))
            </summary>
        </member>
        <member name="F:XCLNetTools.Common.Consts.PinyinValue">
            <summary>
            拼音常量
            </summary>
        </member>
        <member name="F:XCLNetTools.Common.Consts.Pinyin">
            <summary>
            拼音
            </summary>
        </member>
        <member name="F:XCLNetTools.Common.Consts.RMB0To9">
            <summary>
            0-9所对应的汉字
            </summary>
        </member>
        <member name="F:XCLNetTools.Common.Consts.RMBUnitName">
            <summary>
            单位数字位所对应的汉字
            </summary>
        </member>
        <member name="F:XCLNetTools.Common.Consts.NumberChar">
            <summary>
            阿拉伯数字字符 0~9
            </summary>
        </member>
        <member name="F:XCLNetTools.Common.Consts.EngLowercaseLetterChar">
            <summary>
            英文小写字母 a~z
            </summary>
        </member>
        <member name="F:XCLNetTools.Common.Consts.EngUppercaseLetterChar">
            <summary>
            英文大写字母 A~Z
            </summary>
        </member>
        <member name="F:XCLNetTools.Common.Consts.EngLetterAndNumberChar">
            <summary>
            英文字母大写+英文字母小写+数字
            </summary>
        </member>
        <member name="F:XCLNetTools.Common.Consts.EngLetterChar">
            <summary>
            英文字母小写+英文字母大写
            </summary>
        </member>
        <member name="F:XCLNetTools.Common.Consts.EngLowercaseAndNumberChar">
            <summary>
            小写字母+数字
            </summary>
        </member>
        <member name="F:XCLNetTools.Common.Consts.NumberEngLetterChar">
            <summary>
            数字+大写字母
            </summary>
        </member>
        <member name="T:XCLNetTools.Common.DataTypeConvert">
            <summary>
            C#数据类型转换
            </summary>
        </member>
        <member name="M:XCLNetTools.Common.DataTypeConvert.ToByte``1(``0,System.Byte)">
            <summary>
            将source转为byte，若source为null或转换失败，则返回defaultValue
            </summary>
            <typeparam name="T">要转换的类型</typeparam>
            <param name="source">要转换的值</param>
            <param name="defaultValue">默认值，默认为default(byte)</param>
            <returns>转换后的值</returns>
        </member>
        <member name="M:XCLNetTools.Common.DataTypeConvert.ToByteNull``1(``0,System.Nullable{System.Byte})">
            <summary>
            将source转为byte?，若source为null或转换失败，则返回defaultValue
            </summary>
            <typeparam name="T">要转换的类型</typeparam>
            <param name="source">要转换的值</param>
            <param name="defaultValue">默认值，默认为null</param>
            <returns>转换后的值</returns>
        </member>
        <member name="M:XCLNetTools.Common.DataTypeConvert.ToSbyte``1(``0,System.SByte)">
            <summary>
            将source转为sbyte，若source为null或转换失败，则返回defaultValue
            </summary>
            <typeparam name="T">要转换的类型</typeparam>
            <param name="source">要转换的值</param>
            <param name="defaultValue">默认值，默认为default(sbyte)</param>
            <returns>转换后的值</returns>
        </member>
        <member name="M:XCLNetTools.Common.DataTypeConvert.ToSbyteNull``1(``0,System.Nullable{System.SByte})">
            <summary>
            将source转为sbyte?，若source为null或转换失败，则返回defaultValue
            </summary>
            <typeparam name="T">要转换的类型</typeparam>
            <param name="source">要转换的值</param>
            <param name="defaultValue">默认值，默认为null</param>
            <returns>转换后的值</returns>
        </member>
        <member name="M:XCLNetTools.Common.DataTypeConvert.ToInt``1(``0,System.Int32)">
            <summary>
            将source转为int，若source为null或转换失败，则返回defaultValue
            </summary>
            <typeparam name="T">要转换的类型</typeparam>
            <param name="source">要转换的值</param>
            <param name="defaultValue">默认值，默认为default(int)</param>
            <returns>转换后的值</returns>
        </member>
        <member name="M:XCLNetTools.Common.DataTypeConvert.ToIntNull``1(``0,System.Nullable{System.Int32})">
            <summary>
            将source转为int?，若source为null或转换失败，则返回defaultValue
            </summary>
            <typeparam name="T">要转换的类型</typeparam>
            <param name="source">要转换的值</param>
            <param name="defaultValue">默认值，默认为null</param>
            <returns>转换后的值</returns>
        </member>
        <member name="M:XCLNetTools.Common.DataTypeConvert.GetIntNullArrayByStringArray(System.String[])">
            <summary>
            将字符串数组转为int?数组（如果某项转换失败，则该项为Null）
            </summary>
        </member>
        <member name="M:XCLNetTools.Common.DataTypeConvert.GetIntArrayByStringArray(System.String[])">
            <summary>
            将字符串数组转为INT数组(若某项转换失败则该项为0)
            </summary>
        </member>
        <member name="M:XCLNetTools.Common.DataTypeConvert.GetIntArrayByStringArray(System.String[],System.Int32)">
            <summary>
            将字符串数组转为INT数组(若某项转换失败则该项为默认值)
            </summary>
        </member>
        <member name="M:XCLNetTools.Common.DataTypeConvert.ToUint``1(``0,System.UInt32)">
            <summary>
            将source转为uint，若source为null或转换失败，则返回defaultValue
            </summary>
            <typeparam name="T">要转换的类型</typeparam>
            <param name="source">要转换的值</param>
            <param name="defaultValue">默认值，默认为default(uint)</param>
            <returns>转换后的值</returns>
        </member>
        <member name="M:XCLNetTools.Common.DataTypeConvert.ToUintNull``1(``0,System.Nullable{System.UInt32})">
            <summary>
            将source转为uint?，若source为null或转换失败，则返回defaultValue
            </summary>
            <typeparam name="T">要转换的类型</typeparam>
            <param name="source">要转换的值</param>
            <param name="defaultValue">默认值，默认为null</param>
            <returns>转换后的值</returns>
        </member>
        <member name="M:XCLNetTools.Common.DataTypeConvert.ToShort``1(``0,System.Int16)">
            <summary>
            将source转为short，若source为null或转换失败，则返回defaultValue
            </summary>
            <typeparam name="T">要转换的类型</typeparam>
            <param name="source">要转换的值</param>
            <param name="defaultValue">默认值，默认为default(short)</param>
            <returns>转换后的值</returns>
        </member>
        <member name="M:XCLNetTools.Common.DataTypeConvert.ToShortNull``1(``0,System.Nullable{System.Int16})">
            <summary>
            将source转为short?，若source为null或转换失败，则返回defaultValue
            </summary>
            <typeparam name="T">要转换的类型</typeparam>
            <param name="source">要转换的值</param>
            <param name="defaultValue">默认值，默认为null</param>
            <returns>转换后的值</returns>
        </member>
        <member name="M:XCLNetTools.Common.DataTypeConvert.ToUshort``1(``0,System.UInt16)">
            <summary>
            将source转为ushort，若source为null或转换失败，则返回defaultValue
            </summary>
            <typeparam name="T">要转换的类型</typeparam>
            <param name="source">要转换的值</param>
            <param name="defaultValue">默认值，默认为default(ushort)</param>
            <returns>转换后的值</returns>
        </member>
        <member name="M:XCLNetTools.Common.DataTypeConvert.ToUshortNull``1(``0,System.Nullable{System.UInt16})">
            <summary>
            将source转为ushort?，若source为null或转换失败，则返回defaultValue
            </summary>
            <typeparam name="T">要转换的类型</typeparam>
            <param name="source">要转换的值</param>
            <param name="defaultValue">默认值，默认为null</param>
            <returns>转换后的值</returns>
        </member>
        <member name="M:XCLNetTools.Common.DataTypeConvert.ToLong``1(``0,System.Int64)">
            <summary>
            将source转为long，若source为null或转换失败，则返回defaultValue
            </summary>
            <typeparam name="T">要转换的类型</typeparam>
            <param name="source">要转换的值</param>
            <param name="defaultValue">默认值，默认为default(long)</param>
            <returns>转换后的值</returns>
        </member>
        <member name="M:XCLNetTools.Common.DataTypeConvert.ToLongNull``1(``0,System.Nullable{System.Int64})">
            <summary>
            将source转为long?，若source为null或转换失败，则返回defaultValue
            </summary>
            <typeparam name="T">要转换的类型</typeparam>
            <param name="source">要转换的值</param>
            <param name="defaultValue">默认值，默认为null</param>
            <returns>转换后的值</returns>
        </member>
        <member name="M:XCLNetTools.Common.DataTypeConvert.GetLongNullArrayByStringArray(System.String[])">
            <summary>
            将字符串数组转为long?数组（如果某项转换失败，则该项为Null）
            </summary>
        </member>
        <member name="M:XCLNetTools.Common.DataTypeConvert.GetLongArrayByStringArray(System.String[])">
            <summary>
            将字符串数组转为long数组(若某项转换失败则该项为0)
            </summary>
        </member>
        <member name="M:XCLNetTools.Common.DataTypeConvert.GetLongArrayByStringArray(System.String[],System.Int64)">
            <summary>
            将字符串数组转为long数组(若某项转换失败则该项为默认值)
            </summary>
        </member>
        <member name="M:XCLNetTools.Common.DataTypeConvert.ToUlong``1(``0,System.UInt64)">
            <summary>
            将source转为ulong，若source为null或转换失败，则返回defaultValue
            </summary>
            <typeparam name="T">要转换的类型</typeparam>
            <param name="source">要转换的值</param>
            <param name="defaultValue">默认值，默认为default(ulong)</param>
            <returns>转换后的值</returns>
        </member>
        <member name="M:XCLNetTools.Common.DataTypeConvert.ToUlongNull``1(``0,System.Nullable{System.UInt64})">
            <summary>
            将source转为ulong?，若source为null或转换失败，则返回defaultValue
            </summary>
            <typeparam name="T">要转换的类型</typeparam>
            <param name="source">要转换的值</param>
            <param name="defaultValue">默认值，默认为null</param>
            <returns>转换后的值</returns>
        </member>
        <member name="M:XCLNetTools.Common.DataTypeConvert.ToFloat``1(``0,System.Single)">
            <summary>
            将source转为float，若source为null或转换失败，则返回defaultValue
            </summary>
            <typeparam name="T">要转换的类型</typeparam>
            <param name="source">要转换的值</param>
            <param name="defaultValue">默认值，默认为default(float)</param>
            <returns>转换后的值</returns>
        </member>
        <member name="M:XCLNetTools.Common.DataTypeConvert.ToFloatNull``1(``0,System.Nullable{System.Single})">
            <summary>
            将source转为float?，若source为null或转换失败，则返回defaultValue
            </summary>
            <typeparam name="T">要转换的类型</typeparam>
            <param name="source">要转换的值</param>
            <param name="defaultValue">默认值，默认为null</param>
            <returns>转换后的值</returns>
        </member>
        <member name="M:XCLNetTools.Common.DataTypeConvert.ToDouble``1(``0,System.Double)">
            <summary>
            将source转为double，若source为null或转换失败，则返回defaultValue
            </summary>
            <typeparam name="T">要转换的类型</typeparam>
            <param name="source">要转换的值</param>
            <param name="defaultValue">默认值，默认为default(double)</param>
            <returns>转换后的值</returns>
        </member>
        <member name="M:XCLNetTools.Common.DataTypeConvert.ToDoubleNull``1(``0,System.Nullable{System.Double})">
            <summary>
            将source转为double?，若source为null或转换失败，则返回defaultValue
            </summary>
            <typeparam name="T">要转换的类型</typeparam>
            <param name="source">要转换的值</param>
            <param name="defaultValue">默认值，默认为null</param>
            <returns>转换后的值</returns>
        </member>
        <member name="M:XCLNetTools.Common.DataTypeConvert.ToBool``1(``0,System.Boolean)">
            <summary>
            将source转为bool，若source为null或转换失败，则返回defaultValue
            </summary>
            <typeparam name="T">要转换的类型</typeparam>
            <param name="source">要转换的值</param>
            <param name="defaultValue">默认值，默认为default(bool)</param>
            <returns>转换后的值</returns>
        </member>
        <member name="M:XCLNetTools.Common.DataTypeConvert.ToBoolNull``1(``0,System.Nullable{System.Boolean})">
            <summary>
            将source转为bool?，若source为null或转换失败，则返回defaultValue
            </summary>
            <typeparam name="T">要转换的类型</typeparam>
            <param name="source">要转换的值</param>
            <param name="defaultValue">默认值，默认为null</param>
            <returns>转换后的值</returns>
        </member>
        <member name="M:XCLNetTools.Common.DataTypeConvert.ToBoolFromTF(System.String)">
            <summary>
            将字符T/F转为bool，如果为'T'，则true; 否则为false
            </summary>
        </member>
        <member name="M:XCLNetTools.Common.DataTypeConvert.ToDecimal``1(``0,System.Decimal)">
            <summary>
            将source转为decimal，若source为null或转换失败，则返回defaultValue
            </summary>
            <typeparam name="T">要转换的类型</typeparam>
            <param name="source">要转换的值</param>
            <param name="defaultValue">默认值，默认为default(decimal)</param>
            <returns>转换后的值</returns>
        </member>
        <member name="M:XCLNetTools.Common.DataTypeConvert.ToDecimalNull``1(``0,System.Nullable{System.Decimal})">
            <summary>
            将source转为decimal?，若source为null或转换失败，则返回defaultValue
            </summary>
            <typeparam name="T">要转换的类型</typeparam>
            <param name="source">要转换的值</param>
            <param name="defaultValue">默认值，默认为null</param>
            <returns>转换后的值</returns>
        </member>
        <member name="M:XCLNetTools.Common.DataTypeConvert.ToStr``1(``0,System.String)">
            <summary>
            将source转为string，若source为null或Empty，则返回defaultValue
            </summary>
            <typeparam name="T">要转换的类型</typeparam>
            <param name="source">要转换的值</param>
            <param name="defaultValue">默认值，默认为default(string)</param>
            <returns>转换后的值</returns>
        </member>
        <member name="M:XCLNetTools.Common.DataTypeConvert.GetStringArrayByIntArray(System.Int32[])">
            <summary>
            将int数组转为string数组
            </summary>
        </member>
        <member name="M:XCLNetTools.Common.DataTypeConvert.ToDateTime``1(``0,System.DateTime)">
            <summary>
            将source转为DateTime，若source为null或转换失败，则返回defaultValue
            </summary>
            <typeparam name="T">要转换的类型</typeparam>
            <param name="source">要转换的值</param>
            <param name="defaultValue">默认值，默认为default(DateTime)</param>
            <returns>转换后的值</returns>
        </member>
        <member name="M:XCLNetTools.Common.DataTypeConvert.ToDateTimeNull``1(``0,System.Nullable{System.DateTime})">
            <summary>
            将source转为DateTime?，若source为null或转换失败，则返回defaultValue
            </summary>
            <typeparam name="T">要转换的类型</typeparam>
            <param name="source">要转换的值</param>
            <param name="defaultValue">默认值，默认为null</param>
            <returns>转换后的值</returns>
        </member>
        <member name="T:XCLNetTools.Common.GZipHelper">
            <summary>
            gzip相关
            </summary>
        </member>
        <member name="M:XCLNetTools.Common.GZipHelper.GZipCompressString(System.String)">
            <summary>
            gzip压缩字符串
            </summary>
            <param name="text">待压缩的字符串</param>
            <returns>压缩后的值</returns>
        </member>
        <member name="M:XCLNetTools.Common.GZipHelper.GZipDecompressString(System.String)">
            <summary>
            解压缩字符串
            </summary>
            <param name="compressedText">待解压的字符串</param>
            <returns>解压后的值</returns>
        </member>
        <member name="T:XCLNetTools.Common.IPHelper">
            <summary>
            IP处理
            </summary>
        </member>
        <member name="M:XCLNetTools.Common.IPHelper.GetClientIP">
            <summary>
            取得用户客户端IP(穿过代理服务器取远程用户真实IP地址)
            </summary>
            <returns>ip地址</returns>
        </member>
        <member name="M:XCLNetTools.Common.IPHelper.GetIpByIP138">
            <summary>
            根据ip138网站反馈结果获取服务端外网ip地址
            </summary>
            <returns>ip地址</returns>
        </member>
        <member name="T:XCLNetTools.Common.SwitchControl">
            <summary>
            开关控制
            </summary>
        </member>
        <member name="F:XCLNetTools.Common.SwitchControl.percentDic">
             <summary>
             百分比对应的匹配正则
             ==============
            配置百分比     实际百分比
            1=========0.78125
            2=========1.953125
            3=========2.734375
            4=========3.90625
            5=========4.6875
            6=========5.859375
            7=========6.25
            8=========7.8125
            9=========9.375
            10=========9.765625
            11=========10.9375
            12=========11.71875
            13=========12.890625
            14=========13.671875
            15=========15.234375
            16=========15.625
            17=========16.40625
            18=========17.578125
            19=========18.75
            20=========19.53125
            21=========21.09375
            22=========21.875
            23=========21.875
            24=========23.4375
            25=========25
            26=========25.78125
            27=========27.34375
            28=========28.125
            29=========29.296875
            30=========30.078125
            31=========31.25
            32=========31.640625
            33=========32.8125
            34=========34.375
            35=========35.15625
            36=========35.546875
            37=========37.5
            38=========37.5
            39=========38.671875
            40=========39.0625
            41=========40.625
            42=========42.1875
            43=========42.96875
            44=========43.75
            45=========45.703125
            46=========45.703125
            47=========46.875
            48=========47.265625
            49=========49.21875
            50=========50
            51=========50.78125
            52=========51.5625
            53=========52.734375
            54=========54.6875
            55=========54.6875
            56=========55.859375
            57=========56.25
            58=========58.59375
            59=========58.59375
            60=========60.15625
            61=========60.9375
            62=========60.9375
            63=========62.5
            64=========64.453125
            65=========64.453125
            66=========65.625
            67=========66.015625
            68=========68.75
            69=========68.75
            70=========70.3125
            71=========71.09375
            72=========71.09375
            73=========71.09375
            74=========75
            75=========75
            76=========76.171875
            77=========76.5625
            78=========76.5625
            79=========76.5625
            80=========81.25
            81=========81.25
            82=========82.03125
            83=========82.03125
            84=========82.03125
            85=========82.03125
            86=========87.5
            87=========87.5
            88=========87.890625
            89=========87.890625
            90=========87.890625
            91=========87.890625
            92=========93.75
            93=========93.75
            94=========93.75
            95=========93.75
            96=========93.75
            97=========100
            98=========100
            99=========100
            100=========100
             </summary>
        </member>
        <member name="T:XCLNetTools.Common.SwitchControl.SwitchKeyTypeEnum">
            <summary>
            配置key类型枚举
            </summary>
        </member>
        <member name="F:XCLNetTools.Common.SwitchControl.SwitchKeyTypeEnum.T">
            <summary>
            白名单（true）
            </summary>
        </member>
        <member name="F:XCLNetTools.Common.SwitchControl.SwitchKeyTypeEnum.F">
            <summary>
            黑名单（false）
            </summary>
        </member>
        <member name="F:XCLNetTools.Common.SwitchControl.SwitchKeyTypeEnum.RT">
            <summary>
            白名单正则（true）
            </summary>
        </member>
        <member name="F:XCLNetTools.Common.SwitchControl.SwitchKeyTypeEnum.RF">
            <summary>
            黑名单正则（false）
            </summary>
        </member>
        <member name="F:XCLNetTools.Common.SwitchControl.SwitchKeyTypeEnum.V">
            <summary>
            既不是白名单也不在黑名单，最终的判断类型
            </summary>
        </member>
        <member name="M:XCLNetTools.Common.SwitchControl.IsOpen(System.String,System.String)">
            <summary>
            开关是否打开（仅正则表达式区分大小写，其它参数均先转化为大写后再进行匹配）
            如：IsOpen("T=admin,test&amp;RT=^user200.*$&amp;F=user1,user2&amp;RF=^user100.*$&amp;V=20","admin");
            </summary>
            <param name="str">
            配置项的值，一般是从数据库的配置表中读取
            格式："T=admin,test&amp;RT=^user200.*$&amp;F=user1,user2&amp;RF=^user100.*$&amp;V=20"
            说明：
            1、T后面的值为白名单，用英文,隔开，如果flag在此值中存在，则返回true
            2、F后面的值为黑名单，用英文,隔开，如果flag在此值中存在，则返回false
            3、RT后面的值为白名单正则，如果flag的值能匹配，则返回true
            4、RF后面的值为黑名单正则，如果flag的值能匹配，则返回false
            5、当均不在黑白名单时，则使用V后面的值 ，该值为字符T或F或0~100之间的数字，当为T时，返回true；当为F时，返回false；当为数字时，即为百分比，由系统根据一定算法计算flag，并返回true或false
            6、TFV之间用&amp;隔开，类似url查询字符串
            7、当整个配置值为T，则返回true；当整个配置值为空、F或不符合格式要求时，则返回false
            </param>
            <param name="flag">百分比控制时的标志字符串，比如用户名：admin，或用户ID：1001</param>
            <returns>.Result=true：开，.Result=false：关</returns>
        </member>
        <member name="M:XCLNetTools.Common.SwitchControl.TFToBool(System.String)">
            <summary>
            将T/F转为bool值
            </summary>
            <param name="val">T或F</param>
            <returns>T:true,F:false</returns>
        </member>
        <member name="T:XCLNetTools.Control.ServerControl.Lib">
            <summary>
            服务器控件操作相关
            </summary>
        </member>
        <member name="M:XCLNetTools.Control.ServerControl.Lib.RepDataBind``1(System.Web.UI.WebControls.Repeater,System.Collections.Generic.List{``0},System.Boolean,System.String[])">
            <summary>
            Repeater绑定数据
            </summary>
            <param name="rep">Repeater控件</param>
            <param name="dataSource">数据源</param>
            <param name="isShowNoDataMsg">true:没有数据时，显示“暂无数据”</param>
            <param name="noDataMsg">没有数据时非默认提示</param>
        </member>
        <member name="M:XCLNetTools.Control.ServerControl.Lib.RepDataBind(System.Web.UI.WebControls.Repeater,System.Data.DataTable,System.Boolean,System.String[])">
            <summary>
            Repeater绑定数据
            </summary>
            <param name="rep">Repeater控件</param>
            <param name="dataSource">数据源</param>
            <param name="isShowNoDataMsg">true:没有数据时，显示“暂无数据”</param>
            <param name="noDataMsg">没有数据时非默认提示</param>
        </member>
        <member name="M:XCLNetTools.Control.ServerControl.Lib.BindDDL(System.Web.UI.WebControls.DropDownList,System.Data.DataSet,System.String,System.String,System.String,System.Boolean)">
            <summary>
            绑定DDL，value为初始选中值
            </summary>
            <param name="ddl">DropDownList</param>
            <param name="ds">dataset</param>
            <param name="textField">文本字段</param>
            <param name="valueField">值字段</param>
            <param name="value">默认选中项的值</param>
            <param name="flag">true:有"--全部--" false:无</param>
        </member>
        <member name="M:XCLNetTools.Control.ServerControl.Lib.BindCheckBoxList(System.Web.UI.WebControls.CheckBoxList,System.Data.DataSet,System.String,System.String,System.String)">
            <summary>
            绑定CheckBoxList，value为初始选中值
            </summary>
            <param name="ck">CheckBoxList</param>
            <param name="ds">dataset</param>
            <param name="textField">文本字段</param>
            <param name="valueField">值字段</param>
            <param name="value">以,隔开的字符串，默认选中值</param>
        </member>
        <member name="M:XCLNetTools.Control.ServerControl.Lib.BindEnum(System.Web.UI.WebControls.WebControl,System.Collections.Generic.List{XCLNetTools.Entity.TextValue},System.String)">
            <summary>
            绑定枚举（此方法已过期，请使用BindLst）
            </summary>
            <param name="c">控件</param>
            <param name="lst">XCLNetTools.Entity.TextValue list</param>
            <param name="defaultValue">默认选中值</param>
        </member>
        <member name="M:XCLNetTools.Control.ServerControl.Lib.BindLst``1(System.Web.UI.WebControls.WebControl,System.Collections.Generic.List{``0},System.String,System.String,System.String,System.Boolean)">
            <summary>
            将list绑定到控件上
            </summary>
            <param name="c">控件</param>
            <param name="lst">数据源</param>
            <param name="textField">文本字段</param>
            <param name="valueField">值字段</param>
            <param name="value">选中值</param>
            <param name="flag">第一项是否为"请选择"</param>
        </member>
        <member name="T:XCLNetTools.Control.HtmlControl.Lib">
            <summary>
            原生html控件操作类
            </summary>
        </member>
        <member name="M:XCLNetTools.Control.HtmlControl.Lib.GetOptions(System.Type,XCLNetTools.Entity.SetOptionEntity)">
            <summary>
            将枚举转为select的options
            <param name="t">枚举type</param>
            <param name="options">选项</param>
            <returns>option字符串</returns>
            </summary>
        </member>
        <member name="M:XCLNetTools.Control.HtmlControl.Lib.GetOptions(System.Collections.Generic.Dictionary{System.String,System.String},XCLNetTools.Entity.SetOptionEntity)">
            <summary>
            将Dictionary转为select 的options
            注：option的text为字典的key,value为字典的value
            </summary>
            <param name="dataSource">数据源</param>
            <param name="options">选项</param>
            <returns>option字符串</returns>
        </member>
        <member name="M:XCLNetTools.Control.HtmlControl.Lib.GetOptions``2(System.Collections.Generic.Dictionary{``0,``1},XCLNetTools.Entity.SetOptionEntity)">
            <summary>
            将Dictionary转为select 的options
            注：option的text为字典的key,value为字典的value
            </summary>
            <param name="dataSource">数据源</param>
            <param name="options">选项</param>
            <returns>option字符串</returns>
        </member>
        <member name="T:XCLNetTools.Control.MxGraph.Lib">
            <summary>
            MxGraph操作类
            </summary>
        </member>
        <member name="M:XCLNetTools.Control.MxGraph.Lib.GetImage(System.String)">
            <summary>
            根据view形式的xml生成图片
            </summary>
            <param name="xml">view形式的xml</param>
            <returns>image对象</returns>
        </member>
        <member name="M:XCLNetTools.Control.MxGraph.Lib.ExportImage(System.String,System.String)">
            <summary>
            导出mxGraph为图片
            </summary>
            <param name="xml">mxGraph的model的view形式的xml</param>
            <param name="filename">导出后的文件名（包含扩展名）</param>
        </member>
        <member name="T:XCLNetTools.Control.Pagination.AspNetPagerInfo">
            <summary>
            AspNetPager分页
            分页控件来源：http://www.webdiyer.com/aspnetpager/
            </summary>
        </member>
        <member name="M:XCLNetTools.Control.Pagination.AspNetPagerInfo.#ctor(Wuqi.Webdiyer.AspNetPager,System.Int32,System.Int32,System.Int32)">
            <summary>
            构造函数
            </summary>
            <param name="pager">分页控件对象</param>
            <param name="pageIndex">当前页码</param>
            <param name="pageSize">每页最多显示的记录数</param>
            <param name="recordCount">记录总数</param>
        </member>
        <member name="M:XCLNetTools.Control.Pagination.AspNetPagerInfo.InitPager">
            <summary>
            分页控件初始化
            </summary>
        </member>
        <member name="T:XCLNetTools.Control.Pagination.BasePagination`1">
            <summary>
            分页抽象类
            </summary>
        </member>
        <member name="M:XCLNetTools.Control.Pagination.BasePagination`1.#ctor(`0,System.Int32,System.Int32,System.Int32)">
            <summary>
            构造函数
            </summary>
            <param name="pager">分页控件对象</param>
            <param name="pageIndex">当前页码</param>
            <param name="pageSize">每页最多显示的记录数</param>
            <param name="recordCount">记录总数</param>
        </member>
        <member name="P:XCLNetTools.Control.Pagination.BasePagination`1.Pager">
            <summary>
            当前分页控件
            </summary>
        </member>
        <member name="P:XCLNetTools.Control.Pagination.BasePagination`1.PagerInfo">
            <summary>
            分页信息
            </summary>
        </member>
        <member name="M:XCLNetTools.Control.Pagination.BasePagination`1.InitPager">
            <summary>
            分页初始化
            </summary>
        </member>
        <member name="T:XCLNetTools.DataBase.SQLite.SQLiteHelper">
            <summary>
            SQLite 公共库
            </summary>
        </member>
        <member name="M:XCLNetTools.DataBase.SQLite.SQLiteHelper.ExecuteNonQuery(System.String,System.Data.SQLite.SQLiteCommand)">
            <summary>
            执行数据库操作(新增、更新或删除)
            </summary>
            <param name="connectionString">连接字符串</param>
            <param name="cmd">SqlCommand对象</param>
            <returns>所受影响的行数</returns>
        </member>
        <member name="M:XCLNetTools.DataBase.SQLite.SQLiteHelper.ExecuteNonQuery(System.String,System.String,System.Data.CommandType)">
            <summary>
            执行数据库操作(新增、更新或删除)
            </summary>
            <param name="connectionString">连接字符串</param>
            <param name="commandText">执行语句或存储过程名</param>
            <param name="commandType">执行类型</param>
            <returns>所受影响的行数</returns>
        </member>
        <member name="M:XCLNetTools.DataBase.SQLite.SQLiteHelper.ExecuteNonQuery(System.String,System.String,System.Data.CommandType,System.Data.SQLite.SQLiteParameter[])">
            <summary>
            执行数据库操作(新增、更新或删除)
            </summary>
            <param name="connectionString">连接字符串</param>
            <param name="commandText">执行语句或存储过程名</param>
            <param name="commandType">执行类型</param>
            <param name="cmdParms">SQL参数对象</param>
            <returns>所受影响的行数</returns>
        </member>
        <member name="M:XCLNetTools.DataBase.SQLite.SQLiteHelper.ExecuteScalar(System.String,System.Data.SQLite.SQLiteCommand)">
            <summary>
            执行数据库操作(新增、更新或删除)同时返回执行后查询所得的第1行第1列数据
            </summary>
            <param name="connectionString">连接字符串</param>
            <param name="cmd">SqlCommand对象</param>
            <returns>查询所得的第1行第1列数据</returns>
        </member>
        <member name="M:XCLNetTools.DataBase.SQLite.SQLiteHelper.ExecuteScalar(System.String,System.String,System.Data.CommandType)">
            <summary>
            执行数据库操作(新增、更新或删除)同时返回执行后查询所得的第1行第1列数据
            </summary>
            <param name="connectionString">连接字符串</param>
            <param name="commandText">执行语句或存储过程名</param>
            <param name="commandType">执行类型</param>
            <returns>查询所得的第1行第1列数据</returns>
        </member>
        <member name="M:XCLNetTools.DataBase.SQLite.SQLiteHelper.ExecuteScalar(System.String,System.String,System.Data.CommandType,System.Data.SQLite.SQLiteParameter[])">
            <summary>
            执行数据库操作(新增、更新或删除)同时返回执行后查询所得的第1行第1列数据
            </summary>
            <param name="connectionString">连接字符串</param>
            <param name="commandText">执行语句或存储过程名</param>
            <param name="commandType">执行类型</param>
            <param name="cmdParms">SQL参数对象</param>
            <returns>查询所得的第1行第1列数据</returns>
        </member>
        <member name="M:XCLNetTools.DataBase.SQLite.SQLiteHelper.ExecuteReader(System.String,System.Data.SQLite.SQLiteCommand)">
            <summary>
            执行数据库查询，返回SqlDataReader对象
            </summary>
            <param name="connectionString">连接字符串</param>
            <param name="cmd">SqlCommand对象</param>
            <returns>SqlDataReader对象</returns>
        </member>
        <member name="M:XCLNetTools.DataBase.SQLite.SQLiteHelper.ExecuteReader(System.String,System.String,System.Data.CommandType)">
            <summary>
            执行数据库查询，返回SqlDataReader对象
            </summary>
            <param name="connectionString">连接字符串</param>
            <param name="commandText">执行语句或存储过程名</param>
            <param name="commandType">执行类型</param>
            <returns>SqlDataReader对象</returns>
        </member>
        <member name="M:XCLNetTools.DataBase.SQLite.SQLiteHelper.ExecuteReader(System.String,System.String,System.Data.CommandType,System.Data.SQLite.SQLiteParameter[])">
            <summary>
            执行数据库查询，返回SqlDataReader对象
            </summary>
            <param name="connectionString">连接字符串</param>
            <param name="commandText">执行语句或存储过程名</param>
            <param name="commandType">执行类型</param>
            <param name="cmdParms">SQL参数对象</param>
            <returns>SqlDataReader对象</returns>
        </member>
        <member name="M:XCLNetTools.DataBase.SQLite.SQLiteHelper.ExecuteDataSet(System.String,System.Data.SQLite.SQLiteCommand)">
            <summary>
            执行数据库查询，返回DataSet对象
            </summary>
            <param name="connectionString">连接字符串</param>
            <param name="cmd">SqlCommand对象</param>
            <returns>DataSet对象</returns>
        </member>
        <member name="M:XCLNetTools.DataBase.SQLite.SQLiteHelper.ExecuteDataSet(System.String,System.String,System.Data.CommandType)">
            <summary>
            执行数据库查询，返回DataSet对象
            </summary>
            <param name="connectionString">连接字符串</param>
            <param name="commandText">执行语句或存储过程名</param>
            <param name="commandType">执行类型</param>
            <returns>DataSet对象</returns>
        </member>
        <member name="M:XCLNetTools.DataBase.SQLite.SQLiteHelper.ExecuteDataSet(System.String,System.String,System.Data.CommandType,System.Data.SQLite.SQLiteParameter[])">
            <summary>
            执行数据库查询，返回DataSet对象
            </summary>
            <param name="connectionString">连接字符串</param>
            <param name="commandText">执行语句或存储过程名</param>
            <param name="commandType">执行类型</param>
            <param name="cmdParms">SQL参数对象</param>
            <returns>DataSet对象</returns>
        </member>
        <member name="M:XCLNetTools.DataBase.SQLite.SQLiteHelper.SelectPaging(System.String,System.String,System.String,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            通用分页查询方法
            </summary>
            <param name="connString">连接字符串</param>
            <param name="tableName">表名</param>
            <param name="strColumns">查询字段名</param>
            <param name="strWhere">where条件</param>
            <param name="strOrder">排序条件</param>
            <param name="pageSize">每页数据数量</param>
            <param name="currentIndex">当前页数</param>
            <param name="recordOut">数据总量</param>
            <returns>DataTable数据表</returns>
        </member>
        <member name="M:XCLNetTools.DataBase.SQLite.SQLiteHelper.PrepareCommand(System.Data.SQLite.SQLiteCommand,System.Data.SQLite.SQLiteConnection,System.Data.SQLite.SQLiteTransaction@,System.Boolean,System.Data.CommandType,System.String,System.Data.SQLite.SQLiteParameter[])">
            <summary>
            预处理Command对象,数据库链接,事务,需要执行的对象,参数等的初始化
            </summary>
            <param name="cmd">Command对象</param>
            <param name="conn">Connection对象</param>
            <param name="trans">Transcation对象</param>
            <param name="useTrans">是否使用事务</param>
            <param name="cmdType">SQL字符串执行类型</param>
            <param name="cmdText">SQL Text</param>
            <param name="cmdParms">SQLiteParameters to use in the command</param>
        </member>
        <member name="T:XCLNetTools.DataBase.SQLLibrary">
            <summary>
            sql处理类
            </summary>
        </member>
        <member name="M:XCLNetTools.DataBase.SQLLibrary.JoinWithAnd(System.Collections.Generic.List{System.String})">
            <summary>
            使用'and'合并sql
            </summary>
            <param name="whereList">where的各个条件，如：a='abc',b='xxx'</param>
            <returns>and合并后的新的sql</returns>
        </member>
        <member name="M:XCLNetTools.DataBase.SQLLibrary.CreatePagerQuerySqlString(XCLNetTools.Entity.SqlPagerConditionEntity)">
            <summary>
            生成分页查询的sql语句
            注：sql中的out参数：TotalCount（总记录数）
            </summary>
            <param name="condition">分页参数</param>
            <returns>分页的sql查询语句</returns>
        </member>
        <member name="T:XCLNetTools.DataBase.Access.AccessHelper">
            <summary>
            Access数据库操作类
            </summary>
        </member>
        <member name="F:XCLNetTools.DataBase.Access.AccessHelper.conn">
            <summary>
            oledb连接
            </summary>
        </member>
        <member name="F:XCLNetTools.DataBase.Access.AccessHelper.comm">
            <summary>
            command
            </summary>
        </member>
        <member name="M:XCLNetTools.DataBase.Access.AccessHelper.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:XCLNetTools.DataBase.Access.AccessHelper.OpenConnection">
            <summary>
            打开数据库
            </summary>
        </member>
        <member name="M:XCLNetTools.DataBase.Access.AccessHelper.CloseConnection">
            <summary>
            关闭数据库
            </summary>
        </member>
        <member name="M:XCLNetTools.DataBase.Access.AccessHelper.ExcuteSql(System.String)">
            <summary>
            执行sql语句
            </summary>
            <param name="sqlstr"></param>
        </member>
        <member name="M:XCLNetTools.DataBase.Access.AccessHelper.DataReader(System.String)">
            <summary>
            返回指定sql语句的OleDbDataReader对象，使用时请注意关闭这个对象。
            </summary>
            <param name="sqlstr"></param>
            <returns></returns>
        </member>
        <member name="M:XCLNetTools.DataBase.Access.AccessHelper.DataReader(System.String,System.Data.OleDb.OleDbDataReader@)">
            <summary>
            返回指定sql语句的OleDbDataReader对象,使用时请注意关闭
            </summary>
            <param name="sqlstr"></param>
            <param name="dr"></param>
        </member>
        <member name="M:XCLNetTools.DataBase.Access.AccessHelper.DataSet(System.String)">
            <summary>
            返回指定sql语句的dataset
            </summary>
            <param name="sqlstr"></param>
            <returns></returns>
        </member>
        <member name="M:XCLNetTools.DataBase.Access.AccessHelper.DataSet(System.String,System.Data.DataSet@)">
            <summary>
            返回指定sql语句的dataset
            </summary>
            <param name="sqlstr"></param>
            <param name="ds"></param>
        </member>
        <member name="M:XCLNetTools.DataBase.Access.AccessHelper.DataTable(System.String)">
            <summary>
            返回指定sql语句的datatable
            </summary>
            <param name="sqlstr"></param>
            <returns></returns>
        </member>
        <member name="M:XCLNetTools.DataBase.Access.AccessHelper.DataTable(System.String,System.Data.DataTable@)">
            <summary>
            返回指定sql语句的datatable
            </summary>
            <param name="sqlstr"></param>
            <param name="dt"></param>
        </member>
        <member name="M:XCLNetTools.DataBase.Access.AccessHelper.DataView(System.String)">
            <summary>
            返回指定sql语句的dataview
            </summary>
            <param name="sqlstr"></param>
            <returns></returns>
        </member>
        <member name="T:XCLNetTools.DataBase.MSSQL.SqlHelper">
            <summary>
            微软SQLHelper
            </summary>
        </member>
        <member name="M:XCLNetTools.DataBase.MSSQL.SqlHelper.AttachParameters(System.Data.SqlClient.SqlCommand,System.Data.SqlClient.SqlParameter[])">
            <summary>
            将SqlParameter参数数组(参数值)分配给SqlCommand命令.
            这个方法将给任何一个参数分配DBNull.Value;
            该操作将阻止默认值的使用.
            </summary>
            <param name="command">命令名</param>
            <param name="commandParameters">SqlParameters数组</param>
        </member>
        <member name="M:XCLNetTools.DataBase.MSSQL.SqlHelper.AssignParameterValues(System.Data.SqlClient.SqlParameter[],System.Data.DataRow)">
            <summary>
            将DataRow类型的列值分配到SqlParameter参数数组.
            </summary>
            <param name="commandParameters">要分配值的SqlParameter参数数组</param>
            <param name="dataRow">将要分配给存储过程参数的DataRow</param>
        </member>
        <member name="M:XCLNetTools.DataBase.MSSQL.SqlHelper.AssignParameterValues(System.Data.SqlClient.SqlParameter[],System.Object[])">
            <summary>
            将一个对象数组分配给SqlParameter参数数组.
            </summary>
            <param name="commandParameters">要分配值的SqlParameter参数数组</param>
            <param name="parameterValues">将要分配给存储过程参数的对象数组</param>
        </member>
        <member name="M:XCLNetTools.DataBase.MSSQL.SqlHelper.PrepareCommand(System.Data.SqlClient.SqlCommand,System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[],System.Boolean@)">
            <summary>
            预处理用户提供的命令,数据库连接/事务/命令类型/参数
            </summary>
            <param name="command">要处理的SqlCommand</param>
            <param name="connection">数据库连接</param>
            <param name="transaction">一个有效的事务或者是null值</param>
            <param name="commandType">命令类型 (存储过程,命令文本, 其它.)</param>
            <param name="commandText">存储过程名或都T-SQL命令文本</param>
            <param name="commandParameters">和命令相关联的SqlParameter参数数组,如果没有参数为'null'</param>
            <param name="mustCloseConnection"><c>true</c> 如果连接是打开的,则为true,其它情况下为false.</param>
        </member>
        <member name="M:XCLNetTools.DataBase.MSSQL.SqlHelper.GetConnSting">
            <summary>
            一个有效的数据库连接字符串
            </summary>
            <returns></returns>
        </member>
        <member name="M:XCLNetTools.DataBase.MSSQL.SqlHelper.GetConnection">
            <summary>
            一个有效的数据库连接对象
            </summary>
            <returns></returns>
        </member>
        <member name="M:XCLNetTools.DataBase.MSSQL.SqlHelper.ExecuteNonQuery(System.String,System.Data.CommandType,System.String)">
            <summary>
            执行指定连接字符串,类型的SqlCommand.
            </summary>
            <remarks>
            示例:
             int result = ExecuteNonQuery(connString, CommandType.StoredProcedure, "PublishOrders");
            </remarks>
            <param name="connectionString">一个有效的数据库连接字符串</param>
            <param name="commandType">命令类型 (存储过程,命令文本, 其它.)</param>
            <param name="commandText">存储过程名称或SQL语句</param>
            <returns>返回命令影响的行数</returns>
        </member>
        <member name="M:XCLNetTools.DataBase.MSSQL.SqlHelper.ExecuteNonQuery(System.String,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            执行指定连接字符串,类型的SqlCommand.如果没有提供参数,不返回结果.
            </summary>
            <remarks>
            示例:
             int result = ExecuteNonQuery(connString, CommandType.StoredProcedure, "PublishOrders", new SqlParameter("@prodid", 24));
            </remarks>
            <param name="connectionString">一个有效的数据库连接字符串</param>
            <param name="commandType">命令类型 (存储过程,命令文本, 其它.)</param>
            <param name="commandText">存储过程名称或SQL语句</param>
            <param name="commandParameters">SqlParameter参数数组</param>
            <returns>返回命令影响的行数</returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:XCLNetTools.DataBase.MSSQL.SqlHelper.ExecuteNonQuery(System.String,System.String,System.Object[])" -->
        <member name="M:XCLNetTools.DataBase.MSSQL.SqlHelper.ExecuteNonQuery(System.Data.SqlClient.SqlConnection,System.Data.CommandType,System.String)">
            <summary>
            执行指定数据库连接对象的命令
            </summary>
            <remarks>
            示例:
             int result = ExecuteNonQuery(conn, CommandType.StoredProcedure, "PublishOrders");
            </remarks>
            <param name="connection">一个有效的数据库连接对象</param>
            <param name="commandType">命令类型(存储过程,命令文本或其它.)</param>
            <param name="commandText">存储过程名称或T-SQL语句</param>
            <returns>返回影响的行数</returns>
        </member>
        <member name="M:XCLNetTools.DataBase.MSSQL.SqlHelper.ExecuteNonQuery(System.Data.SqlClient.SqlConnection,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            执行指定数据库连接对象的命令
            </summary>
            <remarks>
            示例:
             int result = ExecuteNonQuery(conn, CommandType.StoredProcedure, "PublishOrders", new SqlParameter("@prodid", 24));
            </remarks>
            <param name="connection">一个有效的数据库连接对象</param>
            <param name="commandType">命令类型(存储过程,命令文本或其它.)</param>
            <param name="commandText">T存储过程名称或T-SQL语句</param>
            <param name="commandParameters">SqlParamter参数数组</param>
            <returns>返回影响的行数</returns>
        </member>
        <member name="M:XCLNetTools.DataBase.MSSQL.SqlHelper.ExecuteNonQuery(System.Data.SqlClient.SqlConnection,System.String,System.Object[])">
            <summary>
            执行指定数据库连接对象的命令,将对象数组的值赋给存储过程参数.
            </summary>
            <remarks>
            此方法不提供访问存储过程输出参数和返回值
            示例:
             int result = ExecuteNonQuery(conn, "PublishOrders", 24, 36);
            </remarks>
            <param name="connection">一个有效的数据库连接对象</param>
            <param name="spName">存储过程名</param>
            <param name="parameterValues">分配给存储过程输入参数的对象数组</param>
            <returns>返回影响的行数</returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:XCLNetTools.DataBase.MSSQL.SqlHelper.ExecuteNonQuery(System.Data.SqlClient.SqlTransaction,System.Data.CommandType,System.String)" -->
        <member name="M:XCLNetTools.DataBase.MSSQL.SqlHelper.ExecuteNonQuery(System.Data.SqlClient.SqlTransaction,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            执行带事务的SqlCommand(指定参数).
            </summary>
            <remarks>
            示例:
             int result = ExecuteNonQuery(trans, CommandType.StoredProcedure, "GetOrders", new SqlParameter("@prodid", 24));
            </remarks>
            <param name="transaction">一个有效的数据库连接对象</param>
            <param name="commandType">命令类型(存储过程,命令文本或其它.)</param>
            <param name="commandText">存储过程名称或T-SQL语句</param>
            <param name="commandParameters">SqlParamter参数数组</param>
            <returns>返回影响的行数</returns>
        </member>
        <member name="M:XCLNetTools.DataBase.MSSQL.SqlHelper.ExecuteNonQuery(System.Data.SqlClient.SqlTransaction,System.String,System.Object[])">
            <summary>
            执行带事务的SqlCommand(指定参数值).
            </summary>
            <remarks>
            此方法不提供访问存储过程输出参数和返回值
            示例:
             int result = ExecuteNonQuery(conn, trans, "PublishOrders", 24, 36);
            </remarks>
            <param name="transaction">一个有效的数据库连接对象</param>
            <param name="spName">存储过程名</param>
            <param name="parameterValues">分配给存储过程输入参数的对象数组</param>
            <returns>返回受影响的行数</returns>
        </member>
        <member name="M:XCLNetTools.DataBase.MSSQL.SqlHelper.ExecuteDataset(System.String,System.Data.CommandType,System.String)">
            <summary>
            执行指定数据库连接字符串的命令,返回DataSet.
            </summary>
            <remarks>
            示例:
             DataSet ds = ExecuteDataset(connString, CommandType.StoredProcedure, "GetOrders");
            </remarks>
            <param name="connectionString">一个有效的数据库连接字符串</param>
            <param name="commandType">命令类型 (存储过程,命令文本或其它)</param>
            <param name="commandText">存储过程名称或T-SQL语句</param>
            <returns>返回一个包含结果集的DataSet</returns>
        </member>
        <member name="M:XCLNetTools.DataBase.MSSQL.SqlHelper.ExecuteDataset(System.String,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            执行指定数据库连接字符串的命令,返回DataSet.
            </summary>
            <remarks>
            示例:
             DataSet ds = ExecuteDataset(connString, CommandType.StoredProcedure, "GetOrders", new SqlParameter("@prodid", 24));
            </remarks>
            <param name="connectionString">一个有效的数据库连接字符串</param>
            <param name="commandType">命令类型 (存储过程,命令文本或其它)</param>
            <param name="commandText">存储过程名称或T-SQL语句</param>
            <param name="commandParameters">SqlParamters参数数组</param>
            <returns>返回一个包含结果集的DataSet</returns>
        </member>
        <member name="M:XCLNetTools.DataBase.MSSQL.SqlHelper.ExecuteDataset(System.String,System.String,System.Object[])">
            <summary>
            执行指定数据库连接字符串的命令,直接提供参数值,返回DataSet.
            </summary>
            <remarks>
            此方法不提供访问存储过程输出参数和返回值.
            示例:
             DataSet ds = ExecuteDataset(connString, "GetOrders", 24, 36);
            </remarks>
            <param name="connectionString">一个有效的数据库连接字符串</param>
            <param name="spName">存储过程名</param>
            <param name="parameterValues">分配给存储过程输入参数的对象数组</param>
            <returns>返回一个包含结果集的DataSet</returns>
        </member>
        <member name="M:XCLNetTools.DataBase.MSSQL.SqlHelper.ExecuteDataset(System.Data.SqlClient.SqlConnection,System.Data.CommandType,System.String)">
            <summary>
            执行指定数据库连接对象的命令,返回DataSet.
            </summary>
            <remarks>
            示例:
             DataSet ds = ExecuteDataset(conn, CommandType.StoredProcedure, "GetOrders");
            </remarks>
            <param name="connection">一个有效的数据库连接对象</param>
            <param name="commandType">命令类型 (存储过程,命令文本或其它)</param>
            <param name="commandText">存储过程名或T-SQL语句</param>
            <returns>返回一个包含结果集的DataSet</returns>
        </member>
        <member name="M:XCLNetTools.DataBase.MSSQL.SqlHelper.ExecuteDataset(System.Data.SqlClient.SqlConnection,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            执行指定数据库连接对象的命令,指定存储过程参数,返回DataSet.
            </summary>
            <remarks>
            示例:
             DataSet ds = ExecuteDataset(conn, CommandType.StoredProcedure, "GetOrders", new SqlParameter("@prodid", 24));
            </remarks>
            <param name="connection">一个有效的数据库连接对象</param>
            <param name="commandType">命令类型 (存储过程,命令文本或其它)</param>
            <param name="commandText">存储过程名或T-SQL语句</param>
            <param name="commandParameters">SqlParamter参数数组</param>
            <returns>返回一个包含结果集的DataSet</returns>
        </member>
        <member name="M:XCLNetTools.DataBase.MSSQL.SqlHelper.ExecuteDataset(System.Data.SqlClient.SqlConnection,System.String,System.Object[])">
            <summary>
            执行指定数据库连接对象的命令,指定参数值,返回DataSet.
            </summary>
            <remarks>
            此方法不提供访问存储过程输入参数和返回值.
            示例.:
             DataSet ds = ExecuteDataset(conn, "GetOrders", 24, 36);
            </remarks>
            <param name="connection">一个有效的数据库连接对象</param>
            <param name="spName">存储过程名</param>
            <param name="parameterValues">分配给存储过程输入参数的对象数组</param>
            <returns>返回一个包含结果集的DataSet</returns>
        </member>
        <member name="M:XCLNetTools.DataBase.MSSQL.SqlHelper.ExecuteDataset(System.Data.SqlClient.SqlTransaction,System.Data.CommandType,System.String)">
            <summary>
            执行指定事务的命令,返回DataSet.
            </summary>
            <remarks>
            示例:
             DataSet ds = ExecuteDataset(trans, CommandType.StoredProcedure, "GetOrders");
            </remarks>
            <param name="transaction">事务</param>
            <param name="commandType">命令类型 (存储过程,命令文本或其它)</param>
            <param name="commandText">存储过程名或T-SQL语句</param>
            <returns>返回一个包含结果集的DataSet</returns>
        </member>
        <member name="M:XCLNetTools.DataBase.MSSQL.SqlHelper.ExecuteDataset(System.Data.SqlClient.SqlTransaction,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            执行指定事务的命令,指定参数,返回DataSet.
            </summary>
            <remarks>
            示例:
             DataSet ds = ExecuteDataset(trans, CommandType.StoredProcedure, "GetOrders", new SqlParameter("@prodid", 24));
            </remarks>
            <param name="transaction">事务</param>
            <param name="commandType">命令类型 (存储过程,命令文本或其它)</param>
            <param name="commandText">存储过程名或T-SQL语句</param>
            <param name="commandParameters">SqlParamter参数数组</param>
            <returns>返回一个包含结果集的DataSet</returns>
        </member>
        <member name="M:XCLNetTools.DataBase.MSSQL.SqlHelper.ExecuteDataset(System.Data.SqlClient.SqlTransaction,System.String,System.Object[])">
            <summary>
            执行指定事务的命令,指定参数值,返回DataSet.
            </summary>
            <remarks>
            此方法不提供访问存储过程输入参数和返回值.
            示例.:
             DataSet ds = ExecuteDataset(trans, "GetOrders", 24, 36);
            </remarks>
            <param name="transaction">事务</param>
            <param name="spName">存储过程名</param>
            <param name="parameterValues">分配给存储过程输入参数的对象数组</param>
            <returns>返回一个包含结果集的DataSet</returns>
        </member>
        <member name="T:XCLNetTools.DataBase.MSSQL.SqlHelper.SqlConnectionOwnership">
            <summary>
            枚举,标识数据库连接是由SqlHelper提供还是由调用者提供
            </summary>
        </member>
        <member name="F:XCLNetTools.DataBase.MSSQL.SqlHelper.SqlConnectionOwnership.Internal">
            <summary>由SqlHelper提供连接</summary>
        </member>
        <member name="F:XCLNetTools.DataBase.MSSQL.SqlHelper.SqlConnectionOwnership.External">
            <summary>由调用者提供连接</summary>
        </member>
        <member name="M:XCLNetTools.DataBase.MSSQL.SqlHelper.ExecuteReader(System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[],XCLNetTools.DataBase.MSSQL.SqlHelper.SqlConnectionOwnership)">
            <summary>
            执行指定数据库连接对象的数据阅读器.
            </summary>
            <remarks>
            如果是SqlHelper打开连接,当连接关闭DataReader也将关闭.
            如果是调用都打开连接,DataReader由调用都管理.
            </remarks>
            <param name="connection">一个有效的数据库连接对象</param>
            <param name="transaction">一个有效的事务,或者为 'null'</param>
            <param name="commandType">命令类型 (存储过程,命令文本或其它)</param>
            <param name="commandText">存储过程名或T-SQL语句</param>
            <param name="commandParameters">SqlParameters参数数组,如果没有参数则为'null'</param>
            <param name="connectionOwnership">标识数据库连接对象是由调用者提供还是由SqlHelper提供</param>
            <returns>返回包含结果集的SqlDataReader</returns>
        </member>
        <member name="M:XCLNetTools.DataBase.MSSQL.SqlHelper.ExecuteReader(System.String,System.Data.CommandType,System.String)">
            <summary>
            执行指定数据库连接字符串的数据阅读器.
            </summary>
            <remarks>
            示例:
             SqlDataReader dr = ExecuteReader(connString, CommandType.StoredProcedure, "GetOrders");
            </remarks>
            <param name="connectionString">一个有效的数据库连接字符串</param>
            <param name="commandType">命令类型 (存储过程,命令文本或其它)</param>
            <param name="commandText">存储过程名或T-SQL语句</param>
            <returns>返回包含结果集的SqlDataReader</returns>
        </member>
        <member name="M:XCLNetTools.DataBase.MSSQL.SqlHelper.ExecuteReader(System.String,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            执行指定数据库连接字符串的数据阅读器,指定参数.
            </summary>
            <remarks>
            示例:
             SqlDataReader dr = ExecuteReader(connString, CommandType.StoredProcedure, "GetOrders", new SqlParameter("@prodid", 24));
            </remarks>
            <param name="connectionString">一个有效的数据库连接字符串</param>
            <param name="commandType">命令类型 (存储过程,命令文本或其它)</param>
            <param name="commandText">存储过程名或T-SQL语句</param>
            <param name="commandParameters">SqlParamter参数数组(new SqlParameter("@prodid", 24))</param>
            <returns>返回包含结果集的SqlDataReader</returns>
        </member>
        <member name="M:XCLNetTools.DataBase.MSSQL.SqlHelper.ExecuteReader(System.String,System.String,System.Object[])">
            <summary>
            执行指定数据库连接字符串的数据阅读器,指定参数值.
            </summary>
            <remarks>
            此方法不提供访问存储过程输出参数和返回值参数.
            示例:
             SqlDataReader dr = ExecuteReader(connString, "GetOrders", 24, 36);
            </remarks>
            <param name="connectionString">一个有效的数据库连接字符串</param>
            <param name="spName">存储过程名</param>
            <param name="parameterValues">分配给存储过程输入参数的对象数组</param>
            <returns>返回包含结果集的SqlDataReader</returns>
        </member>
        <member name="M:XCLNetTools.DataBase.MSSQL.SqlHelper.ExecuteReader(System.Data.SqlClient.SqlConnection,System.Data.CommandType,System.String)">
            <summary>
            执行指定数据库连接对象的数据阅读器.
            </summary>
            <remarks>
            示例:
             SqlDataReader dr = ExecuteReader(conn, CommandType.StoredProcedure, "GetOrders");
            </remarks>
            <param name="connection">一个有效的数据库连接对象</param>
            <param name="commandType">命令类型 (存储过程,命令文本或其它)</param>
            <param name="commandText">存储过程名或T-SQL语句</param>
            <returns>返回包含结果集的SqlDataReader</returns>
        </member>
        <member name="M:XCLNetTools.DataBase.MSSQL.SqlHelper.ExecuteReader(System.Data.SqlClient.SqlConnection,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            [调用者方式]执行指定数据库连接对象的数据阅读器,指定参数.
            </summary>
            <remarks>
            示例:
             SqlDataReader dr = ExecuteReader(conn, CommandType.StoredProcedure, "GetOrders", new SqlParameter("@prodid", 24));
            </remarks>
            <param name="connection">一个有效的数据库连接对象</param>
            <param name="commandType">命令类型 (存储过程,命令文本或其它)</param>
            <param name="commandText">命令类型 (存储过程,命令文本或其它)</param>
            <param name="commandParameters">SqlParamter参数数组</param>
            <returns>返回包含结果集的SqlDataReader</returns>
        </member>
        <member name="M:XCLNetTools.DataBase.MSSQL.SqlHelper.ExecuteReader(System.Data.SqlClient.SqlConnection,System.String,System.Object[])">
            <summary>
            [调用者方式]执行指定数据库连接对象的数据阅读器,指定参数值.
            </summary>
            <remarks>
            此方法不提供访问存储过程输出参数和返回值参数.
            示例:
             SqlDataReader dr = ExecuteReader(conn, "GetOrders", 24, 36);
            </remarks>
            <param name="connection">一个有效的数据库连接对象</param>
            <param name="spName">T存储过程名</param>
            <param name="parameterValues">分配给存储过程输入参数的对象数组</param>
            <returns>返回包含结果集的SqlDataReader</returns>
        </member>
        <member name="M:XCLNetTools.DataBase.MSSQL.SqlHelper.ExecuteReader(System.Data.SqlClient.SqlTransaction,System.Data.CommandType,System.String)">
            <summary>
            [调用者方式]执行指定数据库事务的数据阅读器,指定参数值.
            </summary>
            <remarks>
            示例:
             SqlDataReader dr = ExecuteReader(trans, CommandType.StoredProcedure, "GetOrders");
            </remarks>
            <param name="transaction">一个有效的连接事务</param>
            <param name="commandType">命令类型 (存储过程,命令文本或其它)</param>
            <param name="commandText">存储过程名称或T-SQL语句</param>
            <returns>返回包含结果集的SqlDataReader</returns>
        </member>
        <member name="M:XCLNetTools.DataBase.MSSQL.SqlHelper.ExecuteReader(System.Data.SqlClient.SqlTransaction,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            [调用者方式]执行指定数据库事务的数据阅读器,指定参数.
            </summary>
            <remarks>
            示例:
              SqlDataReader dr = ExecuteReader(trans, CommandType.StoredProcedure, "GetOrders", new SqlParameter("@prodid", 24));
            </remarks>
            <param name="transaction">一个有效的连接事务</param>
            <param name="commandType">命令类型 (存储过程,命令文本或其它)</param>
            <param name="commandText">存储过程名称或T-SQL语句</param>
            <param name="commandParameters">分配给命令的SqlParamter参数数组</param>
            <returns>返回包含结果集的SqlDataReader</returns>
        </member>
        <member name="M:XCLNetTools.DataBase.MSSQL.SqlHelper.ExecuteReader(System.Data.SqlClient.SqlTransaction,System.String,System.Object[])">
             <summary>
             [调用者方式]执行指定数据库事务的数据阅读器,指定参数值.
             </summary>
             <remarks>
             此方法不提供访问存储过程输出参数和返回值参数.
            
             示例:
              SqlDataReader dr = ExecuteReader(trans, "GetOrders", 24, 36);
             </remarks>
             <param name="transaction">一个有效的连接事务</param>
             <param name="spName">存储过程名称</param>
             <param name="parameterValues">分配给存储过程输入参数的对象数组</param>
             <returns>返回包含结果集的SqlDataReader</returns>
        </member>
        <member name="M:XCLNetTools.DataBase.MSSQL.SqlHelper.ExecuteScalar(System.String,System.Data.CommandType,System.String)">
            <summary>
            执行指定数据库连接字符串的命令,返回结果集中的第一行第一列.
            </summary>
            <remarks>
            示例:
             int orderCount = (int)ExecuteScalar(connString, CommandType.StoredProcedure, "GetOrderCount");
            </remarks>
            <param name="connectionString">一个有效的数据库连接字符串</param>
            <param name="commandType">命令类型 (存储过程,命令文本或其它)</param>
            <param name="commandText">存储过程名称或T-SQL语句</param>
            <returns>返回结果集中的第一行第一列</returns>
        </member>
        <member name="M:XCLNetTools.DataBase.MSSQL.SqlHelper.ExecuteScalar(System.String,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            执行指定数据库连接字符串的命令,指定参数,返回结果集中的第一行第一列.
            </summary>
            <remarks>
            示例:
             int orderCount = (int)ExecuteScalar(connString, CommandType.StoredProcedure, "GetOrderCount", new SqlParameter("@prodid", 24));
            </remarks>
            <param name="connectionString">一个有效的数据库连接字符串</param>
            <param name="commandType">命令类型 (存储过程,命令文本或其它)</param>
            <param name="commandText">存储过程名称或T-SQL语句</param>
            <param name="commandParameters">分配给命令的SqlParamter参数数组</param>
            <returns>返回结果集中的第一行第一列</returns>
        </member>
        <member name="M:XCLNetTools.DataBase.MSSQL.SqlHelper.ExecuteScalar(System.String,System.String,System.Object[])">
             <summary>
             执行指定数据库连接字符串的命令,指定参数值,返回结果集中的第一行第一列.
             </summary>
             <remarks>
             此方法不提供访问存储过程输出参数和返回值参数.
            
             示例:
              int orderCount = (int)ExecuteScalar(connString, "GetOrderCount", 24, 36);
             </remarks>
             <param name="connectionString">一个有效的数据库连接字符串</param>
             <param name="spName">存储过程名称</param>
             <param name="parameterValues">分配给存储过程输入参数的对象数组</param>
             <returns>返回结果集中的第一行第一列</returns>
        </member>
        <member name="M:XCLNetTools.DataBase.MSSQL.SqlHelper.ExecuteScalar(System.Data.SqlClient.SqlConnection,System.Data.CommandType,System.String)">
            <summary>
            执行指定数据库连接对象的命令,返回结果集中的第一行第一列.
            </summary>
            <remarks>
            示例:
             int orderCount = (int)ExecuteScalar(conn, CommandType.StoredProcedure, "GetOrderCount");
            </remarks>
            <param name="connection">一个有效的数据库连接对象</param>
            <param name="commandType">命令类型 (存储过程,命令文本或其它)</param>
            <param name="commandText">存储过程名称或T-SQL语句</param>
            <returns>返回结果集中的第一行第一列</returns>
        </member>
        <member name="M:XCLNetTools.DataBase.MSSQL.SqlHelper.ExecuteScalar(System.Data.SqlClient.SqlConnection,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            执行指定数据库连接对象的命令,指定参数,返回结果集中的第一行第一列.
            </summary>
            <remarks>
            示例:
             int orderCount = (int)ExecuteScalar(conn, CommandType.StoredProcedure, "GetOrderCount", new SqlParameter("@prodid", 24));
            </remarks>
            <param name="connection">一个有效的数据库连接对象</param>
            <param name="commandType">命令类型 (存储过程,命令文本或其它)</param>
            <param name="commandText">存储过程名称或T-SQL语句</param>
            <param name="commandParameters">分配给命令的SqlParamter参数数组</param>
            <returns>返回结果集中的第一行第一列</returns>
        </member>
        <member name="M:XCLNetTools.DataBase.MSSQL.SqlHelper.ExecuteScalar(System.Data.SqlClient.SqlConnection,System.String,System.Object[])">
             <summary>
             执行指定数据库连接对象的命令,指定参数值,返回结果集中的第一行第一列.
             </summary>
             <remarks>
             此方法不提供访问存储过程输出参数和返回值参数.
            
             示例:
              int orderCount = (int)ExecuteScalar(conn, "GetOrderCount", 24, 36);
             </remarks>
             <param name="connection">一个有效的数据库连接对象</param>
             <param name="spName">存储过程名称</param>
             <param name="parameterValues">分配给存储过程输入参数的对象数组</param>
             <returns>返回结果集中的第一行第一列</returns>
        </member>
        <member name="M:XCLNetTools.DataBase.MSSQL.SqlHelper.ExecuteScalar(System.Data.SqlClient.SqlTransaction,System.Data.CommandType,System.String)">
            <summary>
            执行指定数据库事务的命令,返回结果集中的第一行第一列.
            </summary>
            <remarks>
            示例:
             int orderCount = (int)ExecuteScalar(trans, CommandType.StoredProcedure, "GetOrderCount");
            </remarks>
            <param name="transaction">一个有效的连接事务</param>
            <param name="commandType">命令类型 (存储过程,命令文本或其它)</param>
            <param name="commandText">存储过程名称或T-SQL语句</param>
            <returns>返回结果集中的第一行第一列</returns>
        </member>
        <member name="M:XCLNetTools.DataBase.MSSQL.SqlHelper.ExecuteScalar(System.Data.SqlClient.SqlTransaction,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            执行指定数据库事务的命令,指定参数,返回结果集中的第一行第一列.
            </summary>
            <remarks>
            示例:
             int orderCount = (int)ExecuteScalar(trans, CommandType.StoredProcedure, "GetOrderCount", new SqlParameter("@prodid", 24));
            </remarks>
            <param name="transaction">一个有效的连接事务</param>
            <param name="commandType">命令类型 (存储过程,命令文本或其它)</param>
            <param name="commandText">存储过程名称或T-SQL语句</param>
            <param name="commandParameters">分配给命令的SqlParamter参数数组</param>
            <returns>返回结果集中的第一行第一列</returns>
        </member>
        <member name="M:XCLNetTools.DataBase.MSSQL.SqlHelper.ExecuteScalar(System.Data.SqlClient.SqlTransaction,System.String,System.Object[])">
             <summary>
             执行指定数据库事务的命令,指定参数值,返回结果集中的第一行第一列.
             </summary>
             <remarks>
             此方法不提供访问存储过程输出参数和返回值参数.
            
             示例:
              int orderCount = (int)ExecuteScalar(trans, "GetOrderCount", 24, 36);
             </remarks>
             <param name="transaction">一个有效的连接事务</param>
             <param name="spName">存储过程名称</param>
             <param name="parameterValues">分配给存储过程输入参数的对象数组</param>
             <returns>返回结果集中的第一行第一列</returns>
        </member>
        <member name="M:XCLNetTools.DataBase.MSSQL.SqlHelper.ExecuteXmlReader(System.Data.SqlClient.SqlConnection,System.Data.CommandType,System.String)">
            <summary>
            执行指定数据库连接对象的SqlCommand命令,并产生一个XmlReader对象做为结果集返回.
            </summary>
            <remarks>
            示例:
             XmlReader r = ExecuteXmlReader(conn, CommandType.StoredProcedure, "GetOrders");
            </remarks>
            <param name="connection">一个有效的数据库连接对象</param>
            <param name="commandType">命令类型 (存储过程,命令文本或其它)</param>
            <param name="commandText">存储过程名称或T-SQL语句 using "FOR XML AUTO"</param>
            <returns>返回XmlReader结果集对象.</returns>
        </member>
        <member name="M:XCLNetTools.DataBase.MSSQL.SqlHelper.ExecuteXmlReader(System.Data.SqlClient.SqlConnection,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            执行指定数据库连接对象的SqlCommand命令,并产生一个XmlReader对象做为结果集返回,指定参数.
            </summary>
            <remarks>
            示例:
             XmlReader r = ExecuteXmlReader(conn, CommandType.StoredProcedure, "GetOrders", new SqlParameter("@prodid", 24));
            </remarks>
            <param name="connection">一个有效的数据库连接对象</param>
            <param name="commandType">命令类型 (存储过程,命令文本或其它)</param>
            <param name="commandText">存储过程名称或T-SQL语句 using "FOR XML AUTO"</param>
            <param name="commandParameters">分配给命令的SqlParamter参数数组</param>
            <returns>返回XmlReader结果集对象.</returns>
        </member>
        <member name="M:XCLNetTools.DataBase.MSSQL.SqlHelper.ExecuteXmlReader(System.Data.SqlClient.SqlConnection,System.String,System.Object[])">
             <summary>
             执行指定数据库连接对象的SqlCommand命令,并产生一个XmlReader对象做为结果集返回,指定参数值.
             </summary>
             <remarks>
             此方法不提供访问存储过程输出参数和返回值参数.
            
             示例:
              XmlReader r = ExecuteXmlReader(conn, "GetOrders", 24, 36);
             </remarks>
             <param name="connection">一个有效的数据库连接对象</param>
             <param name="spName">存储过程名称 using "FOR XML AUTO"</param>
             <param name="parameterValues">分配给存储过程输入参数的对象数组</param>
             <returns>返回XmlReader结果集对象.</returns>
        </member>
        <member name="M:XCLNetTools.DataBase.MSSQL.SqlHelper.ExecuteXmlReader(System.Data.SqlClient.SqlTransaction,System.Data.CommandType,System.String)">
            <summary>
            执行指定数据库事务的SqlCommand命令,并产生一个XmlReader对象做为结果集返回.
            </summary>
            <remarks>
            示例:
             XmlReader r = ExecuteXmlReader(trans, CommandType.StoredProcedure, "GetOrders");
            </remarks>
            <param name="transaction">一个有效的连接事务</param>
            <param name="commandType">命令类型 (存储过程,命令文本或其它)</param>
            <param name="commandText">存储过程名称或T-SQL语句 using "FOR XML AUTO"</param>
            <returns>返回XmlReader结果集对象.</returns>
        </member>
        <member name="M:XCLNetTools.DataBase.MSSQL.SqlHelper.ExecuteXmlReader(System.Data.SqlClient.SqlTransaction,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            执行指定数据库事务的SqlCommand命令,并产生一个XmlReader对象做为结果集返回,指定参数.
            </summary>
            <remarks>
            示例:
             XmlReader r = ExecuteXmlReader(trans, CommandType.StoredProcedure, "GetOrders", new SqlParameter("@prodid", 24));
            </remarks>
            <param name="transaction">一个有效的连接事务</param>
            <param name="commandType">命令类型 (存储过程,命令文本或其它)</param>
            <param name="commandText">存储过程名称或T-SQL语句 using "FOR XML AUTO"</param>
            <param name="commandParameters">分配给命令的SqlParamter参数数组</param>
            <returns>返回XmlReader结果集对象.</returns>
        </member>
        <member name="M:XCLNetTools.DataBase.MSSQL.SqlHelper.ExecuteXmlReader(System.Data.SqlClient.SqlTransaction,System.String,System.Object[])">
             <summary>
             执行指定数据库事务的SqlCommand命令,并产生一个XmlReader对象做为结果集返回,指定参数值.
             </summary>
             <remarks>
             此方法不提供访问存储过程输出参数和返回值参数.
            
             示例:
              XmlReader r = ExecuteXmlReader(trans, "GetOrders", 24, 36);
             </remarks>
             <param name="transaction">一个有效的连接事务</param>
             <param name="spName">存储过程名称</param>
             <param name="parameterValues">分配给存储过程输入参数的对象数组</param>
             <returns>返回一个包含结果集的DataSet.</returns>
        </member>
        <member name="M:XCLNetTools.DataBase.MSSQL.SqlHelper.FillDataset(System.String,System.Data.CommandType,System.String,System.Data.DataSet,System.String[])">
            <summary>
            执行指定数据库连接字符串的命令,映射数据表并填充数据集.
            </summary>
            <remarks>
            示例:
             FillDataset(connString, CommandType.StoredProcedure, "GetOrders", ds, new string[] {"orders"});
            </remarks>
            <param name="connectionString">一个有效的数据库连接字符串</param>
            <param name="commandType">命令类型 (存储过程,命令文本或其它)</param>
            <param name="commandText">存储过程名称或T-SQL语句</param>
            <param name="dataSet">要填充结果集的DataSet实例</param>
            <param name="tableNames">表映射的数据表数组
            用户定义的表名 (可有是实际的表名.)</param>
        </member>
        <member name="M:XCLNetTools.DataBase.MSSQL.SqlHelper.FillDataset(System.String,System.Data.CommandType,System.String,System.Data.DataSet,System.String[],System.Data.SqlClient.SqlParameter[])">
            <summary>
            执行指定数据库连接字符串的命令,映射数据表并填充数据集.指定命令参数.
            </summary>
            <remarks>
            示例:
             FillDataset(connString, CommandType.StoredProcedure, "GetOrders", ds, new string[] {"orders"}, new SqlParameter("@prodid", 24));
            </remarks>
            <param name="connectionString">一个有效的数据库连接字符串</param>
            <param name="commandType">命令类型 (存储过程,命令文本或其它)</param>
            <param name="commandText">存储过程名称或T-SQL语句</param>
            <param name="commandParameters">分配给命令的SqlParamter参数数组</param>
            <param name="dataSet">要填充结果集的DataSet实例</param>
            <param name="tableNames">表映射的数据表数组
            用户定义的表名 (可有是实际的表名.)
            </param>
        </member>
        <member name="M:XCLNetTools.DataBase.MSSQL.SqlHelper.FillDataset(System.String,System.String,System.Data.DataSet,System.String[],System.Object[])">
             <summary>
             执行指定数据库连接字符串的命令,映射数据表并填充数据集,指定存储过程参数值.
             </summary>
             <remarks>
             此方法不提供访问存储过程输出参数和返回值参数.
            
             示例:
              FillDataset(connString, CommandType.StoredProcedure, "GetOrders", ds, new string[] {"orders"}, 24);
             </remarks>
             <param name="connectionString">一个有效的数据库连接字符串</param>
             <param name="spName">存储过程名称</param>
             <param name="dataSet">要填充结果集的DataSet实例</param>
             <param name="tableNames">表映射的数据表数组
             用户定义的表名 (可有是实际的表名.)
             </param>
             <param name="parameterValues">分配给存储过程输入参数的对象数组</param>
        </member>
        <member name="M:XCLNetTools.DataBase.MSSQL.SqlHelper.FillDataset(System.Data.SqlClient.SqlConnection,System.Data.CommandType,System.String,System.Data.DataSet,System.String[])">
            <summary>
            执行指定数据库连接对象的命令,映射数据表并填充数据集.
            </summary>
            <remarks>
            示例:
             FillDataset(conn, CommandType.StoredProcedure, "GetOrders", ds, new string[] {"orders"});
            </remarks>
            <param name="connection">一个有效的数据库连接对象</param>
            <param name="commandType">命令类型 (存储过程,命令文本或其它)</param>
            <param name="commandText">存储过程名称或T-SQL语句</param>
            <param name="dataSet">要填充结果集的DataSet实例</param>
            <param name="tableNames">表映射的数据表数组
            用户定义的表名 (可有是实际的表名.)
            </param>
        </member>
        <member name="M:XCLNetTools.DataBase.MSSQL.SqlHelper.FillDataset(System.Data.SqlClient.SqlConnection,System.Data.CommandType,System.String,System.Data.DataSet,System.String[],System.Data.SqlClient.SqlParameter[])">
            <summary>
            执行指定数据库连接对象的命令,映射数据表并填充数据集,指定参数.
            </summary>
            <remarks>
            示例:
             FillDataset(conn, CommandType.StoredProcedure, "GetOrders", ds, new string[] {"orders"}, new SqlParameter("@prodid", 24));
            </remarks>
            <param name="connection">一个有效的数据库连接对象</param>
            <param name="commandType">命令类型 (存储过程,命令文本或其它)</param>
            <param name="commandText">存储过程名称或T-SQL语句</param>
            <param name="dataSet">要填充结果集的DataSet实例</param>
            <param name="tableNames">表映射的数据表数组
            用户定义的表名 (可有是实际的表名.)
            </param>
            <param name="commandParameters">分配给命令的SqlParamter参数数组</param>
        </member>
        <member name="M:XCLNetTools.DataBase.MSSQL.SqlHelper.FillDataset(System.Data.SqlClient.SqlConnection,System.String,System.Data.DataSet,System.String[],System.Object[])">
             <summary>
             执行指定数据库连接对象的命令,映射数据表并填充数据集,指定存储过程参数值.
             </summary>
             <remarks>
             此方法不提供访问存储过程输出参数和返回值参数.
            
             示例:
              FillDataset(conn, "GetOrders", ds, new string[] {"orders"}, 24, 36);
             </remarks>
             <param name="connection">一个有效的数据库连接对象</param>
             <param name="spName">存储过程名称</param>
             <param name="dataSet">要填充结果集的DataSet实例</param>
             <param name="tableNames">表映射的数据表数组
             用户定义的表名 (可有是实际的表名.)
             </param>
             <param name="parameterValues">分配给存储过程输入参数的对象数组</param>
        </member>
        <member name="M:XCLNetTools.DataBase.MSSQL.SqlHelper.FillDataset(System.Data.SqlClient.SqlTransaction,System.Data.CommandType,System.String,System.Data.DataSet,System.String[])">
            <summary>
            执行指定数据库事务的命令,映射数据表并填充数据集.
            </summary>
            <remarks>
            示例:
             FillDataset(trans, CommandType.StoredProcedure, "GetOrders", ds, new string[] {"orders"});
            </remarks>
            <param name="transaction">一个有效的连接事务</param>
            <param name="commandType">命令类型 (存储过程,命令文本或其它)</param>
            <param name="commandText">存储过程名称或T-SQL语句</param>
            <param name="dataSet">要填充结果集的DataSet实例</param>
            <param name="tableNames">表映射的数据表数组
            用户定义的表名 (可有是实际的表名.)
            </param>
        </member>
        <member name="M:XCLNetTools.DataBase.MSSQL.SqlHelper.FillDataset(System.Data.SqlClient.SqlTransaction,System.Data.CommandType,System.String,System.Data.DataSet,System.String[],System.Data.SqlClient.SqlParameter[])">
            <summary>
            执行指定数据库事务的命令,映射数据表并填充数据集,指定参数.
            </summary>
            <remarks>
            示例:
             FillDataset(trans, CommandType.StoredProcedure, "GetOrders", ds, new string[] {"orders"}, new SqlParameter("@prodid", 24));
            </remarks>
            <param name="transaction">一个有效的连接事务</param>
            <param name="commandType">命令类型 (存储过程,命令文本或其它)</param>
            <param name="commandText">存储过程名称或T-SQL语句</param>
            <param name="dataSet">要填充结果集的DataSet实例</param>
            <param name="tableNames">表映射的数据表数组
            用户定义的表名 (可有是实际的表名.)
            </param>
            <param name="commandParameters">分配给命令的SqlParamter参数数组</param>
        </member>
        <member name="M:XCLNetTools.DataBase.MSSQL.SqlHelper.FillDataset(System.Data.SqlClient.SqlTransaction,System.String,System.Data.DataSet,System.String[],System.Object[])">
             <summary>
             执行指定数据库事务的命令,映射数据表并填充数据集,指定存储过程参数值.
             </summary>
             <remarks>
             此方法不提供访问存储过程输出参数和返回值参数.
            
             示例:
              FillDataset(trans, "GetOrders", ds, new string[]{"orders"}, 24, 36);
             </remarks>
             <param name="transaction">一个有效的连接事务</param>
             <param name="spName">存储过程名称</param>
             <param name="dataSet">要填充结果集的DataSet实例</param>
             <param name="tableNames">表映射的数据表数组
             用户定义的表名 (可有是实际的表名.)
             </param>
             <param name="parameterValues">分配给存储过程输入参数的对象数组</param>
        </member>
        <member name="M:XCLNetTools.DataBase.MSSQL.SqlHelper.FillDataset(System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction,System.Data.CommandType,System.String,System.Data.DataSet,System.String[],System.Data.SqlClient.SqlParameter[])">
            <summary>
            [私有方法][内部调用]执行指定数据库连接对象/事务的命令,映射数据表并填充数据集,DataSet/TableNames/SqlParameters.
            </summary>
            <remarks>
            示例:
             FillDataset(conn, trans, CommandType.StoredProcedure, "GetOrders", ds, new string[] {"orders"}, new SqlParameter("@prodid", 24));
            </remarks>
            <param name="connection">一个有效的数据库连接对象</param>
            <param name="transaction">一个有效的连接事务</param>
            <param name="commandType">命令类型 (存储过程,命令文本或其它)</param>
            <param name="commandText">存储过程名称或T-SQL语句</param>
            <param name="dataSet">要填充结果集的DataSet实例</param>
            <param name="tableNames">表映射的数据表数组
            用户定义的表名 (可有是实际的表名.)
            </param>
            <param name="commandParameters">分配给命令的SqlParamter参数数组</param>
        </member>
        <member name="M:XCLNetTools.DataBase.MSSQL.SqlHelper.UpdateDataset(System.Data.SqlClient.SqlCommand,System.Data.SqlClient.SqlCommand,System.Data.SqlClient.SqlCommand,System.Data.DataSet,System.String)">
            <summary>
            执行数据集更新到数据库,指定inserted, updated, or deleted命令.
            </summary>
            <remarks>
            示例:
             UpdateDataset(conn, insertCommand, deleteCommand, updateCommand, dataSet, "Order");
            </remarks>
            <param name="insertCommand">[追加记录]一个有效的T-SQL语句或存储过程</param>
            <param name="deleteCommand">[删除记录]一个有效的T-SQL语句或存储过程</param>
            <param name="updateCommand">[更新记录]一个有效的T-SQL语句或存储过程</param>
            <param name="dataSet">要更新到数据库的DataSet</param>
            <param name="tableName">要更新到数据库的DataTable</param>
        </member>
        <member name="M:XCLNetTools.DataBase.MSSQL.SqlHelper.CreateCommand(System.Data.SqlClient.SqlConnection,System.String,System.String[])">
            <summary>
            创建SqlCommand命令,指定数据库连接对象,存储过程名和参数.
            </summary>
            <remarks>
            示例:
             SqlCommand command = CreateCommand(conn, "AddCustomer", "CustomerID", "CustomerName");
            </remarks>
            <param name="connection">一个有效的数据库连接对象</param>
            <param name="spName">存储过程名称</param>
            <param name="sourceColumns">源表的列名称数组</param>
            <returns>返回SqlCommand命令</returns>
        </member>
        <member name="M:XCLNetTools.DataBase.MSSQL.SqlHelper.ExecuteNonQueryTypedParams(System.String,System.String,System.Data.DataRow)">
            <summary>
            执行指定连接数据库连接字符串的存储过程,使用DataRow做为参数值,返回受影响的行数.
            </summary>
            <param name="connectionString">一个有效的数据库连接字符串</param>
            <param name="spName">存储过程名称</param>
            <param name="dataRow">使用DataRow作为参数值</param>
            <returns>返回影响的行数</returns>
        </member>
        <member name="M:XCLNetTools.DataBase.MSSQL.SqlHelper.ExecuteNonQueryTypedParams(System.Data.SqlClient.SqlConnection,System.String,System.Data.DataRow)">
            <summary>
            执行指定连接数据库连接对象的存储过程,使用DataRow做为参数值,返回受影响的行数.
            </summary>
            <param name="connection">一个有效的数据库连接对象</param>
            <param name="spName">存储过程名称</param>
            <param name="dataRow">使用DataRow作为参数值</param>
            <returns>返回影响的行数</returns>
        </member>
        <member name="M:XCLNetTools.DataBase.MSSQL.SqlHelper.ExecuteNonQueryTypedParams(System.Data.SqlClient.SqlTransaction,System.String,System.Data.DataRow)">
            <summary>
            执行指定连接数据库事物的存储过程,使用DataRow做为参数值,返回受影响的行数.
            </summary>
            <param name="transaction">一个有效的连接事务 object</param>
            <param name="spName">存储过程名称</param>
            <param name="dataRow">使用DataRow作为参数值</param>
            <returns>返回影响的行数</returns>
        </member>
        <member name="M:XCLNetTools.DataBase.MSSQL.SqlHelper.ExecuteDatasetTypedParams(System.String,System.String,System.Data.DataRow)">
            <summary>
            执行指定连接数据库连接字符串的存储过程,使用DataRow做为参数值,返回DataSet.
            </summary>
            <param name="connectionString">一个有效的数据库连接字符串</param>
            <param name="spName">存储过程名称</param>
            <param name="dataRow">使用DataRow作为参数值</param>
            <returns>返回一个包含结果集的DataSet.</returns>
        </member>
        <member name="M:XCLNetTools.DataBase.MSSQL.SqlHelper.ExecuteDatasetTypedParams(System.Data.SqlClient.SqlConnection,System.String,System.Data.DataRow)">
             <summary>
             执行指定连接数据库连接对象的存储过程,使用DataRow做为参数值,返回DataSet.
             </summary>
             <param name="connection">一个有效的数据库连接对象</param>
             <param name="spName">存储过程名称</param>
             <param name="dataRow">使用DataRow作为参数值</param>
             <returns>返回一个包含结果集的DataSet.</returns>
            
        </member>
        <member name="M:XCLNetTools.DataBase.MSSQL.SqlHelper.ExecuteDatasetTypedParams(System.Data.SqlClient.SqlTransaction,System.String,System.Data.DataRow)">
            <summary>
            执行指定连接数据库事务的存储过程,使用DataRow做为参数值,返回DataSet.
            </summary>
            <param name="transaction">一个有效的连接事务 object</param>
            <param name="spName">存储过程名称</param>
            <param name="dataRow">使用DataRow作为参数值</param>
            <returns>返回一个包含结果集的DataSet.</returns>
        </member>
        <member name="M:XCLNetTools.DataBase.MSSQL.SqlHelper.ExecuteReaderTypedParams(System.String,System.String,System.Data.DataRow)">
            <summary>
            执行指定连接数据库连接字符串的存储过程,使用DataRow做为参数值,返回DataReader.
            </summary>
            <param name="connectionString">一个有效的数据库连接字符串</param>
            <param name="spName">存储过程名称</param>
            <param name="dataRow">使用DataRow作为参数值</param>
            <returns>返回包含结果集的SqlDataReader</returns>
        </member>
        <member name="M:XCLNetTools.DataBase.MSSQL.SqlHelper.ExecuteReaderTypedParams(System.Data.SqlClient.SqlConnection,System.String,System.Data.DataRow)">
            <summary>
            执行指定连接数据库连接对象的存储过程,使用DataRow做为参数值,返回DataReader.
            </summary>
            <param name="connection">一个有效的数据库连接对象</param>
            <param name="spName">存储过程名称</param>
            <param name="dataRow">使用DataRow作为参数值</param>
            <returns>返回包含结果集的SqlDataReader</returns>
        </member>
        <member name="M:XCLNetTools.DataBase.MSSQL.SqlHelper.ExecuteReaderTypedParams(System.Data.SqlClient.SqlTransaction,System.String,System.Data.DataRow)">
            <summary>
            执行指定连接数据库事物的存储过程,使用DataRow做为参数值,返回DataReader.
            </summary>
            <param name="transaction">一个有效的连接事务 object</param>
            <param name="spName">存储过程名称</param>
            <param name="dataRow">使用DataRow作为参数值</param>
            <returns>返回包含结果集的SqlDataReader</returns>
        </member>
        <member name="M:XCLNetTools.DataBase.MSSQL.SqlHelper.ExecuteScalarTypedParams(System.String,System.String,System.Data.DataRow)">
            <summary>
            执行指定连接数据库连接字符串的存储过程,使用DataRow做为参数值,返回结果集中的第一行第一列.
            </summary>
            <param name="connectionString">一个有效的数据库连接字符串</param>
            <param name="spName">存储过程名称</param>
            <param name="dataRow">使用DataRow作为参数值</param>
            <returns>返回结果集中的第一行第一列</returns>
        </member>
        <member name="M:XCLNetTools.DataBase.MSSQL.SqlHelper.ExecuteScalarTypedParams(System.Data.SqlClient.SqlConnection,System.String,System.Data.DataRow)">
            <summary>
            执行指定连接数据库连接对象的存储过程,使用DataRow做为参数值,返回结果集中的第一行第一列.
            </summary>
            <param name="connection">一个有效的数据库连接对象</param>
            <param name="spName">存储过程名称</param>
            <param name="dataRow">使用DataRow作为参数值</param>
            <returns>返回结果集中的第一行第一列</returns>
        </member>
        <member name="M:XCLNetTools.DataBase.MSSQL.SqlHelper.ExecuteScalarTypedParams(System.Data.SqlClient.SqlTransaction,System.String,System.Data.DataRow)">
            <summary>
            执行指定连接数据库事务的存储过程,使用DataRow做为参数值,返回结果集中的第一行第一列.
            </summary>
            <param name="transaction">一个有效的连接事务 object</param>
            <param name="spName">存储过程名称</param>
            <param name="dataRow">使用DataRow作为参数值</param>
            <returns>返回结果集中的第一行第一列</returns>
        </member>
        <member name="M:XCLNetTools.DataBase.MSSQL.SqlHelper.ExecuteXmlReaderTypedParams(System.Data.SqlClient.SqlConnection,System.String,System.Data.DataRow)">
            <summary>
            执行指定连接数据库连接对象的存储过程,使用DataRow做为参数值,返回XmlReader类型的结果集.
            </summary>
            <param name="connection">一个有效的数据库连接对象</param>
            <param name="spName">存储过程名称</param>
            <param name="dataRow">使用DataRow作为参数值</param>
            <returns>返回XmlReader结果集对象.</returns>
        </member>
        <member name="M:XCLNetTools.DataBase.MSSQL.SqlHelper.ExecuteXmlReaderTypedParams(System.Data.SqlClient.SqlTransaction,System.String,System.Data.DataRow)">
            <summary>
            执行指定连接数据库事务的存储过程,使用DataRow做为参数值,返回XmlReader类型的结果集.
            </summary>
            <param name="transaction">一个有效的连接事务 object</param>
            <param name="spName">存储过程名称</param>
            <param name="dataRow">使用DataRow作为参数值</param>
            <returns>返回XmlReader结果集对象.</returns>
        </member>
        <member name="T:XCLNetTools.DataBase.MSSQL.SqlHelperParameterCache">
            <summary>
            SqlHelperParameterCache提供缓存存储过程参数,并能够在运行时从存储过程中探索参数.
            </summary>
        </member>
        <member name="M:XCLNetTools.DataBase.MSSQL.SqlHelperParameterCache.DiscoverSpParameterSet(System.Data.SqlClient.SqlConnection,System.String,System.Boolean)">
            <summary>
            探索运行时的存储过程,返回SqlParameter参数数组.
            初始化参数值为 DBNull.Value.
            </summary>
            <param name="connection">一个有效的数据库连接</param>
            <param name="spName">存储过程名称</param>
            <param name="includeReturnValueParameter">是否包含返回值参数</param>
            <returns>返回SqlParameter参数数组</returns>
        </member>
        <member name="M:XCLNetTools.DataBase.MSSQL.SqlHelperParameterCache.CloneParameters(System.Data.SqlClient.SqlParameter[])">
            <summary>
            SqlParameter参数数组的深层拷贝.
            </summary>
            <param name="originalParameters">原始参数数组</param>
            <returns>返回一个同样的参数数组</returns>
        </member>
        <member name="M:XCLNetTools.DataBase.MSSQL.SqlHelperParameterCache.CacheParameterSet(System.String,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            追加参数数组到缓存.
            </summary>
            <param name="connectionString">一个有效的数据库连接字符串</param>
            <param name="commandText">存储过程名或SQL语句</param>
            <param name="commandParameters">要缓存的参数数组</param>
        </member>
        <member name="M:XCLNetTools.DataBase.MSSQL.SqlHelperParameterCache.GetCachedParameterSet(System.String,System.String)">
            <summary>
            从缓存中获取参数数组.
            </summary>
            <param name="connectionString">一个有效的数据库连接字符</param>
            <param name="commandText">存储过程名或SQL语句</param>
            <returns>参数数组</returns>
        </member>
        <member name="M:XCLNetTools.DataBase.MSSQL.SqlHelperParameterCache.GetSpParameterSet(System.String,System.String)">
            <summary>
            返回指定的存储过程的参数集
            </summary>
            <remarks>
            这个方法将查询数据库,并将信息存储到缓存.
            </remarks>
            <param name="connectionString">一个有效的数据库连接字符</param>
            <param name="spName">存储过程名</param>
            <returns>返回SqlParameter参数数组</returns>
        </member>
        <member name="M:XCLNetTools.DataBase.MSSQL.SqlHelperParameterCache.GetSpParameterSet(System.String,System.String,System.Boolean)">
            <summary>
            返回指定的存储过程的参数集
            </summary>
            <remarks>
            这个方法将查询数据库,并将信息存储到缓存.
            </remarks>
            <param name="connectionString">一个有效的数据库连接字符.</param>
            <param name="spName">存储过程名</param>
            <param name="includeReturnValueParameter">是否包含返回值参数</param>
            <returns>返回SqlParameter参数数组</returns>
        </member>
        <member name="M:XCLNetTools.DataBase.MSSQL.SqlHelperParameterCache.GetSpParameterSet(System.Data.SqlClient.SqlConnection,System.String)">
            <summary>
            [内部]返回指定的存储过程的参数集(使用连接对象).
            </summary>
            <remarks>
            这个方法将查询数据库,并将信息存储到缓存.
            </remarks>
            <param name="connection">一个有效的数据库连接字符</param>
            <param name="spName">存储过程名</param>
            <returns>返回SqlParameter参数数组</returns>
        </member>
        <member name="M:XCLNetTools.DataBase.MSSQL.SqlHelperParameterCache.GetSpParameterSet(System.Data.SqlClient.SqlConnection,System.String,System.Boolean)">
            <summary>
            [内部]返回指定的存储过程的参数集(使用连接对象)
            </summary>
            <remarks>
            这个方法将查询数据库,并将信息存储到缓存.
            </remarks>
            <param name="connection">一个有效的数据库连接对象</param>
            <param name="spName">存储过程名</param>
            <param name="includeReturnValueParameter">
            是否包含返回值参数
            </param>
            <returns>返回SqlParameter参数数组</returns>
        </member>
        <member name="M:XCLNetTools.DataBase.MSSQL.SqlHelperParameterCache.GetSpParameterSetInternal(System.Data.SqlClient.SqlConnection,System.String,System.Boolean)">
            <summary>
            [私有]返回指定的存储过程的参数集(使用连接对象)
            </summary>
            <param name="connection">一个有效的数据库连接对象</param>
            <param name="spName">存储过程名</param>
            <param name="includeReturnValueParameter">是否包含返回值参数</param>
            <returns>返回SqlParameter参数数组</returns>
        </member>
        <member name="T:XCLNetTools.DataBase.Redis.RedisHelper">
            <summary>
            Redis帮助类
            </summary>
        </member>
        <member name="T:XCLNetTools.DataSource.DataReaderHelper">
            <summary>
            DataReader帮助类
            </summary>
        </member>
        <member name="M:XCLNetTools.DataSource.DataReaderHelper.DataReaderToIList``1(System.Data.IDataReader)">
            <summary>
            将DataReader转为list
            </summary>
            <param name="dr">要转换的数据</param>
            <returns>list</returns>
        </member>
        <member name="M:XCLNetTools.DataSource.DataReaderHelper.DataReaderToList``1(System.Data.IDataReader)">
            <summary>
            将DataReader转为list
            </summary>
            <param name="dr">要转换的数据</param>
            <returns>list</returns>
        </member>
        <member name="M:XCLNetTools.DataSource.DataReaderHelper.DataReaderToEntity``1(System.Data.IDataReader)">
            <summary>
            将DataReader转为实体
            </summary>
            <param name="dr">要转换的数据</param>
            <returns>list</returns>
        </member>
        <member name="T:XCLNetTools.DataSource.DataSetHelper">
            <summary>
            dataset相关
            </summary>
        </member>
        <member name="M:XCLNetTools.DataSource.DataSetHelper.DataSetToIList``1(System.Data.DataSet)">
            <summary>
            将dataset的第一个datatable转为list
            </summary>
            <param name="ds">要转换的数据</param>
            <returns>list</returns>
        </member>
        <member name="M:XCLNetTools.DataSource.DataSetHelper.DataTableToIList``1(System.Data.DataTable)">
            <summary>
            将dataTable转为list
            </summary>
            <param name="dt">要转换的数据</param>
            <returns>list</returns>
        </member>
        <member name="M:XCLNetTools.DataSource.DataSetHelper.DataSetToList``1(System.Data.DataSet)">
            <summary>
            将dataset的第一个datatable转为list
            </summary>
            <param name="ds">要转换的数据</param>
            <returns>list</returns>
        </member>
        <member name="M:XCLNetTools.DataSource.DataSetHelper.DataTableToList``1(System.Data.DataTable)">
            <summary>
            将dataTable转为list
            </summary>
            <param name="dt">要转换的数据</param>
            <returns>list</returns>
        </member>
        <member name="T:XCLNetTools.DataSource.DataTableHelper">
            <summary>
            datatable相关
            </summary>
        </member>
        <member name="M:XCLNetTools.DataSource.DataTableHelper.GetColIndex(System.Data.DataTable,System.Int32,System.String)">
            <summary>
            根据dt和指定行号和列名，返回该列的列号.若找不到该列，则返回-1
            </summary>
            <param name="dt">dataTable</param>
            <param name="rowIndex">行号</param>
            <param name="colName">列名</param>
            <returns>列号</returns>
        </member>
        <member name="M:XCLNetTools.DataSource.DataTableHelper.ToSingleColumnDataTable``2(System.Collections.Generic.List{``0},System.String)">
            <summary>
            将lst转为单列的datatable，如果lst没有数据，则返回一个空的datatable
            </summary>
            <typeparam name="source">要转换的列类型</typeparam>
            <typeparam name="target">转换后的列类型</typeparam>
            <param name="lst">要转换的数据源</param>
            <param name="columnName">datatable列名，默认为“ID”</param>
            <returns>转换后的datatable</returns>
        </member>
        <member name="M:XCLNetTools.DataSource.DataTableHelper.ToDataTable``1(System.Collections.Generic.IList{``0})">
            <summary>
            将List转换成DataTable
            </summary>
            <param name="data">要转换的数据</param>
            <returns>datatable</returns>
        </member>
        <member name="T:XCLNetTools.Entity.BookmarkEntity">
            <summary>
            浏览器书签实体
            </summary>
        </member>
        <member name="P:XCLNetTools.Entity.BookmarkEntity.Id">
            <summary>
            编号
            </summary>
        </member>
        <member name="P:XCLNetTools.Entity.BookmarkEntity.ParentId">
            <summary>
            父id
            </summary>
        </member>
        <member name="P:XCLNetTools.Entity.BookmarkEntity.IsFolder">
            <summary>
            是否为文件夹
            </summary>
        </member>
        <member name="P:XCLNetTools.Entity.BookmarkEntity.Name">
            <summary>
            书签名称
            </summary>
        </member>
        <member name="P:XCLNetTools.Entity.BookmarkEntity.IcoURL">
            <summary>
            ico图标地址
            </summary>
        </member>
        <member name="P:XCLNetTools.Entity.BookmarkEntity.Url">
            <summary>
            书签链接
            </summary>
        </member>
        <member name="T:XCLNetTools.Entity.Enum.EnumFieldTModel`1">
            <summary>
            枚举model
            </summary>
            <typeparam name="T">枚举value值类型（可为byte、sbyte、short、ushort、int、uint、long 或 ulong。）</typeparam>
        </member>
        <member name="P:XCLNetTools.Entity.Enum.EnumFieldTModel`1.Text">
            <summary>
            text值
            </summary>
        </member>
        <member name="P:XCLNetTools.Entity.Enum.EnumFieldTModel`1.Value">
            <summary>
            value值
            </summary>
        </member>
        <member name="P:XCLNetTools.Entity.Enum.EnumFieldTModel`1.Description">
            <summary>
            description特性
            </summary>
        </member>
        <member name="T:XCLNetTools.Entity.Enum.EnumFieldModel">
            <summary>
            Enum项model
            </summary>
        </member>
        <member name="P:XCLNetTools.Entity.Enum.EnumFieldModel.Text">
            <summary>
            text值
            </summary>
        </member>
        <member name="P:XCLNetTools.Entity.Enum.EnumFieldModel.Value">
            <summary>
            value值
            </summary>
        </member>
        <member name="P:XCLNetTools.Entity.Enum.EnumFieldModel.Description">
            <summary>
            description特性
            </summary>
        </member>
        <member name="T:XCLNetTools.Entity.FileInfoEntity">
            <summary>
            文件信息实体
            </summary>
        </member>
        <member name="P:XCLNetTools.Entity.FileInfoEntity.ID">
            <summary>
            标识ID
            </summary>
        </member>
        <member name="P:XCLNetTools.Entity.FileInfoEntity.IsFolder">
            <summary>
            是否为文件夹
            </summary>
        </member>
        <member name="P:XCLNetTools.Entity.FileInfoEntity.Name">
            <summary>
            文件名
            </summary>
        </member>
        <member name="P:XCLNetTools.Entity.FileInfoEntity.ExtName">
            <summary>
            扩展名（不含小圆点）
            </summary>
        </member>
        <member name="P:XCLNetTools.Entity.FileInfoEntity.RootPath">
            <summary>
            根物理路径
            </summary>
        </member>
        <member name="P:XCLNetTools.Entity.FileInfoEntity.Path">
            <summary>
            该文件或文件夹的物理路径
            </summary>
        </member>
        <member name="P:XCLNetTools.Entity.FileInfoEntity.WebPath">
            <summary>
            该文件或文件夹的web路径
            </summary>
        </member>
        <member name="P:XCLNetTools.Entity.FileInfoEntity.RelativePath">
            <summary>
            该文件或文件夹相对于RootPath的相对路径
            </summary>
        </member>
        <member name="P:XCLNetTools.Entity.FileInfoEntity.Size">
            <summary>
            大小(byte)
            </summary>
        </member>
        <member name="P:XCLNetTools.Entity.FileInfoEntity.ModifyTime">
            <summary>
            修改时间
            </summary>
        </member>
        <member name="P:XCLNetTools.Entity.FileInfoEntity.CreateTime">
            <summary>
            创建时间
            </summary>
        </member>
        <member name="T:XCLNetTools.Entity.Http.HttpItem">
            <summary>
            Http请求参考类
            </summary>
        </member>
        <member name="P:XCLNetTools.Entity.Http.HttpItem.URL">
            <summary>
            请求URL必须填写
            </summary>
        </member>
        <member name="P:XCLNetTools.Entity.Http.HttpItem.Method">
            <summary>
            请求方式默认为GET方式,当为POST方式时必须设置Postdata的值
            </summary>
        </member>
        <member name="P:XCLNetTools.Entity.Http.HttpItem.Timeout">
            <summary>
            默认请求超时时间
            </summary>
        </member>
        <member name="P:XCLNetTools.Entity.Http.HttpItem.ReadWriteTimeout">
            <summary>
            默认写入Post数据超时间
            </summary>
        </member>
        <member name="P:XCLNetTools.Entity.Http.HttpItem.KeepAlive">
            <summary>
             获取或设置一个值，该值指示是否与 Internet 资源建立持久性连接默认为true。
            </summary>
        </member>
        <member name="P:XCLNetTools.Entity.Http.HttpItem.Accept">
            <summary>
            请求标头值 默认为text/html, application/xhtml+xml, */*
            </summary>
        </member>
        <member name="P:XCLNetTools.Entity.Http.HttpItem.ContentType">
            <summary>
            请求返回类型默认 text/html
            </summary>
        </member>
        <member name="P:XCLNetTools.Entity.Http.HttpItem.UserAgent">
            <summary>
            客户端访问信息默认Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Trident/5.0)
            </summary>
        </member>
        <member name="P:XCLNetTools.Entity.Http.HttpItem.Encoding">
            <summary>
            返回数据编码默认为NUll,可以自动识别,一般为utf-8,gbk,gb2312
            </summary>
        </member>
        <member name="P:XCLNetTools.Entity.Http.HttpItem.PostDataType">
            <summary>
            Post的数据类型
            </summary>
        </member>
        <member name="P:XCLNetTools.Entity.Http.HttpItem.Postdata">
            <summary>
            Post请求时要发送的字符串Post数据
            </summary>
        </member>
        <member name="P:XCLNetTools.Entity.Http.HttpItem.PostdataByte">
            <summary>
            Post请求时要发送的Byte类型的Post数据
            </summary>
        </member>
        <member name="P:XCLNetTools.Entity.Http.HttpItem.CookieCollection">
            <summary>
            Cookie对象集合
            </summary>
        </member>
        <member name="P:XCLNetTools.Entity.Http.HttpItem.Cookie">
            <summary>
            请求时的Cookie
            </summary>
        </member>
        <member name="P:XCLNetTools.Entity.Http.HttpItem.Referer">
            <summary>
            来源地址，上次访问地址
            </summary>
        </member>
        <member name="P:XCLNetTools.Entity.Http.HttpItem.CerPath">
            <summary>
            证书绝对路径
            </summary>
        </member>
        <member name="P:XCLNetTools.Entity.Http.HttpItem.IsToLower">
            <summary>
            是否设置为全文小写，默认为不转化
            </summary>
        </member>
        <member name="P:XCLNetTools.Entity.Http.HttpItem.Allowautoredirect">
            <summary>
            支持跳转页面，查询结果将是跳转后的页面，默认是不跳转
            </summary>
        </member>
        <member name="P:XCLNetTools.Entity.Http.HttpItem.Connectionlimit">
            <summary>
            最大连接数
            </summary>
        </member>
        <member name="P:XCLNetTools.Entity.Http.HttpItem.ProxyUserName">
            <summary>
            代理Proxy 服务器用户名
            </summary>
        </member>
        <member name="P:XCLNetTools.Entity.Http.HttpItem.ProxyPwd">
            <summary>
            代理 服务器密码
            </summary>
        </member>
        <member name="P:XCLNetTools.Entity.Http.HttpItem.ProxyIp">
            <summary>
            代理 服务IP
            </summary>
        </member>
        <member name="P:XCLNetTools.Entity.Http.HttpItem.ResultType">
            <summary>
            设置返回类型String和Byte
            </summary>
        </member>
        <member name="P:XCLNetTools.Entity.Http.HttpItem.Header">
            <summary>
            header对象
            </summary>
        </member>
        <member name="P:XCLNetTools.Entity.Http.HttpItem.ProtocolVersion">
            <summary>
            获取或设置用于请求的 HTTP 版本。返回结果:用于请求的 HTTP 版本。默认为 System.Net.HttpVersion.Version11。
            </summary>
        </member>
        <member name="P:XCLNetTools.Entity.Http.HttpItem.Expect100Continue">
            <summary>
             获取或设置一个 System.Boolean 值，该值确定是否使用 100-Continue 行为。如果 POST 请求需要 100-Continue 响应，则为 true；否则为 false。默认值为 true。
            </summary>
        </member>
        <member name="P:XCLNetTools.Entity.Http.HttpItem.ClentCertificates">
            <summary>
            设置509证书集合
            </summary>
        </member>
        <member name="P:XCLNetTools.Entity.Http.HttpItem.PostEncoding">
            <summary>
            设置或获取Post参数编码,默认的为Default编码
            </summary>
        </member>
        <member name="T:XCLNetTools.Entity.Http.HttpResult">
            <summary>
            Http返回参数类
            </summary>
        </member>
        <member name="P:XCLNetTools.Entity.Http.HttpResult.Cookie">
            <summary>
            Http请求返回的Cookie
            </summary>
        </member>
        <member name="P:XCLNetTools.Entity.Http.HttpResult.CookieCollection">
            <summary>
            Cookie对象集合
            </summary>
        </member>
        <member name="P:XCLNetTools.Entity.Http.HttpResult.Html">
            <summary>
            返回的String类型数据 只有ResultType.String时才返回数据，其它情况为空
            </summary>
        </member>
        <member name="P:XCLNetTools.Entity.Http.HttpResult.ResultByte">
            <summary>
            返回的Byte数组 只有ResultType.Byte时才返回数据，其它情况为空
            </summary>
        </member>
        <member name="P:XCLNetTools.Entity.Http.HttpResult.Header">
            <summary>
            header对象
            </summary>
        </member>
        <member name="P:XCLNetTools.Entity.Http.HttpResult.StatusDescription">
            <summary>
            返回状态说明
            </summary>
        </member>
        <member name="P:XCLNetTools.Entity.Http.HttpResult.StatusCode">
            <summary>
            返回状态码,默认为OK
            </summary>
        </member>
        <member name="T:XCLNetTools.Entity.Message.JsonMsg">
            <summary>
            json消息信息
            </summary>
        </member>
        <member name="M:XCLNetTools.Entity.Message.JsonMsg.#ctor">
            <summary>
            构造函数，初始化head和body
            </summary>
        </member>
        <member name="P:XCLNetTools.Entity.Message.JsonMsg.Head">
            <summary>
            head
            </summary>
        </member>
        <member name="P:XCLNetTools.Entity.Message.JsonMsg.Body">
            <summary>
            body
            </summary>
        </member>
        <member name="T:XCLNetTools.Entity.Message.JsonMsgBody">
            <summary>
            json消息正文信息
            </summary>
        </member>
        <member name="P:XCLNetTools.Entity.Message.JsonMsgBody.Data">
            <summary>
            主数据
            </summary>
        </member>
        <member name="P:XCLNetTools.Entity.Message.JsonMsgBody.ExtendData">
            <summary>
            扩展数据
            </summary>
        </member>
        <member name="T:XCLNetTools.Entity.Message.JsonMsgHead">
            <summary>
            json消息头信息
            </summary>
        </member>
        <member name="P:XCLNetTools.Entity.Message.JsonMsgHead.Title">
            <summary>
            提示标题
            </summary>
        </member>
        <member name="P:XCLNetTools.Entity.Message.JsonMsgHead.Date">
            <summary>
            消息提示时间
            </summary>
        </member>
        <member name="P:XCLNetTools.Entity.Message.JsonMsgHead.Message">
            <summary>
            消息提示内容
            </summary>
        </member>
        <member name="P:XCLNetTools.Entity.Message.JsonMsgHead.MessageMore">
            <summary>
            消息详细信息
            </summary>
        </member>
        <member name="P:XCLNetTools.Entity.Message.JsonMsgHead.Url">
            <summary>
            消息发生页地址
            </summary>
        </member>
        <member name="P:XCLNetTools.Entity.Message.JsonMsgHead.FromUrl">
            <summary>
            消息页来源地址(reffer)
            </summary>
        </member>
        <member name="P:XCLNetTools.Entity.Message.JsonMsgHead.IsSuccess">
            <summary>
            是否成功与失败的标识
            </summary>
        </member>
        <member name="P:XCLNetTools.Entity.Message.JsonMsgHead.IsRefresh">
            <summary>
            是否需要刷新
            </summary>
        </member>
        <member name="P:XCLNetTools.Entity.Message.JsonMsgHead.Remark">
            <summary>
            备注信息
            </summary>
        </member>
        <member name="P:XCLNetTools.Entity.Message.JsonMsgHead.IsRedirect">
            <summary>
            是否需要跳转
            </summary>
        </member>
        <member name="P:XCLNetTools.Entity.Message.JsonMsgHead.RedirectURL">
            <summary>
            要跳转的url
            </summary>
        </member>
        <member name="P:XCLNetTools.Entity.Message.JsonMsgHead.IsAjax">
            <summary>
            当前请求是否为ajax请求
            </summary>
        </member>
        <member name="P:XCLNetTools.Entity.Message.JsonMsgHead.ErrorCode">
            <summary>
            错误码
            </summary>
        </member>
        <member name="T:XCLNetTools.Entity.MethodResult`1">
            <summary>
            方法返回值实体，主要是方便一个方法输出多个信息时使用，同时也减少使用out返回结果信息
            </summary>
            <typeparam name="TResult">方法返回的结果类型</typeparam>
        </member>
        <member name="P:XCLNetTools.Entity.MethodResult`1.IsSuccess">
            <summary>
            该方法执行的逻辑是否成功（默认为true）
            （如果TResult与IsSuccess属性均为bool，则Result与IsSuccess一致）
            </summary>
        </member>
        <member name="P:XCLNetTools.Entity.MethodResult`1.Message">
            <summary>
            该方法返回的消息提示
            </summary>
        </member>
        <member name="P:XCLNetTools.Entity.MethodResult`1.ErrorMessage">
            <summary>
            该方法返回的错误消息提示
            </summary>
        </member>
        <member name="P:XCLNetTools.Entity.MethodResult`1.Result">
            <summary>
            该方法返回的结果
            （如果TResult与IsSuccess属性均为bool，则Result与IsSuccess一致）
            </summary>
        </member>
        <member name="P:XCLNetTools.Entity.MethodResult`1.Data">
            <summary>
            其它数据（比如用dictionary存放不同的数据结果）
            </summary>
        </member>
        <member name="T:XCLNetTools.Entity.MethodResult`2">
            <summary>
            方法返回值实体，主要是方便一个方法输出多个信息时使用，同时也减少使用out返回结果信息
            </summary>
            <typeparam name="TResult">方法返回的结果类型</typeparam>
            <typeparam name="TData">Data属性的类型</typeparam>
        </member>
        <member name="P:XCLNetTools.Entity.MethodResult`2.IsSuccess">
            <summary>
            该方法执行的逻辑是否成功（默认为true）
            （如果TResult与IsSuccess属性均为bool，则Result与IsSuccess一致）
            </summary>
        </member>
        <member name="P:XCLNetTools.Entity.MethodResult`2.Message">
            <summary>
            该方法返回的消息提示
            </summary>
        </member>
        <member name="P:XCLNetTools.Entity.MethodResult`2.ErrorMessage">
            <summary>
            该方法返回的错误消息提示
            </summary>
        </member>
        <member name="P:XCLNetTools.Entity.MethodResult`2.Result">
            <summary>
            该方法返回的结果
            （如果TResult与IsSuccess属性均为bool，则Result与IsSuccess一致）
            </summary>
        </member>
        <member name="P:XCLNetTools.Entity.MethodResult`2.Data">
            <summary>
            其它数据（比如用dictionary存放不同的数据结果）
            </summary>
        </member>
        <member name="T:XCLNetTools.Entity.SetOptionEntity">
            <summary>
            生成select的option时的选项
            </summary>
        </member>
        <member name="P:XCLNetTools.Entity.SetOptionEntity.IsNeedPleaseSelect">
            <summary>
            是否需要生成"请选择"的option
            </summary>
        </member>
        <member name="P:XCLNetTools.Entity.SetOptionEntity.DefaultValue">
            <summary>
            默认选中的项
            </summary>
        </member>
        <member name="P:XCLNetTools.Entity.SetOptionEntity.TextFieldEnum">
            <summary>
            Text字段类型，默认为：None
            </summary>
        </member>
        <member name="P:XCLNetTools.Entity.SetOptionEntity.ValueFieldEnum">
            <summary>
            Value字段类型，默认为：None
            </summary>
        </member>
        <member name="T:XCLNetTools.Entity.SqlPagerConditionEntity">
            <summary>
            sql 分页条件实体
            </summary>
        </member>
        <member name="M:XCLNetTools.Entity.SqlPagerConditionEntity.#ctor">
            <summary>
            默认构造
            </summary>
        </member>
        <member name="M:XCLNetTools.Entity.SqlPagerConditionEntity.#ctor(System.String)">
            <summary>
            构造
            </summary>
            <param name="tableName">表名</param>
        </member>
        <member name="P:XCLNetTools.Entity.SqlPagerConditionEntity.DatabaseType">
            <summary>
            数据库类型（默认sql server）
            </summary>
        </member>
        <member name="P:XCLNetTools.Entity.SqlPagerConditionEntity.TableName">
            <summary>
            表名
            </summary>
        </member>
        <member name="P:XCLNetTools.Entity.SqlPagerConditionEntity.Where">
            <summary>
            where条件（前面无需加"where"）
            </summary>
        </member>
        <member name="P:XCLNetTools.Entity.SqlPagerConditionEntity.PageIndex">
            <summary>
            页码（默认1）
            </summary>
        </member>
        <member name="P:XCLNetTools.Entity.SqlPagerConditionEntity.PageSize">
            <summary>
            每页最多显示的记录数（默认10）
            </summary>
        </member>
        <member name="P:XCLNetTools.Entity.SqlPagerConditionEntity.IsNeedAllCount">
            <summary>
            是否需要查询当前所有页结果的总记录数（默认：true）
            </summary>
        </member>
        <member name="P:XCLNetTools.Entity.SqlPagerConditionEntity.OrderBy">
            <summary>
            排序字段（前面无需添加"ORDER BY"）
            </summary>
        </member>
        <member name="P:XCLNetTools.Entity.SqlPagerConditionEntity.FieldNameList">
            <summary>
            要查询的字段（若无值，则默认为所有字段）
            </summary>
        </member>
        <member name="T:XCLNetTools.Entity.Office.ExcelHandler.OutPutClass">
            <summary>
            导出字段实体类
            （主要是便于在所有导出信息字段类中查询到要导出的记录的字段对应信息）
            </summary>
        </member>
        <member name="P:XCLNetTools.Entity.Office.ExcelHandler.OutPutClass.TableName">
            <summary>
            表名
            </summary>
        </member>
        <member name="P:XCLNetTools.Entity.Office.ExcelHandler.OutPutClass.Fields">
            <summary>
            字段列表
            </summary>
        </member>
        <member name="T:XCLNetTools.Entity.Office.ExcelHandler.OutPutField">
            <summary>
            要导出的字段类
            </summary>
        </member>
        <member name="P:XCLNetTools.Entity.Office.ExcelHandler.OutPutField.oldName">
            <summary>
            该字段的原始名
            </summary>
        </member>
        <member name="P:XCLNetTools.Entity.Office.ExcelHandler.OutPutField.newName">
            <summary>
            导出后，该字段在EXCEL中的显示名
            </summary>
        </member>
        <member name="T:XCLNetTools.Entity.Office.ExcelHandler.OutPutParamClass">
            <summary>
            导出参数类
            </summary>
        </member>
        <member name="P:XCLNetTools.Entity.Office.ExcelHandler.OutPutParamClass.TableName">
            <summary>
            表名（主要是便于在xml字段名list中找到该节点信息）,对应dataSet中的table
            </summary>
        </member>
        <member name="P:XCLNetTools.Entity.Office.ExcelHandler.OutPutParamClass.OutPutClass">
            <summary>
            导出类，包含新旧字段名（为null时，则保持ds中的相应的列名）
            </summary>
        </member>
        <member name="P:XCLNetTools.Entity.Office.ExcelHandler.OutPutParamClass.Ds">
            <summary>
            要导出的DataSet
            </summary>
        </member>
        <member name="P:XCLNetTools.Entity.Office.ExcelHandler.OutPutParamClass.FileTitle">
            <summary>
            导出的EXCEL文件的名字
            </summary>
        </member>
        <member name="P:XCLNetTools.Entity.Office.ExcelHandler.OutPutParamClass.ConTitle">
            <summary>
            excel中第一行的标题
            </summary>
        </member>
        <member name="P:XCLNetTools.Entity.Office.ExcelHandler.OutPutParamClass.AutoDownLoad">
            <summary>
            是否自动下载
            </summary>
        </member>
        <member name="P:XCLNetTools.Entity.Office.ExcelHandler.OutPutParamClass.CustomFileName">
            <summary>
            自定义文件名（保存后的完整路径名）
            </summary>
        </member>
        <member name="P:XCLNetTools.Entity.Office.ExcelHandler.OutPutParamClass.SaveFormat">
            <summary>
            自定义保存时，文件保存的格式
            </summary>
        </member>
        <member name="P:XCLNetTools.Entity.Office.ExcelHandler.OutPutParamClass.FirstRowIndex">
            <summary>
            填充的数据起始行索引号（0为第一行）
            </summary>
        </member>
        <member name="P:XCLNetTools.Entity.Office.ExcelHandler.OutPutParamClass.FirstColumnIndex">
            <summary>
            填充的数据起始列索引号（0为第一行）
            </summary>
        </member>
        <member name="P:XCLNetTools.Entity.Office.ExcelHandler.OutPutParamClass.IsShowCustomLine">
            <summary>
            是否显示自定义文字行（就是第一行的导出信息）
            </summary>
        </member>
        <member name="P:XCLNetTools.Entity.Office.ExcelHandler.OutPutParamClass.IsShowFieldLine">
            <summary>
            是否显示字段行
            </summary>
        </member>
        <member name="P:XCLNetTools.Entity.Office.ExcelHandler.OutPutParamClass.WorkBookFilePath">
            <summary>
            指定被操作的工作薄文件
            （用于向已有文件中写入数据并导出的情况）
            </summary>
        </member>
        <member name="P:XCLNetTools.Entity.Office.ExcelHandler.OutPutParamClass.GetWorkBook">
            <summary>
            获取当前正在操作的WorkBook
            </summary>
        </member>
        <member name="T:XCLNetTools.Entity.EasyUI.TreeItem">
            <summary>
            tree的每项(注意大小写，此js插件中是小写)
            </summary>
        </member>
        <member name="P:XCLNetTools.Entity.EasyUI.TreeItem.ID">
            <summary>
            标识
            </summary>
        </member>
        <member name="P:XCLNetTools.Entity.EasyUI.TreeItem.Text">
            <summary>
            显示文本
            </summary>
        </member>
        <member name="P:XCLNetTools.Entity.EasyUI.TreeItem.State">
            <summary>
            状态（open/closed）
            </summary>
        </member>
        <member name="P:XCLNetTools.Entity.EasyUI.TreeItem.Checked">
            <summary>
            是否选中该节点
            </summary>
        </member>
        <member name="P:XCLNetTools.Entity.EasyUI.TreeItem.Attributes">
            <summary>
            自定义属性
            </summary>
        </member>
        <member name="P:XCLNetTools.Entity.EasyUI.TreeItem.Children">
            <summary>
            子项数组
            </summary>
        </member>
        <member name="T:XCLNetTools.Entity.PagerInfo">
            <summary>
            分页信息model
            </summary>
        </member>
        <member name="M:XCLNetTools.Entity.PagerInfo.#ctor">
            <summary>
            默认构造方法
            </summary>
        </member>
        <member name="M:XCLNetTools.Entity.PagerInfo.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>
            分页信息 构造函数
            </summary>
        </member>
        <member name="M:XCLNetTools.Entity.PagerInfo.Refresh">
            <summary>
            刷新其它参数的值
            </summary>
        </member>
        <member name="P:XCLNetTools.Entity.PagerInfo.PageIndex">
            <summary>
            当前页码（第一页为1），默认为1
            注：若重新设置此值，则将一同更新其它相关联的属性值
            </summary>
        </member>
        <member name="P:XCLNetTools.Entity.PagerInfo.PageSize">
            <summary>
            每页最多显示的记录数，默认为10
            注：若重新设置此值，则将一同更新其它相关联的属性值
            </summary>
        </member>
        <member name="P:XCLNetTools.Entity.PagerInfo.RecordCount">
            <summary>
            当前记录总数
            注：若重新设置此值，则将一同更新其它相关联的属性值
            </summary>
        </member>
        <member name="P:XCLNetTools.Entity.PagerInfo.PageCount">
            <summary>
            当前总页数
            </summary>
        </member>
        <member name="P:XCLNetTools.Entity.PagerInfo.CurrentPageRecordCount">
            <summary>
            当前页的实际记录条数
            </summary>
        </member>
        <member name="P:XCLNetTools.Entity.PagerInfo.StartIndex">
            <summary>
            当前页的第一条记录的序号
            </summary>
        </member>
        <member name="P:XCLNetTools.Entity.PagerInfo.EndIndex">
            <summary>
            当前页的最后一条记录的序号
            </summary>
        </member>
        <member name="P:XCLNetTools.Entity.PagerInfo.ControllerName">
            <summary>
            controller
            </summary>
        </member>
        <member name="P:XCLNetTools.Entity.PagerInfo.ActionName">
            <summary>
            action
            </summary>
        </member>
        <member name="M:XCLNetTools.Entity.PagerInfo.ToPagerInfoSimple">
            <summary>
            转为PagerInfoSimple对象
            </summary>
            <returns>PagerInfoSimple对象</returns>
        </member>
        <member name="T:XCLNetTools.Entity.PagerInfoSimple">
            <summary>
            分页信息简易model
            </summary>
        </member>
        <member name="M:XCLNetTools.Entity.PagerInfoSimple.#ctor">
            <summary>
            默认构造
            </summary>
        </member>
        <member name="M:XCLNetTools.Entity.PagerInfoSimple.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>
            构造方法
            </summary>
            <param name="pageIndex">当前为第几页</param>
            <param name="pageSize">每页最多显示多少条记录</param>
            <param name="recordCount">记录总数</param>
        </member>
        <member name="P:XCLNetTools.Entity.PagerInfoSimple.PageIndex">
            <summary>
            当前为第几页
            </summary>
        </member>
        <member name="P:XCLNetTools.Entity.PagerInfoSimple.PageSize">
            <summary>
            每页最多显示多少条记录
            </summary>
        </member>
        <member name="P:XCLNetTools.Entity.PagerInfoSimple.RecordCount">
            <summary>
            记录总数
            </summary>
        </member>
        <member name="M:XCLNetTools.Entity.PagerInfoSimple.ToPagerInfo">
            <summary>
            转为PagerInfo对象
            </summary>
            <returns>PagerInfo对象</returns>
        </member>
        <member name="T:XCLNetTools.Entity.KeyValue">
            <summary>
            键值类
            </summary>
        </member>
        <member name="P:XCLNetTools.Entity.KeyValue.Key">
            <summary>
            键
            </summary>
        </member>
        <member name="P:XCLNetTools.Entity.KeyValue.Value">
            <summary>
            值
            </summary>
        </member>
        <member name="T:XCLNetTools.Entity.StaticResourceConfig">
            <summary>
            静态文件配置
            </summary>
        </member>
        <member name="P:XCLNetTools.Entity.StaticResourceConfig.StaticResourceList">
            <summary>
            静态文件列表
            </summary>
        </member>
        <member name="M:XCLNetTools.Entity.StaticResourceConfig.DeepClone">
            <summary>
            深度克隆
            </summary>
        </member>
        <member name="T:XCLNetTools.Entity.StaticResource">
            <summary>
            静态资源model
            </summary>
        </member>
        <member name="P:XCLNetTools.Entity.StaticResource.Type">
            <summary>
            静态文件类型
            </summary>
        </member>
        <member name="P:XCLNetTools.Entity.StaticResource.Name">
            <summary>
            文件名
            </summary>
        </member>
        <member name="P:XCLNetTools.Entity.StaticResource.Src">
            <summary>
            路径
            </summary>
        </member>
        <member name="P:XCLNetTools.Entity.StaticResource.Version">
            <summary>
            版本号
            </summary>
        </member>
        <member name="P:XCLNetTools.Entity.StaticResource.Attr">
            <summary>
            自定义属性
            </summary>
        </member>
        <member name="M:XCLNetTools.Entity.StaticResource.ToString">
            <summary>
            转字符串
            </summary>
        </member>
        <member name="T:XCLNetTools.Entity.SubTime">
            <summary>
            时间差的类
            </summary>
        </member>
        <member name="P:XCLNetTools.Entity.SubTime.StartTime">
            <summary>
            开始时间
            </summary>
        </member>
        <member name="P:XCLNetTools.Entity.SubTime.EndTime">
            <summary>
            结束时间
            </summary>
        </member>
        <member name="P:XCLNetTools.Entity.SubTime.SumTime">
            <summary>
            时间差（小时）
            </summary>
        </member>
        <member name="T:XCLNetTools.Entity.TextValue">
            <summary>
            键值类
            </summary>
        </member>
        <member name="P:XCLNetTools.Entity.TextValue.Text">
            <summary>
            键
            </summary>
        </member>
        <member name="P:XCLNetTools.Entity.TextValue.Value">
            <summary>
            值
            </summary>
        </member>
        <member name="T:XCLNetTools.Office.ExcelHandler.DataToExcel">
            <summary>
            操作EXCEL导出数据报表的类
            </summary>
        </member>
        <member name="M:XCLNetTools.Office.ExcelHandler.DataToExcel.OutPutExcel(System.String[],System.Collections.Generic.List{XCLNetTools.Entity.Office.ExcelHandler.OutPutClass},System.Data.DataSet,System.String,System.String[])">
            <summary>
            数据导出excel
            </summary>
            <param name="tableName">【表名】（主要是便于在字段信息xml的list中查找到当前导出的信息字段对应关系）</param>
            <param name="outPutClass">导出字段对应关系list</param>
            <param name="ds">数据源</param>
            <param name="fileTitle">文件名</param>
            <param name="conTitle">文件内容第一行的名称</param>
        </member>
        <member name="M:XCLNetTools.Office.ExcelHandler.DataToExcel.OutPutExcel(XCLNetTools.Entity.Office.ExcelHandler.OutPutParamClass)">
            <summary>
            数据导出excel
            </summary>
            <param name="paramClass">导出参数</param>
        </member>
        <member name="T:XCLNetTools.Office.ExcelHandler.ExcelHelper">
            <summary>
            旧版的excel操作（基于excel.dll），建议不要使用此类（用aspose.cells）
            </summary>
        </member>
        <member name="P:XCLNetTools.Office.ExcelHandler.ExcelHelper.SheetPrefixName">
            <summary>
            WorkSheet前缀名，比如：前缀名为“页”，那么WorkSheet名称依次为“页-1，页-2...”
            </summary>
        </member>
        <member name="P:XCLNetTools.Office.ExcelHandler.ExcelHelper.WorkSheetCount">
            <summary>
            WorkSheet数量
            </summary>
        </member>
        <member name="P:XCLNetTools.Office.ExcelHandler.ExcelHelper.TempletFilePath">
            <summary>
            Excel模板文件路径
            </summary>
        </member>
        <member name="P:XCLNetTools.Office.ExcelHandler.ExcelHelper.OutputFilePath">
            <summary>
            输出Excel文件路径
            </summary>
        </member>
        <member name="M:XCLNetTools.Office.ExcelHandler.ExcelHelper.#ctor(System.String,System.String)">
            <summary>
            构造函数，将一个已有Excel工作簿作为模板，并指定输出路径
            </summary>
            <param name="templetFilePath">Excel模板文件路径</param>
            <param name="outputFilePath">输出Excel文件路径</param>
        </member>
        <member name="M:XCLNetTools.Office.ExcelHandler.ExcelHelper.#ctor(System.String)">
            <summary>
            构造函数，打开一个已有的工作簿
            </summary>
            <param name="fileName">Excel文件名</param>
        </member>
        <member name="M:XCLNetTools.Office.ExcelHandler.ExcelHelper.#ctor">
            <summary>
            构造函数，新建一个工作簿
            </summary>
        </member>
        <member name="M:XCLNetTools.Office.ExcelHandler.ExcelHelper.DataTableToExcel(System.Data.DataTable,System.Int32,System.Int32,System.Int32)">
            <summary>
            将DataTable数据写入Excel文件（自动分页）
            </summary>
            <param name="dt">DataTable</param>
            <param name="rows">每个WorkSheet写入多少行数据</param>
            <param name="top">表格数据起始行索引</param>
            <param name="left">表格数据起始列索引</param>
        </member>
        <member name="M:XCLNetTools.Office.ExcelHandler.ExcelHelper.DataTableToExcel(System.Data.DataTable,System.Int32,System.Int32)">
            <summary>
            将DataTable数据写入Excel文件（不分页）
            </summary>
            <param name="dt">DataTable</param>
            <param name="top">表格数据起始行索引</param>
            <param name="left">表格数据起始列索引</param>
        </member>
        <member name="M:XCLNetTools.Office.ExcelHandler.ExcelHelper.DataTableToExcel(System.Data.DataTable,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            将DataTable数据写入Excel文件（自动分页，并指定要合并的列索引）
            </summary>
            <param name="dt">DataTable</param>
            <param name="rows">每个WorkSheet写入多少行数据</param>
            <param name="top">表格数据起始行索引</param>
            <param name="left">表格数据起始列索引</param>
            <param name="mergeColumnIndex">DataTable中要合并相同行的列索引，从0开始</param>
        </member>
        <member name="M:XCLNetTools.Office.ExcelHandler.ExcelHelper.ArrayToExcel(System.String[0:,0:],System.Int32,System.Int32,System.Int32)">
            <summary>
            将二维数组数据写入Excel文件（自动分页）
            </summary>
            <param name="arr">二维数组</param>
            <param name="rows">每个WorkSheet写入多少行数据</param>
            <param name="top">行索引</param>
            <param name="left">列索引</param>
        </member>
        <member name="M:XCLNetTools.Office.ExcelHandler.ExcelHelper.ArrayToExcel(System.String[0:,0:],System.Int32,System.Int32)">
            <summary>
            将二维数组数据写入Excel文件（不分页）
            </summary>
            <param name="arr">二维数组</param>
            <param name="top">行索引</param>
            <param name="left">列索引</param>
        </member>
        <member name="M:XCLNetTools.Office.ExcelHandler.ExcelHelper.ArrayToExcel(System.String[0:,0:],System.Int32,System.Int32,System.Boolean)">
            <summary>
            将二维数组数据写入Excel文件（不分页）
            </summary>
            <param name="arr">二维数组</param>
            <param name="top">行索引</param>
            <param name="left">列索引</param>
            <param name="isFormula">填充的数据是否需要计算</param>
        </member>
        <member name="M:XCLNetTools.Office.ExcelHandler.ExcelHelper.ArrayToExcel(System.String[0:,0:],System.Int32,System.Int32,System.Boolean,System.Int32)">
            <summary>
            将二维数组数据写入Excel文件（不分页），合并指定列的相同行
            </summary>
            <param name="arr">二维数组</param>
            <param name="top">行索引</param>
            <param name="left">列索引</param>
            <param name="isFormula">填充的数据是否需要计算</param>
            <param name="mergeColumnIndex">需要合并行的列索引</param>
        </member>
        <member name="M:XCLNetTools.Office.ExcelHandler.ExcelHelper.ArrayToExcel(System.Int32,System.String[0:,0:],System.Int32,System.Int32)">
            <summary>
            将二维数组数据写入Excel文件（不分页）
            </summary>
            <param name="sheetIndex">工作表索引</param>
            <param name="arr">二维数组</param>
            <param name="top">行索引</param>
            <param name="left">列索引</param>
        </member>
        <member name="M:XCLNetTools.Office.ExcelHandler.ExcelHelper.ArrayToExcel(System.String[0:,0:],System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            将二维数组数据写入Excel文件（自动分页，并指定要合并的列索引）
            </summary>
            <param name="arr">二维数组</param>
            <param name="rows">每个WorkSheet写入多少行数据</param>
            <param name="top">行索引</param>
            <param name="left">列索引</param>
            <param name="mergeColumnIndex">数组的二维索引，相当于DataTable的列索引，索引从0开始</param>
        </member>
        <member name="M:XCLNetTools.Office.ExcelHandler.ExcelHelper.ChangeCurrentWorkSheet(System.Int32)">
            <summary>
            改变当前工作表
            </summary>
            <param name="sheetIndex">工作表索引</param>
        </member>
        <member name="M:XCLNetTools.Office.ExcelHandler.ExcelHelper.HiddenWorkSheet(System.String)">
            <summary>
            隐藏指定名称的工作表
            </summary>
            <param name="sheetName">工作表名称</param>
        </member>
        <member name="M:XCLNetTools.Office.ExcelHandler.ExcelHelper.HiddenWorkSheet(System.Int32)">
            <summary>
            隐藏指定索引的工作表
            </summary>
            <param name="sheetIndex"></param>
        </member>
        <member name="M:XCLNetTools.Office.ExcelHandler.ExcelHelper.CopyWorkSheets(System.String,System.Int32)">
            <summary>
            在指定名称的工作表后面拷贝指定个数的该工作表的副本，并重命名
            </summary>
            <param name="sheetName">工作表名称</param>
            <param name="sheetCount">工作表个数</param>
        </member>
        <member name="M:XCLNetTools.Office.ExcelHandler.ExcelHelper.CopyWorkSheet(System.Int32,System.Int32,System.String)">
            <summary>
            将一个工作表拷贝到另一个工作表后面，并重命名
            </summary>
            <param name="srcSheetIndex">拷贝源工作表索引</param>
            <param name="aimSheetIndex">参照位置工作表索引，新工作表拷贝在该工作表后面</param>
            <param name="newSheetName"></param>
        </member>
        <member name="M:XCLNetTools.Office.ExcelHandler.ExcelHelper.DeleteWorkSheet(System.String)">
            <summary>
            根据名称删除工作表
            </summary>
            <param name="sheetName"></param>
        </member>
        <member name="M:XCLNetTools.Office.ExcelHandler.ExcelHelper.DeleteWorkSheet(System.Int32)">
            <summary>
            根据索引删除工作表
            </summary>
            <param name="sheetIndex"></param>
        </member>
        <member name="M:XCLNetTools.Office.ExcelHandler.ExcelHelper.SetTextBox(System.String,System.String)">
            <summary>
            向指定文本框写入数据，对每个WorkSheet操作
            </summary>
            <param name="textboxName">文本框名称</param>
            <param name="text">要写入的文本</param>
        </member>
        <member name="M:XCLNetTools.Office.ExcelHandler.ExcelHelper.SetTextBox(System.Int32,System.String,System.String)">
            <summary>
            向指定文本框写入数据，对指定WorkSheet操作
            </summary>
            <param name="sheetIndex">工作表索引</param>
            <param name="textboxName">文本框名称</param>
            <param name="text">要写入的文本</param>
        </member>
        <member name="M:XCLNetTools.Office.ExcelHandler.ExcelHelper.SetTextBoxes(System.Collections.Hashtable)">
            <summary>
            向文本框写入数据，对每个WorkSheet操作
            </summary>
            <param name="ht">Hashtable的键值对保存文本框的ID和数据</param>
        </member>
        <member name="M:XCLNetTools.Office.ExcelHandler.ExcelHelper.SetTextBoxes(System.Int32,System.Collections.Hashtable)">
            <summary>
            向文本框写入数据，对指定WorkSheet操作
            </summary>
            <param name="ht">Hashtable的键值对保存文本框的ID和数据</param>
        </member>
        <member name="M:XCLNetTools.Office.ExcelHandler.ExcelHelper.SetCells(System.Int32,System.Int32,System.String)">
            <summary>
            向单元格写入数据，对当前WorkSheet操作
            </summary>
            <param name="rowIndex">行索引</param>
            <param name="columnIndex">列索引</param>
            <param name="text">要写入的文本值</param>
        </member>
        <member name="M:XCLNetTools.Office.ExcelHandler.ExcelHelper.SetCells(System.Int32,System.Int32,System.Int32,System.String)">
            <summary>
            向单元格写入数据，对指定WorkSheet操作
            </summary>
            <param name="sheetIndex">工作表索引</param>
            <param name="rowIndex">行索引</param>
            <param name="columnIndex">列索引</param>
            <param name="text">要写入的文本值</param>
        </member>
        <member name="M:XCLNetTools.Office.ExcelHandler.ExcelHelper.SetCells(System.Collections.Hashtable)">
            <summary>
            向单元格写入数据，对每个WorkSheet操作
            </summary>
            <param name="ht">Hashtable的键值对保存单元格的位置索引（行索引和列索引用“,”隔开）和数据</param>
        </member>
        <member name="M:XCLNetTools.Office.ExcelHandler.ExcelHelper.SetCells(System.Int32,System.Collections.Hashtable)">
            <summary>
            向单元格写入数据，对指定WorkSheet操作
            </summary>
            <param name="ht">Hashtable的键值对保存单元格的位置索引（行索引和列索引用“,”隔开）和数据</param>
        </member>
        <member name="M:XCLNetTools.Office.ExcelHandler.ExcelHelper.SetCells(System.Int32,System.String[])">
            <summary>
            设置单元格为可计算的
            </summary>
            <remarks>
            如果Excel的单元格格式设置为数字，日期或者其他类型时，需要设置这些单元格的FormulaR1C1属性，
            否则写到这些单元格的数据将不会按照预先设定的格式显示
            </remarks>
            <param name="arr">保存单元格的位置索引（行索引和列索引用“,”隔开）和数据</param>
        </member>
        <member name="M:XCLNetTools.Office.ExcelHandler.ExcelHelper.SetCells(System.String,System.Collections.Hashtable)">
            <summary>
            向单元格写入数据，对指定WorkSheet操作
            </summary>
            <param name="ht">Hashtable的键值对保存单元格的位置索引（行索引和列索引用“,”隔开）和数据</param>
        </member>
        <member name="M:XCLNetTools.Office.ExcelHandler.ExcelHelper.MergeCells(System.Int32,System.Int32,System.Int32,System.Int32,System.String)">
            <summary>
            合并单元格，并赋值，对每个WorkSheet操作
            </summary>
            <param name="beginRowIndex">开始行索引</param>
            <param name="beginColumnIndex">开始列索引</param>
            <param name="endRowIndex">结束行索引</param>
            <param name="endColumnIndex">结束列索引</param>
            <param name="text">合并后Range的值</param>
        </member>
        <member name="M:XCLNetTools.Office.ExcelHandler.ExcelHelper.MergeCells(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.String)">
            <summary>
            合并单元格，并赋值，对指定WorkSheet操作
            </summary>
            <param name="sheetIndex">WorkSheet索引</param>
            <param name="beginRowIndex">开始行索引</param>
            <param name="beginColumnIndex">开始列索引</param>
            <param name="endRowIndex">结束行索引</param>
            <param name="endColumnIndex">结束列索引</param>
            <param name="text">合并后Range的值</param>
        </member>
        <member name="M:XCLNetTools.Office.ExcelHandler.ExcelHelper.MergeRows(System.Int32,System.Int32,System.Int32)">
            <summary>
            将指定索引列的数据相同的行合并，对每个WorkSheet操作
            </summary>
            <param name="columnIndex">列索引</param>
            <param name="beginRowIndex">开始行索引</param>
            <param name="endRowIndex">结束行索引</param>
        </member>
        <member name="M:XCLNetTools.Office.ExcelHandler.ExcelHelper.MergeRows(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            将指定索引列的数据相同的行合并，对指定WorkSheet操作
            </summary>
            <param name="sheetIndex">WorkSheet索引</param>
            <param name="columnIndex">列索引</param>
            <param name="beginRowIndex">开始行索引</param>
            <param name="endRowIndex">结束行索引</param>
        </member>
        <member name="M:XCLNetTools.Office.ExcelHandler.ExcelHelper.InsertRows(System.Int32,System.Int32)">
            <summary>
            插行（在指定行上面插入指定数量行）
            </summary>
            <param name="rowIndex"></param>
            <param name="count"></param>
        </member>
        <member name="M:XCLNetTools.Office.ExcelHandler.ExcelHelper.InsertRows(System.Int32,System.Int32,System.Int32)">
            <summary>
            插行（在指定WorkSheet指定行上面插入指定数量行）
            </summary>
            <param name="sheetIndex"></param>
            <param name="rowIndex"></param>
            <param name="count"></param>
        </member>
        <member name="M:XCLNetTools.Office.ExcelHandler.ExcelHelper.CopyRows(System.Int32,System.Int32)">
            <summary>
            复制行（在指定行下面复制指定数量行）
            </summary>
            <param name="rowIndex"></param>
            <param name="count"></param>
        </member>
        <member name="M:XCLNetTools.Office.ExcelHandler.ExcelHelper.CopyRows(System.Int32,System.Int32,System.Int32)">
            <summary>
            复制行（在指定WorkSheet指定行下面复制指定数量行）
            </summary>
            <param name="sheetIndex"></param>
            <param name="rowIndex"></param>
            <param name="count"></param>
        </member>
        <member name="M:XCLNetTools.Office.ExcelHandler.ExcelHelper.DeleteRows(System.Int32,System.Int32)">
            <summary>
            删除行
            </summary>
            <param name="rowIndex"></param>
            <param name="count"></param>
        </member>
        <member name="M:XCLNetTools.Office.ExcelHandler.ExcelHelper.DeleteRows(System.Int32,System.Int32,System.Int32)">
            <summary>
            删除行
            </summary>
            <param name="sheetIndex"></param>
            <param name="rowIndex"></param>
            <param name="count"></param>
        </member>
        <member name="M:XCLNetTools.Office.ExcelHandler.ExcelHelper.InsertColumns(System.Int32,System.Int32)">
            <summary>
            插列（在指定列右边插入指定数量列）
            </summary>
            <param name="columnIndex"></param>
            <param name="count"></param>
        </member>
        <member name="M:XCLNetTools.Office.ExcelHandler.ExcelHelper.InsertColumns(System.Int32,System.Int32,System.Int32)">
            <summary>
            插列（在指定WorkSheet指定列右边插入指定数量列）
            </summary>
            <param name="sheetIndex"></param>
            <param name="columnIndex"></param>
            <param name="count"></param>
        </member>
        <member name="M:XCLNetTools.Office.ExcelHandler.ExcelHelper.CopyColumns(System.Int32,System.Int32)">
            <summary>
            复制列（在指定列右边复制指定数量列）
            </summary>
            <param name="columnIndex"></param>
            <param name="count"></param>
        </member>
        <member name="M:XCLNetTools.Office.ExcelHandler.ExcelHelper.CopyColumns(System.Int32,System.Int32,System.Int32)">
            <summary>
            复制列（在指定WorkSheet指定列右边复制指定数量列）
            </summary>
            <param name="sheetIndex"></param>
            <param name="columnIndex"></param>
            <param name="count"></param>
        </member>
        <member name="M:XCLNetTools.Office.ExcelHandler.ExcelHelper.DeleteColumns(System.Int32,System.Int32)">
            <summary>
            删除列
            </summary>
            <param name="columnIndex"></param>
            <param name="count"></param>
        </member>
        <member name="M:XCLNetTools.Office.ExcelHandler.ExcelHelper.DeleteColumns(System.Int32,System.Int32,System.Int32)">
            <summary>
            删除列
            </summary>
            <param name="sheetIndex"></param>
            <param name="columnIndex"></param>
            <param name="count"></param>
        </member>
        <member name="M:XCLNetTools.Office.ExcelHandler.ExcelHelper.RangeCopy(System.Int32,System.String,System.String,System.String)">
            <summary>
            将指定范围区域拷贝到目标区域
            </summary>
            <param name="sheetIndex">WorkSheet索引</param>
            <param name="startCell">要拷贝区域的开始Cell位置（比如：A10）</param>
            <param name="endCell">要拷贝区域的结束Cell位置（比如：F20）</param>
            <param name="targetCell">目标区域的开始Cell位置（比如：H10）</param>
        </member>
        <member name="M:XCLNetTools.Office.ExcelHandler.ExcelHelper.RangeCopy(System.String,System.String,System.String,System.String)">
            <summary>
            将指定范围区域拷贝到目标区域
            </summary>
            <param name="sheetName">WorkSheet名称</param>
            <param name="startCell">要拷贝区域的开始Cell位置（比如：A10）</param>
            <param name="endCell">要拷贝区域的结束Cell位置（比如：F20）</param>
            <param name="targetCell">目标区域的开始Cell位置（比如：H10）</param>
        </member>
        <member name="M:XCLNetTools.Office.ExcelHandler.ExcelHelper.RangAutoFill">
            <summary>
            自动填充
            </summary>
        </member>
        <member name="M:XCLNetTools.Office.ExcelHandler.ExcelHelper.ApplyStyle">
            <summary>
            应用样式
            </summary>
        </member>
        <member name="M:XCLNetTools.Office.ExcelHandler.ExcelHelper.LetterToInt(System.String)">
            <summary>
            将Excel列的字母索引值转换成整数索引值
            </summary>
            <param name="letter"></param>
            <returns></returns>
        </member>
        <member name="M:XCLNetTools.Office.ExcelHandler.ExcelHelper.IntToLetter(System.Int32)">
            <summary>
            将Excel列的整数索引值转换为字符索引值
            </summary>
            <param name="n"></param>
            <returns></returns>
        </member>
        <member name="M:XCLNetTools.Office.ExcelHandler.ExcelHelper.OutputExcelFile">
            <summary>
            输出Excel文件并退出
            </summary>
        </member>
        <member name="M:XCLNetTools.Office.ExcelHandler.ExcelHelper.OutputFile(System.String)">
            <summary>
            输出指定格式的文件（支持格式：HTML，CSV，TEXT，EXCEL）
            </summary>
            <param name="format">HTML，CSV，TEXT，EXCEL，XML</param>
        </member>
        <member name="M:XCLNetTools.Office.ExcelHandler.ExcelHelper.SaveFile">
            <summary>
            保存文件
            </summary>
        </member>
        <member name="M:XCLNetTools.Office.ExcelHandler.ExcelHelper.SaveAsFile">
            <summary>
            另存文件
            </summary>
        </member>
        <member name="M:XCLNetTools.Office.ExcelHandler.ExcelHelper.SaveAsFile(System.String)">
            <summary>
            将Excel文件另存为指定格式
            </summary>
            <param name="format">HTML，CSV，TEXT，EXCEL，XML</param>
        </member>
        <member name="M:XCLNetTools.Office.ExcelHandler.ExcelHelper.SaveFile(System.String)">
            <summary>
            另存文件
            </summary>
            <param name="fileName">文件名</param>
        </member>
        <member name="M:XCLNetTools.Office.ExcelHandler.ExcelHelper.SaveAsFile(System.String,System.String)">
            <summary>
            将Excel文件另存为指定格式
            </summary>
            <param name="fileName">文件名</param>
            <param name="format">HTML，CSV，TEXT，EXCEL，XML</param>
        </member>
        <member name="M:XCLNetTools.Office.ExcelHandler.ExcelHelper.MergeCells(Excel.Worksheet,System.Int32,System.Int32,System.Int32,System.Int32,System.String)">
            <summary>
            合并单元格，并赋值，对指定WorkSheet操作
            </summary>
            <param name="beginRowIndex">开始行索引</param>
            <param name="beginColumnIndex">开始列索引</param>
            <param name="endRowIndex">结束行索引</param>
            <param name="endColumnIndex">结束列索引</param>
            <param name="text">合并后Range的值</param>
        </member>
        <member name="M:XCLNetTools.Office.ExcelHandler.ExcelHelper.MergeRows(Excel.Worksheet,System.Int32,System.Int32,System.Int32)">
            <summary>
            将指定索引列的数据相同的行合并，对指定WorkSheet操作
            </summary>
            <param name="columnIndex">要合并的列索引</param>
            <param name="beginRowIndex">合并开始行索引</param>
            <param name="rows">要合并的行数</param>
        </member>
        <member name="M:XCLNetTools.Office.ExcelHandler.ExcelHelper.GetSheetCount(System.Int32,System.Int32)">
            <summary>
            计算WorkSheet数量
            </summary>
            <param name="rowCount">记录总行数</param>
            <param name="rows">每WorkSheet行数</param>
        </member>
        <member name="M:XCLNetTools.Office.ExcelHandler.ExcelHelper.KillExcelProcess">
            <summary>
            结束Excel进程
            </summary>
        </member>
        <member name="T:XCLNetTools.Office.ExcelHandler.ExcelToData">
            <summary>
            excel读取类
            </summary>
        </member>
        <member name="M:XCLNetTools.Office.ExcelHandler.ExcelToData.ReadExcelToTable(System.String)">
            <summary>
            单个工作薄读入（第一个可见的sheet）
            <param name="excelfilePath">文件路径</param>
            <returns>DataTable</returns>
            </summary>
        </member>
        <member name="M:XCLNetTools.Office.ExcelHandler.ExcelToData.ReadExcelToDataSet(System.String)">
            <summary>
            将多个工作薄导入到DS中（所有可见的sheet）
            <param name="excelfilePath">文件路径</param>
            <returns>DataSet</returns>
            </summary>
        </member>
        <member name="T:XCLNetTools.Encode.Base64">
            <summary>
            base64相关
            </summary>
        </member>
        <member name="M:XCLNetTools.Encode.Base64.Base64Code(System.String)">
            <summary>
            Base64加密
            </summary>
            <param name="msg">要加密的内容</param>
            <returns>加密后的值</returns>
        </member>
        <member name="M:XCLNetTools.Encode.Base64.Base64Decode(System.String)">
            <summary>
            Base64解密
            </summary>
            <param name="msg">要解密的内容</param>
            <returns>解密后的值</returns>
        </member>
        <member name="T:XCLNetTools.Encode.Lib">
            <summary>
            其它相关
            </summary>
        </member>
        <member name="M:XCLNetTools.Encode.Lib.Unescape(System.String)">
            <summary>
            对字符串进行js的unescape解码
            </summary>
            <param name="str">待解码的字符串</param>
            <returns>解码后的值</returns>
        </member>
        <member name="M:XCLNetTools.Encode.Lib.Escape(System.String)">
            <summary>
            对字符串进行js的escape编码
            </summary>
            <param name="str">待编码的字符串</param>
            <returns>编码后的值</returns>
        </member>
        <member name="T:XCLNetTools.Encode.Hex">
            <summary>
            十六进制处理
            </summary>
        </member>
        <member name="M:XCLNetTools.Encode.Hex.StringToByteArray(System.String)">
            <summary>
            16进制字符串转为byte[]
            </summary>
            <param name="hex">16进制字符串</param>
            <returns>byte[]</returns>
        </member>
        <member name="M:XCLNetTools.Encode.Hex.ToHexString(System.String)">
            <summary>
            为字符串中的非英文字符编码
            </summary>
            <returns>处理后的值</returns>
        </member>
        <member name="M:XCLNetTools.Encode.Hex.NeedToEncode(System.Char)">
             <summary>
            指定 一个字符是否应该被编码
             </summary>
             <returns>true:可以被编码，false:无需编码</returns>
        </member>
        <member name="M:XCLNetTools.Encode.Hex.ToHexString(System.Char)">
            <summary>
            为非英文字符编码
            </summary>
            <returns>编码后的值</returns>
        </member>
        <member name="M:XCLNetTools.Encode.Hex.GetOrSetBlockFromHex(System.Int32,System.Int32,System.Nullable{System.Int32})">
            <summary>
            获取或更新16进制中的第几块区域中的值。比如：0xABC中，第一块为C，第二块为B，...
            </summary>
            <param name="blockIndex">序号</param>
            <param name="source">被操作的数据</param>
            <param name="newBlockValue">新值</param>
            <returns>如果是获取，则返回获取到的值；如果是更新，则返回新的source值</returns>
        </member>
        <member name="T:XCLNetTools.Encode.Unicode">
            <summary>
            Unicode相关
            </summary>
        </member>
        <member name="M:XCLNetTools.Encode.Unicode.UnicodeDecode(System.String)">
            <summary>
            Unicode解码
            </summary>
            <param name="s">待解码的字符串</param>
            <returns>解码后的值</returns>
        </member>
        <member name="M:XCLNetTools.Encode.Unicode.UnicodeEncode(System.String)">
            <summary>
            Unicode编码
            </summary>
            <param name="s">待编码的字符串</param>
            <returns>编码后的值</returns>
        </member>
        <member name="T:XCLNetTools.Encrypt.MD5">
            <summary>
            md5相关
            </summary>
        </member>
        <member name="M:XCLNetTools.Encrypt.MD5.EncodeMD5(System.String,System.String)">
            <summary>
            MD5加密（大写）
            <param name="str">待加密字符串</param>
            <param name="key">是否在待加密的字符串中末尾追加该key，从而生成md5</param>
            <returns>加密后的字符串（大写）</returns>
            </summary>
        </member>
        <member name="M:XCLNetTools.Encrypt.MD5.IsEqualMD5(System.String,System.String,System.String)">
            <summary>
            判断明文与密文是否匹配
            如果指定了key，则将明文与key组成的字符串的md5与md5Str进行比较
            </summary>
            <param name="str">明文</param>
            <param name="md5Str">md5密文</param>
            <param name="key">key</param>
            <returns>是否匹配</returns>
        </member>
        <member name="M:XCLNetTools.Encrypt.MD5.Is32MD5(System.String)">
            <summary>
            判断字符串是否为32位md5（不区分大小写）
            </summary>
        </member>
        <member name="T:XCLNetTools.Encrypt.AESEncrypt">
            <summary>
            AES加密解密类
            </summary>
        </member>
        <member name="P:XCLNetTools.Encrypt.AESEncrypt.ContainKey">
            <summary>
            True：密文中包含密钥
            False：密文中不包含密钥
            </summary>
        </member>
        <member name="M:XCLNetTools.Encrypt.AESEncrypt.#ctor">
            <summary>
            构造方法
            </summary>
        </member>
        <member name="M:XCLNetTools.Encrypt.AESEncrypt.#ctor(System.Boolean)">
            <summary>
            构造方法
            </summary>
            <param name="containKey">密文中是否包含密钥</param>
        </member>
        <member name="M:XCLNetTools.Encrypt.AESEncrypt.Encrypt(System.String,System.String)">
            <summary>
            指定密钥对明文进行AES加密
            </summary>
            <param name="s_crypto">明文</param>
            <param name="s_key">加密密钥</param>
            <returns>密文</returns>
        </member>
        <member name="M:XCLNetTools.Encrypt.AESEncrypt.Encrypt(System.String)">
            <summary>
            动态生成密钥，并对明文进行AES加密
            </summary>
            <param name="s_crypto">明文</param>
            <returns>密文</returns>
        </member>
        <member name="M:XCLNetTools.Encrypt.AESEncrypt.Decrypt(System.String)">
            <summary>
            从密文中解析出密钥，并对密文进行解密
            </summary>
            <param name="s_encrypted">密文</param>
            <returns>明文</returns>
        </member>
        <member name="M:XCLNetTools.Encrypt.AESEncrypt.Decrypt(System.String,System.String)">
            <summary>
            指定密钥，并对密文进行解密
            </summary>
            <param name="s_encrypted">密文</param>
            <param name="s_key">密钥</param>
            <returns>明文</returns>
        </member>
        <member name="M:XCLNetTools.Encrypt.AESEncrypt.Encrypt(System.String,System.Byte[],System.Byte[])">
            <summary>
            加密
            </summary>
        </member>
        <member name="M:XCLNetTools.Encrypt.AESEncrypt.Decrypt(System.String,System.Byte[],System.Byte[])">
            <summary>
            解密
            </summary>
        </member>
        <member name="M:XCLNetTools.Encrypt.AESEncrypt.byte2HexString(System.Byte[])">
            <summary>
            byte转16进制
            </summary>
            <param name="bytes">byte数组</param>
            <returns>16进制</returns>
        </member>
        <member name="M:XCLNetTools.Encrypt.AESEncrypt.hexString2Byte(System.String)">
            <summary>
            16进制转byte
            </summary>
            <param name="hex">16进制</param>
            <returns>byte数组</returns>
        </member>
        <member name="M:XCLNetTools.Encrypt.AESEncrypt.string2Byte(System.String)">
            <summary>
            字符串转byte
            </summary>
            <param name="str">字符串</param>
            <returns>byte数组</returns>
        </member>
        <member name="M:XCLNetTools.Encrypt.AESEncrypt.byte2String(System.Byte[])">
            <summary>
            byte转字符串
            </summary>
            <param name="bytes">byte数组</param>
            <returns>字符串</returns>
        </member>
        <member name="T:XCLNetTools.Encrypt.DESEncrypt">
            <summary>
            DES加密/解密类。
            </summary>
        </member>
        <member name="M:XCLNetTools.Encrypt.DESEncrypt.Encrypt(System.String,System.String)">
            <summary>
            加密数据
            </summary>
            <param name="text">待加密的数据</param>
            <param name="sKey">key</param>
            <returns>密文</returns>
        </member>
        <member name="M:XCLNetTools.Encrypt.DESEncrypt.Decrypt(System.String,System.String)">
            <summary>
            解密数据
            </summary>
            <param name="text">待解密的数据</param>
            <param name="sKey">key</param>
            <returns>明文</returns>
        </member>
        <member name="T:XCLNetTools.Encrypt.HashEncode">
            <summary>
            得到随机安全码（哈希加密）。
            </summary>
        </member>
        <member name="M:XCLNetTools.Encrypt.HashEncode.GetSecurity">
            <summary>
            得到随机哈希加密字符串
            </summary>
            <returns>密文</returns>
        </member>
        <member name="M:XCLNetTools.Encrypt.HashEncode.HashEncoding(System.String)">
            <summary>
            哈希加密一个字符串
            </summary>
            <param name="security">待加密的数据</param>
            <returns>密文</returns>
        </member>
        <member name="T:XCLNetTools.Encrypt.RSACryption">
            <summary>
            RSA加密解密及RSA签名和验证
            </summary>
        </member>
        <member name="M:XCLNetTools.Encrypt.RSACryption.RSAKey(System.String@,System.String@)">
            <summary>
            RSA 的密钥产生 产生私钥 和公钥
            </summary>
        </member>
        <member name="M:XCLNetTools.Encrypt.RSACryption.RSAEncrypt(System.String,System.String)">
            		    RSA 方式加密
            		    说明KEY必须是XML的行式,返回的是字符串
            		    在有一点需要说明！！该加密方式有 长度 限制的！！
            <summary>
            RSA的加密函数 string
            </summary>
        </member>
        <member name="M:XCLNetTools.Encrypt.RSACryption.RSAEncrypt(System.String,System.Byte[])">
            <summary>
            RSA的加密函数 byte[]
            </summary>
        </member>
        <member name="M:XCLNetTools.Encrypt.RSACryption.RSADecrypt(System.String,System.String)">
            <summary>
            RSA的解密函数  string
            </summary>
        </member>
        <member name="M:XCLNetTools.Encrypt.RSACryption.RSADecrypt(System.String,System.Byte[])">
            <summary>
            RSA的解密函数  byte
            </summary>
        </member>
        <member name="M:XCLNetTools.Encrypt.RSACryption.GetHash(System.String,System.Byte[]@)">
            <summary>
            获取Hash描述表
            </summary>
        </member>
        <member name="M:XCLNetTools.Encrypt.RSACryption.GetHash(System.String,System.String@)">
            <summary>
            获取Hash描述表
            </summary>
        </member>
        <member name="M:XCLNetTools.Encrypt.RSACryption.GetHash(System.IO.FileStream,System.Byte[]@)">
            <summary>
            获取Hash描述表
            </summary>
        </member>
        <member name="M:XCLNetTools.Encrypt.RSACryption.GetHash(System.IO.FileStream,System.String@)">
            <summary>
            获取Hash描述表
            </summary>
        </member>
        <member name="M:XCLNetTools.Encrypt.RSACryption.SignatureFormatter(System.String,System.Byte[],System.Byte[]@)">
            <summary>
            RSA签名
            </summary>
        </member>
        <member name="M:XCLNetTools.Encrypt.RSACryption.SignatureFormatter(System.String,System.Byte[],System.String@)">
            <summary>
            RSA签名
            </summary>
        </member>
        <member name="M:XCLNetTools.Encrypt.RSACryption.SignatureFormatter(System.String,System.String,System.Byte[]@)">
            <summary>
            RSA签名
            </summary>
        </member>
        <member name="M:XCLNetTools.Encrypt.RSACryption.SignatureFormatter(System.String,System.String,System.String@)">
            <summary>
            RSA签名
            </summary>
        </member>
        <member name="M:XCLNetTools.Encrypt.RSACryption.SignatureDeformatter(System.String,System.Byte[],System.Byte[])">
            <summary>
            RSA 签名验证
            </summary>
        </member>
        <member name="M:XCLNetTools.Encrypt.RSACryption.SignatureDeformatter(System.String,System.String,System.Byte[])">
            <summary>
            RSA 签名验证
            </summary>
        </member>
        <member name="T:XCLNetTools.Enum.CommonEnum">
            <summary>
            常用枚举常量
            </summary>
        </member>
        <member name="T:XCLNetTools.Enum.CommonEnum.是否">
            <summary>
            是否
            </summary>
        </member>
        <member name="F:XCLNetTools.Enum.CommonEnum.是否.是">
            <summary>
            是
            </summary>
        </member>
        <member name="F:XCLNetTools.Enum.CommonEnum.是否.否">
            <summary>
            否
            </summary>
        </member>
        <member name="T:XCLNetTools.Enum.CommonEnum.Weeks">
            <summary>
            周枚举
            </summary>
        </member>
        <member name="F:XCLNetTools.Enum.CommonEnum.Weeks.周一">
            <summary>
            周一
            </summary>
        </member>
        <member name="F:XCLNetTools.Enum.CommonEnum.Weeks.周二">
            <summary>
            周二
            </summary>
        </member>
        <member name="F:XCLNetTools.Enum.CommonEnum.Weeks.周三">
            <summary>
            周三
            </summary>
        </member>
        <member name="F:XCLNetTools.Enum.CommonEnum.Weeks.周四">
            <summary>
            周四
            </summary>
        </member>
        <member name="F:XCLNetTools.Enum.CommonEnum.Weeks.周五">
            <summary>
            周五
            </summary>
        </member>
        <member name="F:XCLNetTools.Enum.CommonEnum.Weeks.周六">
            <summary>
            周六
            </summary>
        </member>
        <member name="F:XCLNetTools.Enum.CommonEnum.Weeks.周日">
            <summary>
            周日
            </summary>
        </member>
        <member name="T:XCLNetTools.Enum.CommonEnum.BeforeDateTypeEnum">
            <summary>
            以前的时间类别
            </summary>
        </member>
        <member name="F:XCLNetTools.Enum.CommonEnum.BeforeDateTypeEnum.SevenDay">
            <summary>
            七天前
            </summary>
        </member>
        <member name="F:XCLNetTools.Enum.CommonEnum.BeforeDateTypeEnum.OneMonth">
            <summary>
            一个月前
            </summary>
        </member>
        <member name="F:XCLNetTools.Enum.CommonEnum.BeforeDateTypeEnum.ThreeMonth">
            <summary>
            三个月前
            </summary>
        </member>
        <member name="F:XCLNetTools.Enum.CommonEnum.BeforeDateTypeEnum.HalfYear">
            <summary>
            半年前
            </summary>
        </member>
        <member name="F:XCLNetTools.Enum.CommonEnum.BeforeDateTypeEnum.OneYear">
            <summary>
            一年前
            </summary>
        </member>
        <member name="F:XCLNetTools.Enum.CommonEnum.BeforeDateTypeEnum.All">
            <summary>
            全部
            </summary>
        </member>
        <member name="T:XCLNetTools.Enum.CommonEnum.DiffResultFormat">
            <summary>
            关于返回值形式的枚举
            </summary>
        </member>
        <member name="F:XCLNetTools.Enum.CommonEnum.DiffResultFormat.yymm">
            <summary>
            年数和月数
            </summary>
        </member>
        <member name="F:XCLNetTools.Enum.CommonEnum.DiffResultFormat.yy">
            <summary>
            年数
            </summary>
        </member>
        <member name="F:XCLNetTools.Enum.CommonEnum.DiffResultFormat.mm">
            <summary>
            月数
            </summary>
        </member>
        <member name="F:XCLNetTools.Enum.CommonEnum.DiffResultFormat.dd">
            <summary>
            天数
            </summary>
        </member>
        <member name="T:XCLNetTools.Enum.CommonEnum.ThumbImageModeEnum">
            <summary>
            图片指定宽高生成缩略图的模式 枚举
            </summary>
        </member>
        <member name="F:XCLNetTools.Enum.CommonEnum.ThumbImageModeEnum.WH">
            <summary>
            指定宽高缩放（可能变形）
            </summary>
        </member>
        <member name="F:XCLNetTools.Enum.CommonEnum.ThumbImageModeEnum.W">
            <summary>
            指定宽，高按比例
            </summary>
        </member>
        <member name="F:XCLNetTools.Enum.CommonEnum.ThumbImageModeEnum.H">
            <summary>
            指定高，宽按比例
            </summary>
        </member>
        <member name="F:XCLNetTools.Enum.CommonEnum.ThumbImageModeEnum.EqualRatioWH">
            <summary>
            指定宽高裁减（不变形）
            </summary>
        </member>
        <member name="T:XCLNetTools.Enum.CommonEnum.FileExtInfoEnum">
            <summary>
            文件扩展名枚举
            </summary>
        </member>
        <member name="F:XCLNetTools.Enum.CommonEnum.FileExtInfoEnum.Txt">
            <summary>
            文本文件
            </summary>
        </member>
        <member name="F:XCLNetTools.Enum.CommonEnum.FileExtInfoEnum.Office">
            <summary>
            office文件
            </summary>
        </member>
        <member name="F:XCLNetTools.Enum.CommonEnum.FileExtInfoEnum.Pdf">
            <summary>
            pdf文件
            </summary>
        </member>
        <member name="F:XCLNetTools.Enum.CommonEnum.FileExtInfoEnum.Compress">
            <summary>
            压缩包文件
            </summary>
        </member>
        <member name="F:XCLNetTools.Enum.CommonEnum.FileExtInfoEnum.Image">
            <summary>
            图片文件
            </summary>
        </member>
        <member name="F:XCLNetTools.Enum.CommonEnum.FileExtInfoEnum.Music">
            <summary>
            音乐文件
            </summary>
        </member>
        <member name="F:XCLNetTools.Enum.CommonEnum.FileExtInfoEnum.Video">
            <summary>
            视频文件
            </summary>
        </member>
        <member name="T:XCLNetTools.Enum.CommonEnum.StaticResourceTypeEnum">
            <summary>
            静态资源类型
            </summary>
        </member>
        <member name="F:XCLNetTools.Enum.CommonEnum.StaticResourceTypeEnum.JS">
            <summary>
            js文件
            </summary>
        </member>
        <member name="F:XCLNetTools.Enum.CommonEnum.StaticResourceTypeEnum.CSS">
            <summary>
            css文件
            </summary>
        </member>
        <member name="F:XCLNetTools.Enum.CommonEnum.StaticResourceTypeEnum.ICON">
            <summary>
            icon
            </summary>
        </member>
        <member name="T:XCLNetTools.Enum.CommonEnum.RedirectTargetEnum">
            <summary>
            XCLNetTools.Message.MessageModel 跳转方式
            </summary>
        </member>
        <member name="F:XCLNetTools.Enum.CommonEnum.RedirectTargetEnum.None">
            <summary>
            在当前页打开
            </summary>
        </member>
        <member name="F:XCLNetTools.Enum.CommonEnum.RedirectTargetEnum.NewBlank">
            <summary>
            新窗口打开
            </summary>
        </member>
        <member name="T:XCLNetTools.Enum.CommonEnum.SelectOptionFieldEnum">
            <summary>
            select options 字段类型枚举
            </summary>
        </member>
        <member name="F:XCLNetTools.Enum.CommonEnum.SelectOptionFieldEnum.None">
            <summary>
            未指定
            </summary>
        </member>
        <member name="F:XCLNetTools.Enum.CommonEnum.SelectOptionFieldEnum.Text">
            <summary>
            文本
            </summary>
        </member>
        <member name="F:XCLNetTools.Enum.CommonEnum.SelectOptionFieldEnum.Value">
            <summary>
            value值
            </summary>
        </member>
        <member name="F:XCLNetTools.Enum.CommonEnum.SelectOptionFieldEnum.Description">
            <summary>
            描述
            </summary>
        </member>
        <member name="T:XCLNetTools.Enum.CommonEnum.DatabaseTypeEnum">
            <summary>
            数据库类型枚举
            </summary>
        </member>
        <member name="F:XCLNetTools.Enum.CommonEnum.DatabaseTypeEnum.MSSQL">
            <summary>
            sql server
            </summary>
        </member>
        <member name="T:XCLNetTools.Enum.CommonEnum.LoginTypeEnum">
            <summary>
            登录退出类型枚举
            </summary>
        </member>
        <member name="F:XCLNetTools.Enum.CommonEnum.LoginTypeEnum.ON">
            <summary>
            登录
            </summary>
        </member>
        <member name="F:XCLNetTools.Enum.CommonEnum.LoginTypeEnum.OFF">
            <summary>
            退出
            </summary>
        </member>
        <member name="T:XCLNetTools.Enum.CommonEnum.SysEnvironmentEnum">
            <summary>
            系统所属环境枚举
            </summary>
        </member>
        <member name="F:XCLNetTools.Enum.CommonEnum.SysEnvironmentEnum.DEV">
            <summary>
            开发环境
            </summary>
        </member>
        <member name="F:XCLNetTools.Enum.CommonEnum.SysEnvironmentEnum.FAT">
            <summary>
            测试环境
            </summary>
        </member>
        <member name="F:XCLNetTools.Enum.CommonEnum.SysEnvironmentEnum.UAT">
            <summary>
            UAT环境
            </summary>
        </member>
        <member name="F:XCLNetTools.Enum.CommonEnum.SysEnvironmentEnum.PRD">
            <summary>
            生产环境
            </summary>
        </member>
        <member name="T:XCLNetTools.Enum.CommonEnum.HandleTypeEnum">
            <summary>
            页面操作类型枚举
            </summary>
        </member>
        <member name="F:XCLNetTools.Enum.CommonEnum.HandleTypeEnum.ADD">
            <summary>
            添加
            </summary>
        </member>
        <member name="F:XCLNetTools.Enum.CommonEnum.HandleTypeEnum.DEL">
            <summary>
            删除
            </summary>
        </member>
        <member name="F:XCLNetTools.Enum.CommonEnum.HandleTypeEnum.UPDATE">
            <summary>
            更新
            </summary>
        </member>
        <member name="F:XCLNetTools.Enum.CommonEnum.HandleTypeEnum.INPUT">
            <summary>
            导入
            </summary>
        </member>
        <member name="F:XCLNetTools.Enum.CommonEnum.HandleTypeEnum.OUTPUT">
            <summary>
            导出
            </summary>
        </member>
        <member name="F:XCLNetTools.Enum.CommonEnum.HandleTypeEnum.OTHER">
            <summary>
            其它
            </summary>
        </member>
        <member name="T:XCLNetTools.Enum.CommonEnum.HttpTypeEnum">
            <summary>
            http类型枚举
            </summary>
        </member>
        <member name="F:XCLNetTools.Enum.CommonEnum.HttpTypeEnum.Http">
            <summary>
            http
            </summary>
        </member>
        <member name="F:XCLNetTools.Enum.CommonEnum.HttpTypeEnum.Https">
            <summary>
            https
            </summary>
        </member>
        <member name="T:XCLNetTools.Enum.EnumHelper">
            <summary>
            枚举帮助类
            </summary>
        </member>
        <member name="M:XCLNetTools.Enum.EnumHelper.GetEnumFieldModelList(System.Type)">
            <summary>
            将枚举转为List(包含自定义属性description)（value为int型的string）
            已按枚举的value升序排列
            </summary>
            <param name="emType">枚举type</param>
            <returns>枚举的List</returns>
        </member>
        <member name="M:XCLNetTools.Enum.EnumHelper.GetEnumFieldTModelList``1(System.Type)">
            <summary>
            将枚举转为List(包含自定义属性description)
            已按枚举的value升序排列
            </summary>
            <param name="emType">枚举type</param>
            <typeparam name="T">枚举value的类型（（可为byte、sbyte、short、ushort、int、uint、long 或 ulong。））</typeparam>
            <returns>枚举的List</returns>
        </member>
        <member name="M:XCLNetTools.Enum.EnumHelper.GetEnumDesc``1(``0)">
            <summary>
            获取枚举的description注解
            </summary>
            <returns>枚举的描述</returns>
        </member>
        <member name="M:XCLNetTools.Enum.EnumHelper.GetEnumDescriptionByText(System.Type,System.String)">
            <summary>
            根据枚举text,获取枚举description
            </summary>
            <returns>枚举的描述</returns>
        </member>
        <member name="M:XCLNetTools.Enum.EnumHelper.GetList(System.Type)">
            <summary>
            将枚举转为list的形式
            </summary>
            <param name="type">枚举的typeof</param>
            <returns>枚举的list形式</returns>
        </member>
        <member name="M:XCLNetTools.Enum.EnumHelper.IsExistEnumValue(System.Int32,System.Type)">
            <summary>
            判断数字是否属于该枚举
            </summary>
            <param name="v">枚举的value，就是数字</param>
            <param name="type">枚举的typeof</param>
            <returns>true:v属于该枚举，反之则不属于</returns>
        </member>
        <member name="M:XCLNetTools.Enum.EnumHelper.GetValueByText(System.Collections.Generic.List{XCLNetTools.Entity.TextValue},System.String)">
            <summary>
            根据名获取值（若未找到，则返回-1）
            </summary>
            <param name="lst">枚举的list形式</param>
            <param name="text">枚举项的名称</param>
            <returns>该枚举的值</returns>
        </member>
        <member name="M:XCLNetTools.Enum.EnumHelper.GetBitORValue``1(System.Collections.Generic.List{``0})">
            <summary>
            将多个枚举项进行（按位或）操作，返回int型，若失败，则返回null
            </summary>
            <returns>结果值</returns>
        </member>
        <member name="M:XCLNetTools.Enum.EnumHelper.GetEnumListByBitValue``1(System.Int32)">
            <summary>
            根据多个枚举项（按位或）之后的int值，返回枚举list
            </summary>
            <returns>枚举list</returns>
        </member>
        <member name="M:XCLNetTools.Enum.EnumHelper.GetEnumSumValue(System.Type)">
            <summary>
            将指定枚举的值求和
            </summary>
            <returns>求和后的结果值</returns>
        </member>
        <member name="M:XCLNetTools.Enum.EnumHelper.GetMinValue(System.Type)">
            <summary>
            获取枚举的最小值
            </summary>
            <param name="em">指定枚举</param>
            <returns>枚举项中的最小值</returns>
        </member>
        <member name="M:XCLNetTools.Enum.EnumHelper.GetMaxValue(System.Type)">
            <summary>
            获取枚举的最大值
            </summary>
            <param name="em">指定枚举</param>
            <returns>枚举项中的最大值</returns>
        </member>
        <member name="M:XCLNetTools.Enum.EnumHelper.IsInRange(System.Type,System.Int64)">
            <summary>
            判断指定值是否超出指定枚举的值范围
            </summary>
            <param name="em">枚举</param>
            <param name="val">要判断的值</param>
            <returns>true：在范围内；false：已超出范围</returns>
        </member>
        <member name="M:XCLNetTools.Enum.EnumHelper.GetEnumJson(System.Type)">
            <summary>
            将指定class中的所有枚举转为json字符串
            示例：public class Test{public enum EE{a,b,c}}  ====》  {"EE":{"a":"","b":"","c":""}}
            </summary>
        </member>
        <member name="T:XCLNetTools.FileHandler.Bookmark">
            <summary>
            浏览器书签文件操作类
            </summary>
        </member>
        <member name="M:XCLNetTools.FileHandler.Bookmark.GetBookmark(System.String)">
            <summary>
            根据浏览器书签文件地址，返回list
            </summary>
            <param name="path">书签文件地址</param>
            <returns>书签list</returns>
        </member>
        <member name="T:XCLNetTools.FileHandler.ImgLib">
            <summary>
            图片相关
            </summary>
        </member>
        <member name="M:XCLNetTools.FileHandler.ImgLib.Crop(System.String,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            指定坐标和宽高裁剪图片
            </summary>
            <param name="img">原图路径</param>
            <param name="width">指定的宽度</param>
            <param name="height">指定的高度</param>
            <param name="x">X坐标</param>
            <param name="y">Y坐标</param>
            <returns>System.Drawing.Image,再调用save就行了,注意：调用完后需要Dispose</returns>
        </member>
        <member name="M:XCLNetTools.FileHandler.ImgLib.MakeThumbnail(System.String,System.String,System.Int32,System.Int32,XCLNetTools.Enum.CommonEnum.ThumbImageModeEnum)">
            <summary>
            生成缩略图
            </summary>
            <param name="originalImagePath">源图路径（物理路径）</param>
            <param name="thumbnailPath">缩略图路径（物理路径）</param>
            <param name="width">缩略图宽度</param>
            <param name="height">缩略图高度</param>
            <param name="mode">生成缩略图的方式</param>
        </member>
        <member name="T:XCLNetTools.FileHandler.VerificationCode">
            <summary>
            验证码相关
            </summary>
        </member>
        <member name="M:XCLNetTools.FileHandler.VerificationCode.GenerateCheckCode">
            <summary>
            生成验证码的随机数
            </summary>
            <returns>随机数</returns>
        </member>
        <member name="M:XCLNetTools.FileHandler.VerificationCode.CreateCheckCodeImage(System.String)">
            <summary>
            生成验证码图片
            </summary>
            <param name="checkCode">字符代码</param>
        </member>
        <member name="T:XCLNetTools.FileHandler.ComFile">
             <summary>
            文件操作公共类
             </summary>
        </member>
        <member name="M:XCLNetTools.FileHandler.ComFile.DeleteFile(System.String)">
            <summary>
            删除文件
            </summary>
            <param name="filePath">文件路径</param>
            <returns>若为true，则删除成功</returns>
        </member>
        <member name="M:XCLNetTools.FileHandler.ComFile.CopyFile(System.String,System.String)">
            <summary>
            复制文件(若已存在目标文件则覆盖)，若目标目录不存在，则自动创建
            </summary>
            <param name="srcPath">源文件</param>
            <param name="dstPath">目标文件</param>
            <returns>复制成功返回TRUE,复制失败返回FALSE.</returns>
        </member>
        <member name="M:XCLNetTools.FileHandler.ComFile.CopyFile(System.String,System.String,System.Boolean)">
            <summary>
            复制文件，若目标目录不存在，则自动创建
            </summary>
            <param name="srcPath">源文件</param>
            <param name="dstPath">目标文件</param>
            <param name="overwrite">是否覆盖目标文件</param>
            <returns>复制成功返回TRUE,复制失败返回FALSE</returns>
        </member>
        <member name="M:XCLNetTools.FileHandler.ComFile.GetFolderFiles(System.String)">
            <summary>
            取得文件夹中的文件列表
            </summary>
            <param name="path">文件夹路径</param>
            <returns>字符串数组(存储了一个或多个文件名)</returns>
        </member>
        <member name="M:XCLNetTools.FileHandler.ComFile.GetFolderFilesByRecursion(System.String)">
            <summary>
            递归获取指定文件夹下的所有文件路径
            </summary>
            <param name="rootPath">起始文件夹路径</param>
            <returns>文件路径数组</returns>
        </member>
        <member name="M:XCLNetTools.FileHandler.ComFile.GetFolderFilesByRecursion(System.String,System.Collections.Generic.List{System.String})">
            <summary>
            递归获取指定文件夹下的所有文件路径
            </summary>
            <param name="rootPath">起始文件夹路径</param>
            <param name="lst">文件路径存放的list</param>
        </member>
        <member name="M:XCLNetTools.FileHandler.ComFile.DownLoadFile(System.String,System.String)">
            <summary>
            文件下载
            </summary>
            <param name="path">文件链接（物理路径）</param>
            <param name="realName">要显示下载时的文件名</param>
        </member>
        <member name="M:XCLNetTools.FileHandler.ComFile.GetSaveDirectory(System.String)">
            <summary>
            返回目录路径，若该目录不存在，则创建该目录
            </summary>
            <param name="directoryPath">存放文件的物理路径。</param>
            <returns>返回存放文件的目录。</returns>
        </member>
        <member name="M:XCLNetTools.FileHandler.ComFile.GetFileFolderPath(System.String)">
            <summary>
            获取文件所在的文件夹【不带'\'】
            </summary>
        </member>
        <member name="M:XCLNetTools.FileHandler.ComFile.ChangePathByFileName(System.String,System.String)">
            <summary>
            使用新的文件名，更新指定路径path中的文件名。如：（"C:\demo\a.txt","abcd.doc"）=>C:\demo\abcd.doc
            </summary>
            <param name="path">文件物理路径</param>
            <param name="name">新的文件名（如：a.txt）</param>
            <returns>新的文件物理路径</returns>
        </member>
        <member name="M:XCLNetTools.FileHandler.ComFile.GetFileSize(System.String)">
            <summary>
            返回文件大小(字节)
            </summary>
            <returns>文件大小 byte</returns>
        </member>
        <member name="M:XCLNetTools.FileHandler.ComFile.IsBinaryFile(System.String)">
            <summary>
            判断文件是否是二进制文件
            </summary>
            <param name="filePath">文件路径</param>
            <returns>返回True为二进制文件，否则是文本文件</returns>
        </member>
        <member name="M:XCLNetTools.FileHandler.ComFile.IsTextFile(System.String)">
            <summary>
            判断文件是否是文本文件
            </summary>
            <param name="filePath">文件路径</param>
            <returns>返回True为文本文件，否则是二进制文件</returns>
        </member>
        <member name="M:XCLNetTools.FileHandler.ComFile.MapPath(System.String)">
            <summary>
            取得文件物理路径
            </summary>
            <param name="path">文件路径(如果为绝对路径，则直接返回，否则，转为绝对路径)</param>
            <returns>文件物理路径</returns>
        </member>
        <member name="M:XCLNetTools.FileHandler.ComFile.GetUrlRelativePath(System.String,System.String)">
            <summary>
            根据指定文件的物理路径Path，将它转换为相对于RootPath的Url相对路径
            例如：
            GetUrlRelativePath("C:\Program Files\Information\","C:\Program Files\Information\A\B\C.txt")=>"A/B/C.txt"
            GetUrlRelativePath("C:\Program Files\Information\","C:\A\B\C.txt")=>"../../A/B/C.txt"
            </summary>
            <param name="rootPath">根物理路径</param>
            <param name="path">指定要转换的物理路径</param>
            <returns>path相对于rootPath的url路径</returns>
        </member>
        <member name="M:XCLNetTools.FileHandler.ComFile.GetFileName(System.String,System.Boolean)">
            <summary>
            获取文件名
            </summary>
            <param name="path">路径（相对或绝对均可）</param>
            <param name="isWithExt">是否包含扩展名</param>
            <returns>文件名</returns>
        </member>
        <member name="M:XCLNetTools.FileHandler.ComFile.GetRandomFileName(System.String)">
             <summary>
            返回随机的文件命名，如：（"C:\demo\a.exe"）=>"20170408090024LGP9JWOAO2.exe"
             </summary>
             <param name="fileName">文件名或路径</param>
             <returns>新的文件名（不含路径）</returns>
        </member>
        <member name="M:XCLNetTools.FileHandler.ComFile.GetExtName(System.String,System.Boolean)">
            <summary>
            取得文件扩展名（默认不包含小圆点）【小写】
            </summary>
            <param name="fileName">路径或文件名</param>
            <param name="withDot">是否包含小圆点（默认：false）</param>
            <returns>文件扩展名</returns>
        </member>
        <member name="T:XCLNetTools.FileHandler.FileDirectory">
            <summary>
            文件目录操作类
            </summary>
        </member>
        <member name="M:XCLNetTools.FileHandler.FileDirectory.IsEmpty(System.String)">
            <summary>
            检测目录是否为空目录（既没有文件夹，也没有文件）
            </summary>
            <param name="path">目录路径</param>
            <returns>true:空目录，false:非空目录</returns>
        </member>
        <member name="M:XCLNetTools.FileHandler.FileDirectory.DirectoryExists(System.String)">
            <summary>
            判断目录是否存在
            </summary>
            <param name="directoryName">目录路径</param>
            <returns>true：存在，false：不存在</returns>
        </member>
        <member name="M:XCLNetTools.FileHandler.FileDirectory.MakeDirectory(System.String)">
            <summary>
            建立目录
            </summary>
            <param name="directoryName">目录名</param>
            <returns>返回boolean,true:目录建立成功, false:目录建立失败</returns>
        </member>
        <member name="M:XCLNetTools.FileHandler.FileDirectory.RMDIR(System.String)">
            <summary>
            删除指定的目录
            </summary>
            <param name="directoryName">目录名</param>
            <returns>true：删除成功，false：删除失败</returns>
        </member>
        <member name="M:XCLNetTools.FileHandler.FileDirectory.DelTree(System.String)">
            <summary>
            删除目录并删除其下的子目录及其文件
            </summary>
            <param name="directoryName">目录名</param>
            <returns>true:删除成功,false:删除失败</returns>
        </member>
        <member name="M:XCLNetTools.FileHandler.FileDirectory.ClearDirectory(System.String)">
            <summary>
            清空指定目录
            </summary>
            <param name="rootPath">要清空的目录</param>
            <returns>是否操作成功</returns>
        </member>
        <member name="M:XCLNetTools.FileHandler.FileDirectory.GetFileList(System.String,System.String,System.String)">
            <summary>
            获取指定目录下的所有文件及文件夹信息
            </summary>
            <param name="dirPath">要获取信息的目录路径</param>
            <param name="rootPath">根路径（设置该值后，返回的信息实体中将包含相对于该根路径的相对路径信息）</param>
            <param name="webRootPath">web根路径（用于生成该文件或文件夹的web路径），如：http://www.a.com/web/</param>
            <returns>文件信息list</returns>
        </member>
        <member name="M:XCLNetTools.FileHandler.FileDirectory.CreateTextFile(System.String)">
            <summary>
            建立一个文件
            </summary>
            <param name="filePathName">目录名</param>
            <returns>true:建立成功,false:建立失败</returns>
        </member>
        <member name="M:XCLNetTools.FileHandler.FileDirectory.AppendText(System.String,System.String)">
            <summary>
            在文件里追加内容
            </summary>
            <param name="filePathName">文件名</param>
            <param name="writeWord">追加内容</param>
        </member>
        <member name="M:XCLNetTools.FileHandler.FileDirectory.AppendText(System.String,System.String,System.Text.Encoding)">
            <summary>
            在文件里追加内容
            </summary>
            <param name="filePathName">文件名</param>
            <param name="writeWord">追加内容</param>
            <param name="encode">编码</param>
        </member>
        <member name="M:XCLNetTools.FileHandler.FileDirectory.ReadFileData(System.String)">
            <summary>
            读取文件里内容
            </summary>
            <param name="filePathName">文件名</param>
            <returns>文件内容</returns>
        </member>
        <member name="M:XCLNetTools.FileHandler.FileDirectory.FileDelete(System.String)">
            <summary>
            删除文件
            </summary>
            <param name="absoluteFilePath">文件绝对地址</param>
            <returns>true:删除文件成功,false:删除文件失败</returns>
        </member>
        <member name="T:XCLNetTools.FileHandler.UploadEventArgs">
            <summary>
            上传数据参数
            </summary>
        </member>
        <member name="P:XCLNetTools.FileHandler.UploadEventArgs.BytesSent">
            <summary>
            已发送的字节数
            </summary>
        </member>
        <member name="P:XCLNetTools.FileHandler.UploadEventArgs.TotalBytes">
            <summary>
            总字节数
            </summary>
        </member>
        <member name="T:XCLNetTools.FileHandler.DownloadEventArgs">
            <summary>
            下载数据参数
            </summary>
        </member>
        <member name="P:XCLNetTools.FileHandler.DownloadEventArgs.BytesReceived">
            <summary>
            已接收的字节数
            </summary>
        </member>
        <member name="P:XCLNetTools.FileHandler.DownloadEventArgs.TotalBytes">
            <summary>
            总字节数
            </summary>
        </member>
        <member name="P:XCLNetTools.FileHandler.DownloadEventArgs.ReceivedData">
            <summary>
            当前缓冲区接收的数据
            </summary>
        </member>
        <member name="T:XCLNetTools.FileHandler.WebClient">
            <summary>
            WebClient
            </summary>
        </member>
        <member name="E:XCLNetTools.FileHandler.WebClient.UploadProgressChanged">
            <summary>
            上传事件
            </summary>
        </member>
        <member name="E:XCLNetTools.FileHandler.WebClient.DownloadProgressChanged">
            <summary>
            下载事件
            </summary>
        </member>
        <member name="M:XCLNetTools.FileHandler.WebClient.#ctor">
            <summary>
            创建WebClient的实例
            </summary>
        </member>
        <member name="P:XCLNetTools.FileHandler.WebClient.BufferSize">
            <summary>
            设置发送和接收的数据缓冲大小
            </summary>
        </member>
        <member name="P:XCLNetTools.FileHandler.WebClient.ResponseHeaders">
            <summary>
            获取响应头集合
            </summary>
        </member>
        <member name="P:XCLNetTools.FileHandler.WebClient.RequestHeaders">
            <summary>
            获取请求头集合
            </summary>
        </member>
        <member name="P:XCLNetTools.FileHandler.WebClient.Proxy">
            <summary>
            获取或设置代理
            </summary>
        </member>
        <member name="P:XCLNetTools.FileHandler.WebClient.Encoding">
            <summary>
            获取或设置请求与响应的文本编码方式
            </summary>
        </member>
        <member name="P:XCLNetTools.FileHandler.WebClient.RespHtml">
            <summary>
            获取或设置响应的html代码
            </summary>
        </member>
        <member name="P:XCLNetTools.FileHandler.WebClient.CookieContainer">
            <summary>
            获取或设置与请求关联的Cookie容器
            </summary>
        </member>
        <member name="M:XCLNetTools.FileHandler.WebClient.GetHtml(System.String)">
            <summary>
             获取网页源代码
            </summary>
            <param name="url">网址</param>
            <returns></returns>
        </member>
        <member name="M:XCLNetTools.FileHandler.WebClient.DownloadFile(System.String,System.String)">
            <summary>
            下载文件
            </summary>
            <param name="url">文件URL地址</param>
            <param name="filename">文件保存完整路径</param>
        </member>
        <member name="M:XCLNetTools.FileHandler.WebClient.GetData(System.String)">
            <summary>
            从指定URL下载数据
            </summary>
            <param name="url">网址</param>
            <returns></returns>
        </member>
        <member name="M:XCLNetTools.FileHandler.WebClient.Post(System.String,System.String)">
            <summary>
            向指定URL发送文本数据
            </summary>
            <param name="url">网址</param>
            <param name="postData">urlencode编码的文本数据</param>
            <returns></returns>
        </member>
        <member name="M:XCLNetTools.FileHandler.WebClient.Post(System.String,System.Byte[])">
            <summary>
            向指定URL发送字节数据
            </summary>
            <param name="url">网址</param>
            <param name="postData">发送的字节数组</param>
            <returns></returns>
        </member>
        <member name="M:XCLNetTools.FileHandler.WebClient.Post(System.String,XCLNetTools.FileHandler.MultipartForm)">
            <summary>
            向指定网址发送mulitpart编码的数据
            </summary>
            <param name="url">网址</param>
            <param name="mulitpartForm">mulitpart form data</param>
            <returns></returns>
        </member>
        <member name="M:XCLNetTools.FileHandler.WebClient.GetData(System.Net.HttpWebRequest)">
            <summary>
            读取请求返回的数据
            </summary>
            <param name="request">请求对象</param>
            <returns></returns>
        </member>
        <member name="M:XCLNetTools.FileHandler.WebClient.PostData(System.Net.HttpWebRequest,System.Byte[])">
            <summary>
            发送请求数据
            </summary>
            <param name="request">请求对象</param>
            <param name="postData">请求发送的字节数组</param>
        </member>
        <member name="M:XCLNetTools.FileHandler.WebClient.CreateRequest(System.String,System.String)">
            <summary>
            创建HTTP请求
            </summary>
            <param name="url">URL地址</param>
            <param name="method">method方法</param>
            <returns>httpwebrequest实例</returns>
        </member>
        <member name="M:XCLNetTools.FileHandler.WebClient.SaveCookiesToDisk">
            <summary>
            将Cookie保存到磁盘
            </summary>
        </member>
        <member name="M:XCLNetTools.FileHandler.WebClient.LoadCookiesFromDisk">
            <summary>
            从磁盘加载Cookie
            </summary>
        </member>
        <member name="T:XCLNetTools.FileHandler.MultipartForm">
            <summary>
            对文件和文本数据进行Multipart形式的编码
            </summary>
        </member>
        <member name="P:XCLNetTools.FileHandler.MultipartForm.FormData">
            <summary>
            获取编码后的字节数组
            </summary>
        </member>
        <member name="P:XCLNetTools.FileHandler.MultipartForm.ContentType">
            <summary>
            获取此编码内容的类型
            </summary>
        </member>
        <member name="P:XCLNetTools.FileHandler.MultipartForm.StringEncoding">
            <summary>
            获取或设置对字符串采用的编码类型
            </summary>
        </member>
        <member name="M:XCLNetTools.FileHandler.MultipartForm.#ctor">
            <summary>
            实例化
            </summary>
        </member>
        <member name="M:XCLNetTools.FileHandler.MultipartForm.AddFlie(System.String,System.String)">
            <summary>
            添加一个文件
            </summary>
            <param name="name">文件域名称</param>
            <param name="filename">文件的完整路径</param>
        </member>
        <member name="M:XCLNetTools.FileHandler.MultipartForm.AddFlie(System.String,System.String,System.Byte[],System.Int32)">
            <summary>
            添加一个文件
            </summary>
            <param name="name">文件域名称</param>
            <param name="filename">文件名</param>
            <param name="fileData">文件二进制数据</param>
            <param name="dataLength">二进制数据大小</param>
        </member>
        <member name="M:XCLNetTools.FileHandler.MultipartForm.AddString(System.String,System.String)">
            <summary>
            添加字符串
            </summary>
            <param name="name">文本域名称</param>
            <param name="value">文本值</param>
        </member>
        <member name="M:XCLNetTools.FileHandler.MultipartForm.GetContentType(System.String)">
            <summary>
            从注册表获取文件类型
            </summary>
            <param name="filename">包含扩展名的文件名</param>
            <returns>如：application/stream</returns>
        </member>
        <member name="T:XCLNetTools.FileHandler.INIFile">
            <summary>
            INI文件读写类。
            </summary>
        </member>
        <member name="M:XCLNetTools.FileHandler.INIFile.#ctor(System.String)">
            <summary>
            构造函数
            </summary>
            <param name="iniPath">文件路径</param>
        </member>
        <member name="P:XCLNetTools.FileHandler.INIFile.Path">
            <summary>
            文件路径
            </summary>
        </member>
        <member name="M:XCLNetTools.FileHandler.INIFile.IniWriteValue(System.String,System.String,System.String)">
            <summary>
            写INI文件
            </summary>
        </member>
        <member name="M:XCLNetTools.FileHandler.INIFile.IniReadValue(System.String,System.String)">
            <summary>
            读取INI文件
            </summary>
            <param name="section">section</param>
            <param name="key">key</param>
            <returns>value值</returns>
        </member>
        <member name="M:XCLNetTools.FileHandler.INIFile.IniReadValues(System.String,System.String)">
            <summary>
            读ini
            </summary>
            <param name="section">section</param>
            <param name="key">key</param>
            <returns>结果byte[]</returns>
        </member>
        <member name="M:XCLNetTools.FileHandler.INIFile.ClearAllSection">
            <summary>
            删除ini文件下所有段落
            </summary>
        </member>
        <member name="M:XCLNetTools.FileHandler.INIFile.ClearSection(System.String)">
            <summary>
            删除ini文件下section段落下的所有键
            </summary>
        </member>
        <member name="T:XCLNetTools.FileHandler.ZipHelper">
            <summary>
            文件的压缩与解压缩
            </summary>
        </member>
        <member name="M:XCLNetTools.FileHandler.ZipHelper.ToZipFile(System.String,System.String,System.Int32,System.Int32)">
            <summary>
            压缩单个文件
            </summary>
            <param name="fileToZip">要压缩的文件</param>
            <param name="zipedFile">压缩后的文件</param>
            <param name="compressionLevel">压缩等级</param>
            <param name="blockSize">每次写入大小</param>
        </member>
        <member name="M:XCLNetTools.FileHandler.ZipHelper.ToZipFile(System.String,System.String)">
            <summary>
            压缩单个文件
            </summary>
            <param name="fileToZip">要进行压缩的文件名</param>
            <param name="zipedFile">压缩后生成的压缩文件名</param>
        </member>
        <member name="M:XCLNetTools.FileHandler.ZipHelper.ZipFileDirectory(System.String,System.String)">
            <summary>
            压缩多层目录
            </summary>
            <param name="strDirectory">The directory.</param>
            <param name="zipedFile">The ziped file.</param>
        </member>
        <member name="M:XCLNetTools.FileHandler.ZipHelper.ZipSetp(System.String,ICSharpCode.SharpZipLib.Zip.ZipOutputStream,System.String)">
            <summary>
            递归遍历目录
            </summary>
            <param name="strDirectory">The directory.</param>
            <param name="s">The ZipOutputStream Object.</param>
            <param name="parentPath">The parent path.</param>
        </member>
        <member name="M:XCLNetTools.FileHandler.ZipHelper.UnZip(System.String,System.String,System.String,System.Boolean)">
            <summary>
            解压缩一个 zip 文件。
            </summary>
            <param name="zipedFile">The ziped file.</param>
            <param name="strDirectory">The STR directory.</param>
            <param name="password">zip 文件的密码。</param>
            <param name="overWrite">是否覆盖已存在的文件。</param>
        </member>
        <member name="M:XCLNetTools.FileHandler.ZipHelper.CompressFile(System.String[],System.String,System.String[])">
            <summary>
            压缩多个文件
            </summary>
            <param name="files">要压缩的文件物理路径数组</param>
            <param name="zipedFile">创建的zip文件路径</param>
            <param name="fileNames">自定义待压缩的文件名</param>
        </member>
        <member name="T:XCLNetTools.FTP.FTPClient">
            <summary>
            FTP操作客户端类
            <seealso cref="!:http://www.cnblogs.com/sufei/archive/2012/12/09/2810197.html"/>
            </summary>
        </member>
        <member name="M:XCLNetTools.FTP.FTPClient.#ctor">
            <summary>
            缺省构造函数
            </summary>
        </member>
        <member name="M:XCLNetTools.FTP.FTPClient.#ctor(System.String,System.String,System.String,System.String,System.Int32)">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="F:XCLNetTools.FTP.FTPClient.strMsg">
            <summary>
            服务器返回的应答信息(包含应答码)
            </summary>
        </member>
        <member name="F:XCLNetTools.FTP.FTPClient.strReply">
            <summary>
            服务器返回的应答信息(包含应答码)
            </summary>
        </member>
        <member name="F:XCLNetTools.FTP.FTPClient.iReplyCode">
            <summary>
            服务器返回的应答码
            </summary>
        </member>
        <member name="F:XCLNetTools.FTP.FTPClient.socketControl">
            <summary>
            进行控制连接的socket
            </summary>
        </member>
        <member name="F:XCLNetTools.FTP.FTPClient.trType">
            <summary>
            传输模式
            </summary>
        </member>
        <member name="F:XCLNetTools.FTP.FTPClient.BLOCK_SIZE">
            <summary>
            接收和发送数据的缓冲区
            </summary>
        </member>
        <member name="F:XCLNetTools.FTP.FTPClient.ASCII">
            <summary>
            编码方式
            </summary>
        </member>
        <member name="F:XCLNetTools.FTP.FTPClient.buffer">
            <summary>
            字节数组
            </summary>
        </member>
        <member name="P:XCLNetTools.FTP.FTPClient.RemoteHost">
            <summary>
            FTP服务器IP地址
            </summary>
        </member>
        <member name="P:XCLNetTools.FTP.FTPClient.RemotePort">
            <summary>
            FTP服务器端口
            </summary>
        </member>
        <member name="P:XCLNetTools.FTP.FTPClient.RemotePath">
            <summary>
            当前服务器目录
            </summary>
        </member>
        <member name="P:XCLNetTools.FTP.FTPClient.RemoteUser">
            <summary>
            登录用户账号
            </summary>
        </member>
        <member name="P:XCLNetTools.FTP.FTPClient.RemotePass">
            <summary>
            用户登录密码
            </summary>
        </member>
        <member name="P:XCLNetTools.FTP.FTPClient.Connected">
            <summary>
            是否登录
            </summary>
        </member>
        <member name="M:XCLNetTools.FTP.FTPClient.Connect">
            <summary>
            建立连接
            </summary>
        </member>
        <member name="M:XCLNetTools.FTP.FTPClient.DisConnect">
            <summary>
            关闭连接
            </summary>
        </member>
        <member name="T:XCLNetTools.FTP.FTPClient.TransferType">
            <summary>
            传输模式:二进制类型、ASCII类型
            </summary>
        </member>
        <member name="F:XCLNetTools.FTP.FTPClient.TransferType.Binary">
            <summary>
            二进制类型
            </summary>
        </member>
        <member name="F:XCLNetTools.FTP.FTPClient.TransferType.ASCII">
            <summary>
            ASCII类型
            </summary>
        </member>
        <member name="M:XCLNetTools.FTP.FTPClient.SetTransferType(XCLNetTools.FTP.FTPClient.TransferType)">
            <summary>
            设置传输模式
            </summary>
            <param name="ttType">传输模式</param>
        </member>
        <member name="M:XCLNetTools.FTP.FTPClient.GetTransferType">
            <summary>
            获得传输模式
            </summary>
            <returns>传输模式</returns>
        </member>
        <member name="M:XCLNetTools.FTP.FTPClient.Dir(System.String)">
            <summary>
            获得文件列表
            </summary>
            <param name="strMask">文件名的匹配字符串</param>
        </member>
        <member name="M:XCLNetTools.FTP.FTPClient.GetFileSize(System.String)">
            <summary>
            获取文件大小
            </summary>
            <param name="strFileName">文件名</param>
            <returns>文件大小</returns>
        </member>
        <member name="M:XCLNetTools.FTP.FTPClient.GetFileInfo(System.String)">
            <summary>
            获取文件信息
            </summary>
            <param name="strFileName">文件名</param>
            <returns>文件大小</returns>
        </member>
        <member name="M:XCLNetTools.FTP.FTPClient.Delete(System.String)">
            <summary>
            删除
            </summary>
            <param name="strFileName">待删除文件名</param>
        </member>
        <member name="M:XCLNetTools.FTP.FTPClient.Rename(System.String,System.String)">
            <summary>
            重命名(如果新文件名与已有文件重名,将覆盖已有文件)
            </summary>
            <param name="strOldFileName">旧文件名</param>
            <param name="strNewFileName">新文件名</param>
        </member>
        <member name="M:XCLNetTools.FTP.FTPClient.Get(System.String,System.String)">
            <summary>
            下载一批文件
            </summary>
            <param name="strFileNameMask">文件名的匹配字符串</param>
            <param name="strFolder">本地目录(不得以\结束)</param>
        </member>
        <member name="M:XCLNetTools.FTP.FTPClient.Get(System.String,System.String,System.String)">
            <summary>
            下载一个文件
            </summary>
            <param name="strRemoteFileName">要下载的文件名</param>
            <param name="strFolder">本地目录(不得以\结束)</param>
            <param name="strLocalFileName">保存在本地时的文件名</param>
        </member>
        <member name="M:XCLNetTools.FTP.FTPClient.GetNoBinary(System.String,System.String,System.String)">
            <summary>
            下载一个文件
            </summary>
            <param name="strRemoteFileName">要下载的文件名</param>
            <param name="strFolder">本地目录(不得以\结束)</param>
            <param name="strLocalFileName">保存在本地时的文件名</param>
        </member>
        <member name="M:XCLNetTools.FTP.FTPClient.Put(System.String,System.String)">
            <summary>
            上传一批文件
            </summary>
            <param name="strFolder">本地目录(不得以\结束)</param>
            <param name="strFileNameMask">文件名匹配字符(可以包含*和?)</param>
        </member>
        <member name="M:XCLNetTools.FTP.FTPClient.Put(System.String)">
            <summary>
            上传一个文件
            </summary>
            <param name="strFileName">本地文件名</param>
        </member>
        <member name="M:XCLNetTools.FTP.FTPClient.PutByGuid(System.String,System.String)">
            <summary>
            上传一个文件
            </summary>
            <param name="strFileName">本地文件名</param>
        </member>
        <member name="M:XCLNetTools.FTP.FTPClient.MkDir(System.String)">
            <summary>
            创建目录
            </summary>
            <param name="strDirName">目录名</param>
        </member>
        <member name="M:XCLNetTools.FTP.FTPClient.RmDir(System.String)">
            <summary>
            删除目录
            </summary>
            <param name="strDirName">目录名</param>
        </member>
        <member name="M:XCLNetTools.FTP.FTPClient.ChDir(System.String)">
            <summary>
            改变目录
            </summary>
            <param name="strDirName">新的工作目录名</param>
        </member>
        <member name="M:XCLNetTools.FTP.FTPClient.ReadReply">
            <summary>
            将一行应答字符串记录在strReply和strMsg,应答码记录在iReplyCode
            </summary>
        </member>
        <member name="M:XCLNetTools.FTP.FTPClient.CreateDataSocket">
            <summary>
            建立进行数据连接的socket
            </summary>
            <returns>数据连接socket</returns>
        </member>
        <member name="M:XCLNetTools.FTP.FTPClient.CloseSocketConnect">
            <summary>
            关闭socket连接(用于登录以前)
            </summary>
        </member>
        <member name="M:XCLNetTools.FTP.FTPClient.ReadLine">
            <summary>
            读取Socket返回的所有字符串
            </summary>
            <returns>包含应答码的字符串行</returns>
        </member>
        <member name="M:XCLNetTools.FTP.FTPClient.SendCommand(System.String)">
            <summary>
            发送命令并获取应答码和最后一行应答字符串
            </summary>
            <param name="strCommand">命令</param>
        </member>
        <member name="T:XCLNetTools.Generic.Extension">
            <summary>
            泛型扩展方法
            </summary>
        </member>
        <member name="M:XCLNetTools.Generic.Extension.IsNullOrEmpty``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            判断IEnumerable是否为空
            </summary>
            <param name="source">要判断的值</param>
            <returns>是否为null或empty</returns>
        </member>
        <member name="M:XCLNetTools.Generic.Extension.IsNotNullOrEmpty``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            判断IEnumerable是否有值
            </summary>
            <param name="source">要判断的值</param>
            <returns>是否不为（null或empty）</returns>
        </member>
        <member name="M:XCLNetTools.Generic.Extension.ToJson``1(``0)">
            <summary>
            将T转为json字符串
            </summary>
            <param name="source">要转换的值</param>
            <returns>json字符串</returns>
        </member>
        <member name="M:XCLNetTools.Generic.Extension.IsNull``1(``0)">
            <summary>
            判断T是否为null
            </summary>
            <param name="source">要判断的值</param>
            <returns>是否为null</returns>
        </member>
        <member name="M:XCLNetTools.Generic.Extension.IsNotNull``1(``0)">
            <summary>
            判断T不为null
            </summary>
            <param name="source">要判断的值</param>
            <returns>是否不为null</returns>
        </member>
        <member name="T:XCLNetTools.Generic.ListHelper">
            <summary>
            List操作类
            </summary>
        </member>
        <member name="M:XCLNetTools.Generic.ListHelper.SplitListByStep``1(System.Int32,System.Collections.Generic.List{``0})">
            <summary>
            根据步长，将一个总List拆分为多个子List
            </summary>
            <param name="step">每个子list最多的项数</param>
            <param name="lst">主list</param>
            <returns>分拆后的结果list</returns>
        </member>
        <member name="M:XCLNetTools.Generic.ListHelper.GetStrSplitList(System.String,System.Char)">
            <summary>
            将指定字符串用指定分隔符分开存到list中
            </summary>
            <param name="str">源字符串</param>
            <param name="speater">分隔字符</param>
            <returns>list</returns>
        </member>
        <member name="M:XCLNetTools.Generic.ListHelper.GetStringByList``1(System.Collections.Generic.List{``0},System.String)">
            <summary>
            将list中的项拼接字符串
            </summary>
            <param name="lst">要操作的list</param>
            <param name="splitChar">分隔符</param>
            <returns>字符串结果值</returns>
        </member>
        <member name="M:XCLNetTools.Generic.ListHelper.DataSetToList``1(System.Data.DataSet)">
            <summary>
            将dataset的第一个datatable转为list
            </summary>
            <param name="ds">要转换的数据</param>
            <returns>list</returns>
        </member>
        <member name="M:XCLNetTools.Generic.ListHelper.DataTableToList``1(System.Data.DataTable)">
            <summary>
            将dataTable转为list
            </summary>
            <param name="dt">要转换的数据</param>
            <returns>list</returns>
        </member>
        <member name="T:XCLNetTools.Http.CookieHelper">
            <summary>
            Cookie操作帮助类
            </summary>
        </member>
        <member name="M:XCLNetTools.Http.CookieHelper.GetCookieList(System.String)">
            <summary>
            根据字符生成Cookie列表
            </summary>
            <param name="cookie">Cookie集合的字符串形式</param>
            <returns>key value实体</returns>
        </member>
        <member name="M:XCLNetTools.Http.CookieHelper.GetCookieValue(System.String,System.String)">
            <summary>
            根据key值得到Cookie值
            </summary>
            <param name="key">key</param>
            <param name="cookie">Cookie集合的字符串形式</param>
            <returns>key的值</returns>
        </member>
        <member name="M:XCLNetTools.Http.CookieHelper.CookieFormat(System.String,System.String)">
            <summary>
            格式化Cookie为标准格式
            </summary>
            <param name="key">Key值</param>
            <param name="value">Value值</param>
            <returns>格式化的值，如：a=b;</returns>
        </member>
        <member name="M:XCLNetTools.Http.CookieHelper.SetCookies(System.String,System.String,System.Int32)">
            <summary>
            设置cookies
            </summary>
            <param name="mainName">主键</param>
            <param name="mainValue">值</param>
            <param name="days">天数</param>
            <returns>是否设置成功</returns>
        </member>
        <member name="M:XCLNetTools.Http.CookieHelper.GetCookies(System.String)">
            <summary>
            获取cookies
            </summary>
            <param name="name">cookie名</param>
            <returns>cookie的值</returns>
        </member>
        <member name="M:XCLNetTools.Http.CookieHelper.GetCookiesCollection(System.String)">
            <summary>
            获取cookies集合
            </summary>
            <param name="name">cookie名</param>
            <returns>值的集合</returns>
        </member>
        <member name="M:XCLNetTools.Http.CookieHelper.DelCookies(System.String)">
            <summary>
            删除Cookies
            </summary>
            <param name="name">cookie名</param>
            <returns>是否删除成功</returns>
        </member>
        <member name="T:XCLNetTools.Http.HttpHelper">
            <summary>
            Http连接操作帮助类
            </summary>
        </member>
        <member name="M:XCLNetTools.Http.HttpHelper.GetHtml(XCLNetTools.Entity.Http.HttpItem)">
            <summary>
            根据相传入的数据，得到相应页面数据
            </summary>
            <param name="item">参数类对象</param>
            <returns>返回HttpResult类型</returns>
        </member>
        <member name="M:XCLNetTools.Http.HttpHelper.GetMemoryStream(System.IO.Stream)">
            <summary>
            4.0以下.net版本取数据使用
            </summary>
            <param name="streamResponse">流</param>
        </member>
        <member name="M:XCLNetTools.Http.HttpHelper.SetRequest(XCLNetTools.Entity.Http.HttpItem)">
             <summary>
             为请求准备参数
             </summary>
            <param name="item">参数列表</param>
        </member>
        <member name="M:XCLNetTools.Http.HttpHelper.SetCer(XCLNetTools.Entity.Http.HttpItem)">
            <summary>
            设置证书
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:XCLNetTools.Http.HttpHelper.SetCerList(XCLNetTools.Entity.Http.HttpItem)">
            <summary>
            设置多个证书
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:XCLNetTools.Http.HttpHelper.SetCookie(XCLNetTools.Entity.Http.HttpItem)">
            <summary>
            设置Cookie
            </summary>
            <param name="item">Http参数</param>
        </member>
        <member name="M:XCLNetTools.Http.HttpHelper.SetPostData(XCLNetTools.Entity.Http.HttpItem)">
            <summary>
            设置Post数据
            </summary>
            <param name="item">Http参数</param>
        </member>
        <member name="M:XCLNetTools.Http.HttpHelper.SetProxy(XCLNetTools.Entity.Http.HttpItem)">
            <summary>
            设置代理
            </summary>
            <param name="item">参数对象</param>
        </member>
        <member name="M:XCLNetTools.Http.HttpHelper.CheckValidationResult(System.Object,System.Security.Cryptography.X509Certificates.X509Certificate,System.Security.Cryptography.X509Certificates.X509Chain,System.Net.Security.SslPolicyErrors)">
            <summary>
            回调验证证书问题
            </summary>
            <param name="sender">流对象</param>
            <param name="certificate">证书</param>
            <param name="chain">X509Chain</param>
            <param name="errors">SslPolicyErrors</param>
            <returns>bool</returns>
        </member>
        <member name="T:XCLNetTools.Http.ResultType">
            <summary>
            返回类型
            </summary>
        </member>
        <member name="F:XCLNetTools.Http.ResultType.String">
            <summary>
            表示只返回字符串 只有Html有数据
            </summary>
        </member>
        <member name="F:XCLNetTools.Http.ResultType.Byte">
            <summary>
            表示返回字符串和字节流 ResultByte和Html都有数据返回
            </summary>
        </member>
        <member name="T:XCLNetTools.Http.PostDataType">
            <summary>
            Post的数据格式默认为string
            </summary>
        </member>
        <member name="F:XCLNetTools.Http.PostDataType.String">
            <summary>
            字符串类型，这时编码Encoding可不设置
            </summary>
        </member>
        <member name="F:XCLNetTools.Http.PostDataType.Byte">
            <summary>
            Byte类型，需要设置PostdataByte参数的值编码Encoding可设置为空
            </summary>
        </member>
        <member name="F:XCLNetTools.Http.PostDataType.FilePath">
            <summary>
            传文件，Postdata必须设置为文件的绝对路径，必须设置Encoding的值
            </summary>
        </member>
        <member name="T:XCLNetTools.MVC.JsonResultFormat">
            <summary>
            带时间格式的jsonResult
            </summary>
        </member>
        <member name="P:XCLNetTools.MVC.JsonResultFormat.DateFormat">
            <summary>
            格式化时间，默认值为"yyyy-MM-dd HH:mm:ss"
            </summary>
        </member>
        <member name="M:XCLNetTools.MVC.JsonResultFormat.ExecuteResult(System.Web.Mvc.ControllerContext)">
            <summary>
            重写执行视图
            </summary>
            <param name="context">上下文</param>
        </member>
        <member name="T:XCLNetTools.Serialize.LitJson">
            <summary>
            LitJson帮助类
            </summary>
        </member>
        <member name="M:XCLNetTools.Serialize.LitJson.ConvertObjectToJson(System.Object)">
            <summary>
            对象转为json
            </summary>
            <param name="obj">要序列化的对象</param>
            <returns>json</returns>
        </member>
        <member name="M:XCLNetTools.Serialize.LitJson.ConvertDataTableToArray(System.Data.DataTable)">
            <summary>
            DataTable转为js的数组形式，若为空，则返回[]
            </summary>
            <param name="dt">要处理的数据</param>
            <returns>json数组</returns>
        </member>
        <member name="M:XCLNetTools.Serialize.LitJson.ConvertDataTableToJson(System.Data.DataTable,System.String)">
            <summary>
            DataTable转为json
            </summary>
            <param name="dt">数据源</param>
            <param name="jsonName">指定的json key名</param>
            <returns>json</returns>
        </member>
        <member name="M:XCLNetTools.Serialize.LitJson.ConvertDataSetToArray(System.Data.DataSet)">
            <summary>
            DataSet转为js的数组形式，若为空，则返回[]
            </summary>
            <param name="ds">数据源</param>
            <returns>json数组</returns>
        </member>
        <member name="M:XCLNetTools.Serialize.LitJson.ConvertDataSetToJson(System.Data.DataSet,System.String)">
            <summary>
            DataSet转为json
            </summary>
            <param name="ds">数据源</param>
            <param name="jsonName">指定json key名</param>
            <returns>json</returns>
        </member>
        <member name="M:XCLNetTools.Serialize.LitJson.ConvertListToJson``1(System.Collections.Generic.IList{``0},System.String)">
            <summary>
            List转为json
            </summary>
            <param name="lst">数据源</param>
            <param name="jsonName">指定json key名</param>
            <returns>json</returns>
        </member>
        <member name="M:XCLNetTools.Serialize.LitJson.ConvertListToArray``1(System.Collections.Generic.IList{``0})">
            <summary>
            List转为数组，若为空，则直接返回[]
            </summary>
            <param name="lst">数据源</param>
            <returns>json数组</returns>
        </member>
        <member name="M:XCLNetTools.Serialize.LitJson.WriteFormat(LitJson.JsonWriter,System.String,System.String)">
            <summary>
            输出指定格式的数据
            </summary>
            <param name="dataType">数据类型</param>
            <param name="jw">JsonWriter对象</param>
            <param name="value">要转换的值</param>
        </member>
        <member name="T:XCLNetTools.Serialize.JSON">
            <summary>
            JSON序列化相关
            </summary>
        </member>
        <member name="T:XCLNetTools.Serialize.JSON.JsonProviderEnum">
            <summary>
            提供者枚举
            </summary>
        </member>
        <member name="F:XCLNetTools.Serialize.JSON.JsonProviderEnum.SystemWeb">
            <summary>
            指定为：System.Web.Script.Serialization
            </summary>
        </member>
        <member name="F:XCLNetTools.Serialize.JSON.JsonProviderEnum.Newtonsoft">
            <summary>
            指定为：Newtonsoft.Json.JsonConvert
            </summary>
        </member>
        <member name="M:XCLNetTools.Serialize.JSON.Serialize(System.Object,XCLNetTools.Serialize.JSON.JsonProviderEnum)">
            <summary>
            将对象序列化为json
            </summary>
            <param name="obj">要序列化的对象</param>
            <param name="provider">序列化提供者</param>
            <returns>json</returns>
        </member>
        <member name="M:XCLNetTools.Serialize.JSON.DeSerialize``1(System.String,XCLNetTools.Serialize.JSON.JsonProviderEnum)">
            <summary>
            将json反序列化为一个对象
            </summary>
            <param name="str">要反序列化的json</param>
            <param name="provider">提供者</param>
            <returns>对象</returns>
        </member>
        <member name="M:XCLNetTools.Serialize.JSON.IsJSON(System.String)">
            <summary>
            判断字符串是否为有效的json字符串
            </summary>
            <param name="json">json字符串</param>
            <returns>是、否</returns>
        </member>
        <member name="T:XCLNetTools.Serialize.Lib">
            <summary>
            其它对象序列化相关
            </summary>
        </member>
        <member name="M:XCLNetTools.Serialize.Lib.DeserializeObject``1(System.Byte[])">
            <summary>
            把字节反序列化成相应的对象
            </summary>
            <param name="pBytes">字节流</param>
            <returns>T</returns>
        </member>
        <member name="M:XCLNetTools.Serialize.Lib.DeepClone``1(``0)">
            <summary>
            对象深度clone（被clone对象必须可以序列化）
            </summary>
            <param name="source">要克隆的对象</param>
            <returns>克隆后的新对象</returns>
        </member>
        <member name="M:XCLNetTools.Serialize.Lib.JObjectFillDictionary(System.Collections.Generic.Dictionary{System.String,System.String},Newtonsoft.Json.Linq.JProperty)">
            <summary>
            将JObject的属性填充至指定的dictionary
            </summary>
            <param name="result">结果</param>
            <param name="p">JObject的属性</param>
        </member>
        <member name="M:XCLNetTools.Serialize.Lib.ConvertJsonToDictionary(System.String)">
            <summary>
            将JObject类型的属性转换为dictionary
            </summary>
            <param name="json">要转换的json</param>
            <returns>dictionary结果</returns>
        </member>
        <member name="M:XCLNetTools.Serialize.Lib.ConvertJsonToUrlParameters(System.String)">
            <summary>
            将JObject的属性转换为url参数形式
            如：{"a":"1","b":"2","c":{"d":"100"}} -> a=1&amp;b=2&amp;c.d=100
            </summary>
            <param name="json">需要转换的json</param>
            <returns>url参数字符串</returns>
        </member>
        <member name="T:XCLNetTools.Serialize.XML">
            <summary>
            xml序列化相关
            </summary>
        </member>
        <member name="M:XCLNetTools.Serialize.XML.Deserialize``1(System.String)">
            <summary>
            反序列化
            </summary>
            <param name="xml">xml</param>
            <returns>对象</returns>
        </member>
        <member name="M:XCLNetTools.Serialize.XML.DeserializeFromXMLFile``1(System.String)">
            <summary>
            从xml文件中反序列化
            </summary>
            <param name="xmlFilePath">xml路径</param>
            <returns>对象</returns>
        </member>
        <member name="M:XCLNetTools.Serialize.XML.Serializer``1(``0)">
            <summary>
            序列化
            </summary>
            <param name="obj">对象</param>
            <returns>xml</returns>
        </member>
        <member name="T:XCLNetTools.Language.CN">
            <summary>
            中文处理
            </summary>
        </member>
        <member name="M:XCLNetTools.Language.CN.ConvertToAllSpell(System.String)">
            <summary>
            将汉字转化为全拼
            </summary>
            <param name="strChinese">汉字</param>
            <returns>全拼</returns>
        </member>
        <member name="M:XCLNetTools.Language.CN.ConvertToFirstSpell(System.String)">
            <summary>
            将汉字转化为拼音首字母（大写）
            </summary>
            <param name="strChinese">汉字</param>
            <returns>拼音首字母</returns>
        </member>
        <member name="M:XCLNetTools.Language.CN.GetFirstSpell(System.String)">
            <summary>
            获取第一个汉字的首字母（大写）；
            </summary>
            <param name="charChinese">汉字</param>
            <returns>首字母</returns>
        </member>
        <member name="M:XCLNetTools.Language.CN.ConvertFirstSpell(System.String)">
            <summary>
            获取第一个汉字的拼音
            </summary>
            <param name="charChinese">汉字</param>
            <returns>拼音</returns>
        </member>
        <member name="T:XCLNetTools.Message.Error.ErrorHttpModule">
            <summary>
            异常处理
            </summary>
        </member>
        <member name="M:XCLNetTools.Message.Error.ErrorHttpModule.Init(System.Web.HttpApplication)">
            <summary>
            初始化
            </summary>
        </member>
        <member name="M:XCLNetTools.Message.Error.ErrorHttpModule.Application_Error(System.Object,System.EventArgs)">
            <summary>
            错误
            </summary>
        </member>
        <member name="M:XCLNetTools.Message.Error.ErrorHttpModule.Dispose">
            <summary>
            Dispose
            </summary>
        </member>
        <member name="T:XCLNetTools.Message.MessageModel">
            <summary>
            消息提示实体类(用于json属性)
            </summary>
        </member>
        <member name="P:XCLNetTools.Message.MessageModel.Title">
            <summary>
            提示标题
            </summary>
        </member>
        <member name="P:XCLNetTools.Message.MessageModel.Date">
            <summary>
            消息提示时间
            </summary>
        </member>
        <member name="P:XCLNetTools.Message.MessageModel.Message">
            <summary>
            消息提示内容
            </summary>
        </member>
        <member name="P:XCLNetTools.Message.MessageModel.MessageMore">
            <summary>
            消息详细信息
            </summary>
        </member>
        <member name="P:XCLNetTools.Message.MessageModel.Url">
            <summary>
            消息发生页地址
            </summary>
        </member>
        <member name="P:XCLNetTools.Message.MessageModel.FromUrl">
            <summary>
            消息页来源地址(reffer)
            </summary>
        </member>
        <member name="P:XCLNetTools.Message.MessageModel.IsSuccess">
            <summary>
            是否成功与失败的标识
            </summary>
        </member>
        <member name="P:XCLNetTools.Message.MessageModel.IsRefresh">
            <summary>
            是否需要刷新
            </summary>
        </member>
        <member name="P:XCLNetTools.Message.MessageModel.Remark">
            <summary>
            备注信息
            </summary>
        </member>
        <member name="P:XCLNetTools.Message.MessageModel.IsRedirect">
            <summary>
            是否需要跳转
            </summary>
        </member>
        <member name="P:XCLNetTools.Message.MessageModel.RedirectURL">
            <summary>
            要跳转的url
            </summary>
        </member>
        <member name="P:XCLNetTools.Message.MessageModel.RedirectTarget">
            <summary>
            跳转方式
            </summary>
        </member>
        <member name="P:XCLNetTools.Message.MessageModel.IsAjax">
            <summary>
            当前请求是否为ajax请求
            </summary>
        </member>
        <member name="P:XCLNetTools.Message.MessageModel.ErrorCode">
            <summary>
            错误码
            </summary>
        </member>
        <member name="P:XCLNetTools.Message.MessageModel.CustomObject">
            <summary>
            自定义输出对象
            </summary>
        </member>
        <member name="P:XCLNetTools.Message.MessageModel.IsException">
            <summary>
            是否为异常
            </summary>
        </member>
        <member name="T:XCLNetTools.Message.Log">
            <summary>
            消息日志
            </summary>
        </member>
        <member name="F:XCLNetTools.Message.Log.JsonMessageName">
            <summary>
            以json方式提示的属性名,它的下面有多个成员（如：data.JsonMessageName.Message）
            </summary>
        </member>
        <member name="F:XCLNetTools.Message.Log.LogApplicationErrorAction">
            <summary>
            记录application error的处理方法,默认直接输出json
            </summary>
        </member>
        <member name="M:XCLNetTools.Message.Log.WriteMessage(System.Object)">
            <summary>
            直接输出obj的json形式
            </summary>
            <param name="obj">要输出的对象</param>
        </member>
        <member name="M:XCLNetTools.Message.Log.WriteMessage(XCLNetTools.Message.MessageModel)">
            <summary>
            直接输出MessageModel的JSON形式（此JSON作为Log.JsonMessageName的一个属性）
            </summary>
            <param name="model">消息对象</param>
        </member>
        <member name="M:XCLNetTools.Message.Log.WriteMessage(System.String)">
            <summary>
            输出消息（json）
            MessageModel
            </summary>
            <param name="message">消息</param>
        </member>
        <member name="T:XCLNetTools.Javascript.Jscript">
            <summary>
             一些常用的Js调用
             </summary>
        </member>
        <member name="M:XCLNetTools.Javascript.Jscript.WriteJS(System.String)">
            <summary>
            输出JS代码
            </summary>
            <param name="code">js代码</param>
        </member>
        <member name="M:XCLNetTools.Javascript.Jscript.Alert(System.String)">
            <summary>
            弹出Javascript小窗口
            </summary>
            <param name="message">alter中的消息</param>
        </member>
        <member name="M:XCLNetTools.Javascript.Jscript.AlertAndRedirect(System.String,System.String)">
            <summary>
            弹出消息框并且转向到新的URL
            </summary>
            <param name="message">消息内容</param>
            <param name="toURL">要跳转的地址</param>
        </member>
        <member name="M:XCLNetTools.Javascript.Jscript.GoHistory(System.Int32)">
            <summary>
            回到历史页面
            </summary>
            <param name="value">回到历史第几个页面</param>
        </member>
        <member name="M:XCLNetTools.Javascript.Jscript.CloseWindow">
            <summary>
            关闭当前窗口
            </summary>
        </member>
        <member name="M:XCLNetTools.Javascript.Jscript.RefreshParent(System.String)">
            <summary>
            刷新父窗口
            </summary>
            <param name="url">指定的url</param>
        </member>
        <member name="M:XCLNetTools.Javascript.Jscript.RefreshOpener">
            <summary>
            刷新打开窗口
            </summary>
        </member>
        <member name="M:XCLNetTools.Javascript.Jscript.OpenWebFormSize(System.String,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            打开指定大小的新窗体
            </summary>
            <param name="url">地址</param>
            <param name="width">宽</param>
            <param name="heigth">高</param>
            <param name="top">头位置</param>
            <param name="left">左位置</param>
        </member>
        <member name="M:XCLNetTools.Javascript.Jscript.OpenWebFormSize(System.String)">
            <summary>
            打开指定url
            </summary>
            <param name="url">url地址</param>
        </member>
        <member name="M:XCLNetTools.Javascript.Jscript.ShowModalDialogWindow(System.String,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            打开指定大小位置的模式对话框
            </summary>
            <param name="webFormUrl">url地址</param>
            <param name="width">宽</param>
            <param name="height">高</param>
            <param name="top">距离上位置</param>
            <param name="left">距离左位置</param>
        </member>
        <member name="M:XCLNetTools.Javascript.Jscript.ShowModalDialogWindow(System.String,System.String)">
            <summary>
            打开指定大小位置的模式对话框
            </summary>
            <param name="webFormUrl">url地址</param>
            <param name="features">参数</param>
        </member>
        <member name="M:XCLNetTools.Javascript.Jscript.ShowModalDialogJavascript(System.String,System.String)">
            <summary>
            打开指定大小位置的模式对话框
            </summary>
            <param name="webFormUrl">url地址</param>
            <param name="features">用来描述对话框的外观等信息，可以使用以下的一个或几个，用分号“;”隔开
            1.   dialogHeight:   对话框高度，不小于100px
            2.   dialogWidth:   对话框宽度。
            3.   dialogLeft:    离屏幕左的距离。
            4.   dialogTop:    离屏幕上的距离。
            5.   center:         { yes | no | 1 | 0 } ：             是否居中，默认yes，但仍可以指定高度和宽度。
            6.   help:            {yes | no | 1 | 0 }：               是否显示帮助按钮，默认yes。
            7.   resizable:      {yes | no | 1 | 0 } [IE5+]：    是否可被改变大小。默认no。
            8.   status:         {yes | no | 1 | 0 } [IE5+]：     是否显示状态栏。默认为yes[ Modeless]或no[Modal]。
            9.   scroll:           { yes | no | 1 | 0 | on | off }：是否显示滚动条。默认为yes。
               下面几个属性是用在HTA中的，在一般的网页中一般不使用。
            10.  dialogHide:{ yes | no | 1 | 0 | on | off }：在打印或者打印预览时对话框是否隐藏。默认为no。
            11.   edge:{ sunken | raised }：指明对话框的边框样式。默认为raised。
            12.   unadorned:{ yes | no | 1 | 0 | on | off }：默认为no。
            </param>
            <returns>js代码</returns>
        </member>
        <member name="M:XCLNetTools.Javascript.Jscript.AddBodyEnd(System.Web.UI.Page,System.String)">
            <summary>
            在body结尾输出js(嵌入到ASP.NET页面的底部,恰好位于关闭元素 /form的前面)
            </summary>
            <param name="page">page对象</param>
            <param name="js">js代码</param>
        </member>
        <member name="M:XCLNetTools.Javascript.Jscript.AddBodyStart(System.Web.UI.Page,System.String)">
            <summary>
            在body开始处输出js(将 JavaScript 嵌入到页面中开始元素 form 的紧后面)
            </summary>
            <param name="page">page对象</param>
            <param name="js">js代码</param>
        </member>
        <member name="M:XCLNetTools.Javascript.Jscript.ShowConfirm(System.Web.UI.WebControls.WebControl,System.String)">
            <summary>
            控件点击 消息确认提示框
            </summary>
            <param name="control">webform服务器控件</param>
            <param name="msg">js confirm 提示语</param>
        </member>
        <member name="M:XCLNetTools.Javascript.Jscript.ShowAndRedirect(System.Web.UI.Page,System.String,System.String)">
            <summary>
            显示消息提示对话框，并进行页面跳转
            </summary>
            <param name="page">当前页面指针，一般为this</param>
            <param name="msg">提示信息</param>
            <param name="url">跳转的目标URL</param>
        </member>
        <member name="M:XCLNetTools.Javascript.Jscript.StringToConst(System.String)">
            <summary>
            将多行模式的字符串字符串转js常量
            </summary>
        </member>
        <member name="T:XCLNetTools.StringHander.Common">
             <summary>
            公用类
             </summary>
        </member>
        <member name="M:XCLNetTools.StringHander.Common.ExchangeNote(System.String)">
            <summary>
            防止HTML代码注入
            替换尖括号为html实体
            </summary>
            <param name="str">待处理的数据</param>
            <returns>处理后的数据</returns>
        </member>
        <member name="M:XCLNetTools.StringHander.Common.No_SqlHack(System.String)">
            <summary>
            防止SQL注入
            </summary>
            <param name="inputStr">输入的sql语句</param>
            <returns>过滤后的语句</returns>
        </member>
        <member name="M:XCLNetTools.StringHander.Common.NoSqlAndHtml(System.String)">
            <summary>
            过滤HTML 和SQL
            </summary>
            <param name="str">待处理的数据</param>
            <returns>处理后的数据</returns>
        </member>
        <member name="M:XCLNetTools.StringHander.Common.NoHTML(System.String)">
            <summary>
            删除所有HTML标记
            </summary>
            <param name="html">待处理的数据</param>
            <returns>处理后的数据</returns>
        </member>
        <member name="M:XCLNetTools.StringHander.Common.GetPercent(System.Nullable{System.Decimal},System.Int32)">
            <summary>
            返回百分制
            </summary>
            <param name="m">要转换的值</param>
            <param name="count">保留几位小数</param>
            <returns>百分值</returns>
        </member>
        <member name="M:XCLNetTools.StringHander.Common.GetSizeStringByKB(System.Decimal,System.Int32)">
            <summary>
            返回文件大小KB,MB,GB,TB,PB形式的表示
            </summary>
            <param name="size">kb</param>
            <param name="count">保留几位小数</param>
            <returns>如：5.5GB</returns>
        </member>
        <member name="M:XCLNetTools.StringHander.Common.ResponseClearWrite(System.String)">
            <summary>
            输出
            </summary>
            <param name="str">待输出的内容</param>
        </member>
        <member name="M:XCLNetTools.StringHander.Common.GetStaticResourceConfig(System.String)">
            <summary>
            从xml中加载静态资源配置信息
            </summary>
            <param name="xmlPath">xml路径</param>
            <returns>配置对象</returns>
        </member>
        <member name="M:XCLNetTools.StringHander.Common.GetStaticResourceUrl(XCLNetTools.Entity.StaticResourceConfig,System.Collections.Generic.List{System.String})">
            <summary>
            获取静态资源文件引用
            </summary>
            <param name="config">配置</param>
            <param name="nameList">指定输出项，若为null，则输出所有</param>
            <returns>引用的地址</returns>
        </member>
        <member name="M:XCLNetTools.StringHander.Common.GetSubString(System.String,System.Int32,System.String)">
            <summary>
            截取指定长度的字符串，一个汉字算两个字符
            </summary>
            <param name="str">源字符串</param>
            <param name="length">长度</param>
            <param name="s">需要替代的字符串</param>
            <returns>字符串</returns>
        </member>
        <member name="M:XCLNetTools.StringHander.Common.GetQuanJiao(System.String)">
            <summary>
            半角转全角
            </summary>
            <param name="BJstr">半角</param>
            <returns>全角</returns>
        </member>
        <member name="M:XCLNetTools.StringHander.Common.GetBanJiao(System.String)">
            <summary>
            全角转半角
            </summary>
            <param name="QJstr">全角</param>
            <returns>半角</returns>
        </member>
        <member name="M:XCLNetTools.StringHander.Common.ReplaceQuoteENToCN(System.String)">
            <summary>
            将指定字符串中的英文引号替换为中文引号（中文引号没有考虑正反）
            </summary>
            <param name="str">待处理字符串</param>
            <returns>处理后的值</returns>
        </member>
        <member name="M:XCLNetTools.StringHander.Common.ReplaceQuoteToHTML(System.String)">
            <summary>
            将指定字符串中的英文引号替换为html引号实体
            </summary>
            <param name="str">待处理字符串</param>
            <returns>处理后的值</returns>
        </member>
        <member name="M:XCLNetTools.StringHander.Common.RemoveQuote(System.String)">
            <summary>
            移除指定字符串中的英文引号
            </summary>
            <param name="str">待处理字符串</param>
            <returns>处理后的值</returns>
        </member>
        <member name="M:XCLNetTools.StringHander.Common.TrimEnd(System.String,System.String)">
            <summary>
            删除结尾的字符串
            </summary>
            <param name="str">待处理字符串</param>
            <param name="cutStr">要删除的字符串</param>
            <returns>处理后的值</returns>
        </member>
        <member name="M:XCLNetTools.StringHander.Common.TrimStart(System.String,System.String)">
            <summary>
            删除开头的字符串
            </summary>
            <param name="str">待处理字符串</param>
            <param name="cutStr">要删除的字符串</param>
            <returns>处理后的值</returns>
        </member>
        <member name="P:XCLNetTools.StringHander.Common.RootURL">
            <summary>
            网站根路径，如:"/"
            注：末尾带'/'
            </summary>
        </member>
        <member name="P:XCLNetTools.StringHander.Common.RootUri">
            <summary>
            网站根Uri，如:"//www.xcl.com:2156/ or //www.xcl.com:2156/VirtualWeb/"
            注：末尾带'/'
            </summary>
        </member>
        <member name="M:XCLNetTools.StringHander.Common.GetRootUri(XCLNetTools.Enum.CommonEnum.HttpTypeEnum)">
            <summary>
            将网站根Uri转为开头带http://或https://的url地址
            如:"http://www.xcl.com:2156/ or https://www.xcl.com:2156/VirtualWeb/"
            </summary>
            <param name="httpType">http类型，默认为http://</param>
            <returns>处理后的url</returns>
        </member>
        <member name="M:XCLNetTools.StringHander.Common.ToHttpUrl(System.String,XCLNetTools.Enum.CommonEnum.HttpTypeEnum)">
            <summary>
            将http开头协议不规则的url字符串转化为指定的http://或https://形式的url
            </summary>
            <param name="url">要转换的url</param>
            <param name="httpType">http类型，默认为http://</param>
            <returns>转换后的url</returns>
        </member>
        <member name="M:XCLNetTools.StringHander.Common.GetStartEndNum(System.Int32,System.Int32,System.Int32[])">
            <summary>
            指定起始数字，返回这些数据的List
            </summary>
            <param name="startNum">开始数字</param>
            <param name="endNum">结束数字</param>
            <param name="step">步长,默认为1</param>
            <returns>如：(0,5,1),则返回0,1,2,3,4,5的list</returns>
        </member>
        <member name="M:XCLNetTools.StringHander.Common.IsAjax">
            <summary>
            判断当前请求是否为ajax请求
            </summary>
            <returns>是否为ajax请求</returns>
        </member>
        <member name="M:XCLNetTools.StringHander.Common.IsCanConvert``1(System.Object)">
            <summary>
            判断指定值是否可以转换为指定的类型
            </summary>
            <typeparam name="T">是否可以转换为此类型</typeparam>
            <param name="val">需要判断的值</param>
            <returns>判断结果</returns>
        </member>
        <member name="T:XCLNetTools.StringHander.DateHelper">
            <summary>
            日期时间处理相关
            </summary>
        </member>
        <member name="M:XCLNetTools.StringHander.DateHelper.DaysLeftInMonth(System.DateTime)">
            <summary>
            返回指定日期到该日期所在月结束的剩余天数
            </summary>
            <param name="date">要计算的时间</param>
            <returns>剩余天数</returns>
        </member>
        <member name="M:XCLNetTools.StringHander.DateHelper.DaysLeftInYear(System.DateTime)">
            <summary>
            返回指定日期到该日期所在年结束的剩余天数
            </summary>
            <param name="date">要计算的时间</param>
            <returns>剩余天数</returns>
        </member>
        <member name="M:XCLNetTools.StringHander.DateHelper.DaysLeftInWeek(System.DateTime)">
            <summary>
            返回指定日期到所在周结束的剩余天数
            </summary>
            <param name="date">要计算的时间</param>
            <returns>剩余天数</returns>
        </member>
        <member name="M:XCLNetTools.StringHander.DateHelper.FromUnixTime(System.Int64)">
            <summary>
            将Unix（long）转为DateTime
            </summary>
            <param name="date">Unix(也就是1970-1-1为起点的时间)</param>
            <returns>DateTime</returns>
        </member>
        <member name="M:XCLNetTools.StringHander.DateHelper.ToUnix(System.DateTime)">
            <summary>
            将DateTime转为Unix(也就是1970-1-1为起点的时间)
            </summary>
            <param name="date">要转换的时间</param>
            <returns>Unix时间</returns>
        </member>
        <member name="M:XCLNetTools.StringHander.DateHelper.GetTimeString(System.DateTime,System.DateTime)">
            <summary>
            获取两个时间的时间间隔，如：“小时:分钟:秒”
            </summary>
            <param name="dtStart">开始时间</param>
            <param name="dtEnd">结束时间</param>
            <returns>时间字符串，如："23：59：59"</returns>
        </member>
        <member name="M:XCLNetTools.StringHander.DateHelper.GetTimeInterval(System.DateTime,System.DateTime)">
            <summary>
            计算日期间隔
            </summary>
            <param name="d1">要参与计算的其中一个日期</param>
            <param name="d2">要参与计算的另一个日期</param>
            <returns>一个表示日期间隔的TimeSpan类型</returns>
        </member>
        <member name="M:XCLNetTools.StringHander.DateHelper.GetTimeInterval(System.DateTime,System.DateTime,XCLNetTools.Enum.CommonEnum.DiffResultFormat)">
            <summary>
            计算日期间隔
            </summary>
            <param name="d1">要参与计算的其中一个日期</param>
            <param name="d2">要参与计算的另一个日期</param>
            <param name="drf">决定返回值形式的枚举</param>
            <returns>一个代表年月日的int数组，具体数组长度与枚举参数drf有关</returns>
        </member>
        <member name="M:XCLNetTools.StringHander.DateHelper.GetTimeSub(System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.String,System.String)">
            <summary>
            返回指定时间段内不包括某一时间段的时间差（以小时为单位）
            </summary>
            <param name="start">开始时间</param>
            <param name="end">结束时间</param>
            <param name="workStart">排除的时间段（开始）如:"08:00"</param>
            <param name="workEnd">排除的时间段（结束）如:"18:00"</param>
            <returns>decimal（小时）</returns>
        </member>
        <member name="M:XCLNetTools.StringHander.DateHelper.GetTimeSubList(System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.String,System.String)">
            <summary>
            返回指定时间段内拆分后的的时间差（以小时为单位）的list
            </summary>
            <param name="start">开始时间</param>
            <param name="end">结束时间</param>
            <param name="workStart">排除的时间段（开始）如:"08:00"</param>
            <param name="workEnd">排除的时间段（结束）如:"18:00"</param>
            <returns>decimal（小时）</returns>
        </member>
        <member name="M:XCLNetTools.StringHander.DateHelper.GetTimeStr(System.Decimal,System.Int32)">
            <summary>
            返回汉字表示的时间（如1年3个月5天3小时）
            </summary>
            <param name="hour">小时</param>
            <param name="oneDayHour">一天几小时（灵活，自行指定，默认为24小时）</param>
            <returns>汉字表示的时间</returns>
        </member>
        <member name="M:XCLNetTools.StringHander.DateHelper.GetWeek(System.DateTime)">
            <summary>
            返回星期几，如："星期一"
            </summary>
            <param name="date">时间</param>
            <returns>星期几的字符串</returns>
        </member>
        <member name="M:XCLNetTools.StringHander.DateHelper.GetWeekOfYear(System.DateTime)">
            <summary>
            获取某一日期是该年中的第几周
            </summary>
            <param name="dt">日期</param>
            <returns> 该日期在该年中的周数 </returns>
        </member>
        <member name="M:XCLNetTools.StringHander.DateHelper.GetWeekAmount(System.Int32)">
            <summary>
            获取某一年有多少周
            </summary>
            <param name="year">年份 </param>
            <returns>该年周数</returns>
        </member>
        <member name="M:XCLNetTools.StringHander.DateHelper.ToCNString(System.DateTime)">
            <summary>
            将数字日期格式转为中文日期格式
            如：2013-01-01=》二〇一三年一月一日
            </summary>
            <param name="dt">日期</param>
            <returns>中文汉字的日期</returns>
        </member>
        <member name="M:XCLNetTools.StringHander.DateHelper.GetBeforeDateTypeDateTime(XCLNetTools.Enum.CommonEnum.BeforeDateTypeEnum)">
            <summary>
            获取BeforeDateTypeEnum所对应的时间
            （如果枚举为All,则返回DateTime.MaxValue）
            </summary>
            <param name="em">BeforeDateTypeEnum枚举</param>
            <returns>枚举对应的时间</returns>
        </member>
        <member name="M:XCLNetTools.StringHander.DateHelper.FirstDayOfMonth(System.DateTime)">
            <summary>
            返回指定日期所在月的第一天
            </summary>
            <param name="date">日期</param>
            <returns>结果日期</returns>
        </member>
        <member name="M:XCLNetTools.StringHander.DateHelper.LastDayOfMonth(System.DateTime)">
            <summary>
            返回指定日期所在月的最后一天(包含时间部分)（如：2012-01-02 23:59:59）
            </summary>
            <param name="dt">日期</param>
            <returns>结果日期</returns>
        </member>
        <member name="M:XCLNetTools.StringHander.DateHelper.GetStartTimeEndTimeByYearMonth(System.String,System.Int32)">
            <summary>
            根据指定年月和向前推移的月数，返回起始时间
            如：传入("2012-09",2)，则返回{2012-08-01,2012-09-01}
            </summary>
            <param name="yearMonth">如：2012-09</param>
            <param name="monthCount">如：2</param>
            <returns>如：{2012-08-01,2012-09-01}</returns>
        </member>
        <member name="M:XCLNetTools.StringHander.DateHelper.GetDateTimeWhereByStartEndTime(System.String,System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
            <summary>
            返回指定条件名和起止时间的最终条件字符串（包含等号）
            如：("aaa",'2012-01-01 00:10:00',null)="aaa>='2012-01-01 00:10:00'"(无小于等于，若end不为null，则有小于等于)
            </summary>
            <param name="fieldName">条件名</param>
            <param name="start">开始时间</param>
            <param name="end">结束时间</param>
            <returns>条件字符串</returns>
        </member>
        <member name="M:XCLNetTools.StringHander.DateHelper.GetDateSpan(System.DateTime)">
            <summary>
            获取指定日期与当前日期比较区间汉字，如：“2天前”
            </summary>
            <param name="date">日期</param>
            <returns>区间汉字</returns>
        </member>
        <member name="M:XCLNetTools.StringHander.DateHelper.ConvertJsonDateToDateTime(System.String)">
            <summary>
            将Json序列化的时间由/Date(1294499956278)/转为DateTime? .
            </summary>
            <param name="str">json时间</param>
            <returns>结果值</returns>
        </member>
        <member name="M:XCLNetTools.StringHander.DateHelper.GetStartEndDateTimeNullable(System.String,System.String)">
            <summary>
            将字符串转换为可空的日期类型，如果字符串不是有效的日期格式，则返回null
            </summary>
            <param name="s">进行转换的字符串</param>
            <param name="type">"start"：将此时间设置为yyyy-MM-dd 00:00:00；"end"：yyyy-MM-dd 23:59:59</param>
            <returns>结果值</returns>
        </member>
        <member name="M:XCLNetTools.StringHander.DateHelper.GetDateTimeWithMinValue(System.String)">
            <summary>
            转换为DateTime,若为null或转换失败，则取DateTime.MinValue
            </summary>
            <param name="str">待转换的字符串</param>
            <returns>转换后的结果</returns>
        </member>
        <member name="M:XCLNetTools.StringHander.DateHelper.GetSecondByTicks(System.Int64)">
            <summary>
            把ticks转为秒
            注：1ticks=100毫微秒=100*10^(-3)*10^(-6)秒=10^(-7)秒
            </summary>
            <param name="ticks">时间刻度ticks值</param>
            <returns>秒</returns>
        </member>
        <member name="T:XCLNetTools.StringHander.FormHelper">
            <summary>
            form表单相关
            </summary>
        </member>
        <member name="M:XCLNetTools.StringHander.FormHelper.GetQueryOrFormString(System.String,System.String)">
            <summary>
            获取request参数，先取querystring,若没有，再取formstring，若没有，则返回defaultValue参数值（该参数值默认为""）
            </summary>
            <param name="name">参数名</param>
            <param name="defaultValue">当获取不到参数值时，该方法返回的值，默认为空字符串""</param>
            <returns>参数值</returns>
        </member>
        <member name="M:XCLNetTools.StringHander.FormHelper.GetQueryOrFormStringArray(System.String)">
            <summary>
            获取request参数数组，先取querystring,若没有，再取formstring，若没有，则为null
            </summary>
            <param name="name">参数名</param>
            <returns>参数值数组</returns>
        </member>
        <member name="M:XCLNetTools.StringHander.FormHelper.GetString(System.String)">
            <summary>
            获取string参数，如果没有此参数，则返回""
            </summary>
            <param name="name">参数名</param>
            <returns>参数值</returns>
        </member>
        <member name="M:XCLNetTools.StringHander.FormHelper.GetStringNull(System.String,System.String)">
            <summary>
            获取string参数，如果没有此参数，则返回defaultValue(默认为null)
            </summary>
            <param name="name">参数名</param>
            <param name="defaultValue">默认值</param>
            <returns>参数值</returns>
        </member>
        <member name="M:XCLNetTools.StringHander.FormHelper.GetStringArray(System.String)">
            <summary>
            获取数组参数
            </summary>
            <param name="name">参数名</param>
            <returns>参数值</returns>
        </member>
        <member name="M:XCLNetTools.StringHander.FormHelper.GetByteNull(System.String)">
            <summary>
            获取byte?参数
            </summary>
            <param name="name">参数名</param>
            <returns>参数值</returns>
        </member>
        <member name="M:XCLNetTools.StringHander.FormHelper.GetByteNull(System.String,System.Nullable{System.Byte})">
            <summary>
            获取byte?参数，默认defaultValue
            </summary>
            <param name="name">参数名</param>
            <param name="defaultValue">默认值</param>
            <returns>参数值</returns>
        </member>
        <member name="M:XCLNetTools.StringHander.FormHelper.GetByte(System.String)">
            <summary>
            获取byte参数，默认0
            </summary>
            <param name="name">参数名</param>
            <returns>参数值</returns>
        </member>
        <member name="M:XCLNetTools.StringHander.FormHelper.GetByte(System.String,System.Byte)">
            <summary>
            获取byte参数，默认defaultValue
            </summary>
            <param name="name">参数名</param>
            <param name="defaultValue">默认值</param>
            <returns>参数值</returns>
        </member>
        <member name="M:XCLNetTools.StringHander.FormHelper.GetByteList(System.String)">
            <summary>
            获取byte参数数组
            </summary>
            <param name="name">参数名</param>
            <returns>参数值</returns>
        </member>
        <member name="M:XCLNetTools.StringHander.FormHelper.GetIntNull(System.String)">
            <summary>
            获取int?参数
            </summary>
            <param name="name">参数名</param>
            <returns>参数值</returns>
        </member>
        <member name="M:XCLNetTools.StringHander.FormHelper.GetIntNull(System.String,System.Nullable{System.Int32})">
            <summary>
            获取int?参数，默认defaultValue
            </summary>
            <param name="name">参数名</param>
            <param name="defaultValue">默认值</param>
            <returns>参数值</returns>
        </member>
        <member name="M:XCLNetTools.StringHander.FormHelper.GetInt(System.String)">
            <summary>
            获取int参数，默认0
            </summary>
            <param name="name">参数名</param>
            <returns>参数值</returns>
        </member>
        <member name="M:XCLNetTools.StringHander.FormHelper.GetInt(System.String,System.Int32)">
            <summary>
            获取int参数，默认defaultValue
            </summary>
            <param name="name">参数名</param>
            <param name="defaultValue">默认值</param>
            <returns>参数值</returns>
        </member>
        <member name="M:XCLNetTools.StringHander.FormHelper.GetIntList(System.String)">
            <summary>
            获取int参数数组
            </summary>
            <param name="name">参数名</param>
            <returns>参数值</returns>
        </member>
        <member name="M:XCLNetTools.StringHander.FormHelper.GetShortNull(System.String)">
            <summary>
            获取short?参数
            </summary>
            <param name="name">参数名</param>
            <returns>参数值</returns>
        </member>
        <member name="M:XCLNetTools.StringHander.FormHelper.GetShortNull(System.String,System.Nullable{System.Int16})">
            <summary>
            获取short?参数，默认defaultValue
            </summary>
            <param name="name">参数名</param>
            <param name="defaultValue">默认值</param>
            <returns>参数值</returns>
        </member>
        <member name="M:XCLNetTools.StringHander.FormHelper.GetShort(System.String)">
            <summary>
            获取short参数，默认0
            </summary>
            <param name="name">参数名</param>
            <returns>参数值</returns>
        </member>
        <member name="M:XCLNetTools.StringHander.FormHelper.GetShort(System.String,System.Int16)">
            <summary>
            获取short参数，默认defaultValue
            </summary>
            <param name="name">参数名</param>
            <param name="defaultValue">默认值</param>
            <returns>参数值</returns>
        </member>
        <member name="M:XCLNetTools.StringHander.FormHelper.GetShortList(System.String)">
            <summary>
            获取short参数数组
            </summary>
            <param name="name">参数名</param>
            <returns>参数值</returns>
        </member>
        <member name="M:XCLNetTools.StringHander.FormHelper.GetLongNull(System.String)">
            <summary>
            获取Long?参数
            </summary>
            <param name="name">参数名</param>
            <returns>参数值</returns>
        </member>
        <member name="M:XCLNetTools.StringHander.FormHelper.GetLongNull(System.String,System.Nullable{System.Int64})">
            <summary>
            获取Long?参数，默认defaultValue
            </summary>
            <param name="name">参数名</param>
            <param name="defaultValue">默认值</param>
            <returns>参数值</returns>
        </member>
        <member name="M:XCLNetTools.StringHander.FormHelper.GetLong(System.String)">
            <summary>
            获取long参数，默认0
            </summary>
            <param name="name">参数名</param>
            <returns>参数值</returns>
        </member>
        <member name="M:XCLNetTools.StringHander.FormHelper.GetLong(System.String,System.Int64)">
            <summary>
            获取long参数，默认defaultValue
            </summary>
            <param name="name">参数名</param>
            <param name="defaultValue">默认值</param>
            <returns>参数值</returns>
        </member>
        <member name="M:XCLNetTools.StringHander.FormHelper.GetLongList(System.String)">
            <summary>
            获取long参数数组
            </summary>
            <param name="name">参数名</param>
            <returns>参数值</returns>
        </member>
        <member name="M:XCLNetTools.StringHander.FormHelper.GetFloatNull(System.String)">
            <summary>
            获取float?参数
            </summary>
            <param name="name">参数名</param>
            <returns>参数值</returns>
        </member>
        <member name="M:XCLNetTools.StringHander.FormHelper.GetFloatNull(System.String,System.Nullable{System.Single})">
            <summary>
            获取float?参数，默认defaultValue
            </summary>
            <param name="name">参数名</param>
            <param name="defaultValue">默认值</param>
            <returns>参数值</returns>
        </member>
        <member name="M:XCLNetTools.StringHander.FormHelper.GetFloat(System.String)">
            <summary>
            获取float参数，默认0
            </summary>
            <param name="name">参数名</param>
            <returns>参数值</returns>
        </member>
        <member name="M:XCLNetTools.StringHander.FormHelper.GetFloat(System.String,System.Single)">
            <summary>
            获取float参数，默认defaultValue
            </summary>
            <param name="name">参数名</param>
            <param name="defaultValue">默认值</param>
            <returns>参数值</returns>
        </member>
        <member name="M:XCLNetTools.StringHander.FormHelper.GetFloatList(System.String)">
            <summary>
            获取float参数数组
            </summary>
            <param name="name">参数名</param>
            <returns>参数值</returns>
        </member>
        <member name="M:XCLNetTools.StringHander.FormHelper.GetDoubleNull(System.String)">
            <summary>
            获取double?参数
            </summary>
            <param name="name">参数名</param>
            <returns>参数值</returns>
        </member>
        <member name="M:XCLNetTools.StringHander.FormHelper.GetDoubleNull(System.String,System.Nullable{System.Double})">
            <summary>
            获取double?参数，默认defaultValue
            </summary>
            <param name="name">参数名</param>
            <param name="defaultValue">默认值</param>
            <returns>参数值</returns>
        </member>
        <member name="M:XCLNetTools.StringHander.FormHelper.GetDouble(System.String)">
            <summary>
            获取double参数，默认0
            </summary>
            <param name="name">参数名</param>
            <returns>参数值</returns>
        </member>
        <member name="M:XCLNetTools.StringHander.FormHelper.GetDouble(System.String,System.Double)">
            <summary>
            获取double参数，默认defaultValue
            </summary>
            <param name="name">参数名</param>
            <param name="defaultValue">默认值</param>
            <returns>参数值</returns>
        </member>
        <member name="M:XCLNetTools.StringHander.FormHelper.GetDoubleList(System.String)">
            <summary>
            获取double参数数组
            </summary>
            <param name="name">参数名</param>
            <returns>参数值</returns>
        </member>
        <member name="M:XCLNetTools.StringHander.FormHelper.GetBoolNull(System.String)">
            <summary>
            获取bool?参数
            </summary>
            <param name="name">参数名</param>
            <returns>参数值</returns>
        </member>
        <member name="M:XCLNetTools.StringHander.FormHelper.GetBoolNull(System.String,System.Nullable{System.Boolean})">
            <summary>
            获取bool?参数，默认defaultValue
            </summary>
            <param name="name">参数名</param>
            <param name="defaultValue">默认值</param>
            <returns>参数值</returns>
        </member>
        <member name="M:XCLNetTools.StringHander.FormHelper.GetBool(System.String)">
            <summary>
            获取bool参数，默认false
            </summary>
            <param name="name">参数名</param>
            <returns>参数值</returns>
        </member>
        <member name="M:XCLNetTools.StringHander.FormHelper.GetBool(System.String,System.Boolean)">
            <summary>
            获取bool参数，默认defaultValue
            </summary>
            <param name="name">参数名</param>
            <param name="defaultValue">默认值</param>
            <returns>参数值</returns>
        </member>
        <member name="M:XCLNetTools.StringHander.FormHelper.GetBoolList(System.String)">
            <summary>
            获取bool参数数组
            </summary>
            <param name="name">参数名</param>
            <returns>参数值</returns>
        </member>
        <member name="M:XCLNetTools.StringHander.FormHelper.GetDecimalNull(System.String)">
            <summary>
            获取decimal?参数
            </summary>
            <param name="name">参数名</param>
            <returns>参数值</returns>
        </member>
        <member name="M:XCLNetTools.StringHander.FormHelper.GetDecimalNull(System.String,System.Nullable{System.Decimal})">
            <summary>
            获取decimal?参数，默认defaultValue
            </summary>
            <param name="name">参数名</param>
            <param name="defaultValue">默认值</param>
            <returns>参数值</returns>
        </member>
        <member name="M:XCLNetTools.StringHander.FormHelper.GetDecimal(System.String)">
            <summary>
            获取decimal参数，默认0
            </summary>
            <param name="name">参数名</param>
            <returns>参数值</returns>
        </member>
        <member name="M:XCLNetTools.StringHander.FormHelper.GetDecimal(System.String,System.Decimal)">
            <summary>
            获取decimal参数，默认defaultValue
            </summary>
            <param name="name">参数名</param>
            <param name="defaultValue">默认值</param>
            <returns>参数值</returns>
        </member>
        <member name="M:XCLNetTools.StringHander.FormHelper.GetDecimalList(System.String)">
            <summary>
            获取decimal参数数组
            </summary>
            <param name="name">参数名</param>
            <returns>参数值</returns>
        </member>
        <member name="M:XCLNetTools.StringHander.FormHelper.GetDateTimeNull(System.String)">
            <summary>
            获取DateTime?参数
            </summary>
            <param name="name">参数名</param>
            <returns>参数值</returns>
        </member>
        <member name="M:XCLNetTools.StringHander.FormHelper.GetDateTimeNull(System.String,System.Nullable{System.DateTime})">
            <summary>
            获取DateTime?参数，默认defaultValue
            </summary>
            <param name="name">参数名</param>
            <param name="defaultValue">默认值</param>
            <returns>参数值</returns>
        </member>
        <member name="M:XCLNetTools.StringHander.FormHelper.GetDateTime(System.String)">
            <summary>
            获取DateTime参数，默认'0001/1/1 0:00:00'
            </summary>
            <param name="name">参数名</param>
            <returns>参数值</returns>
        </member>
        <member name="M:XCLNetTools.StringHander.FormHelper.GetDateTime(System.String,System.DateTime)">
            <summary>
            获取DateTime参数，默认defaultValue
            </summary>
            <param name="name">参数名</param>
            <param name="defaultValue">默认值</param>
            <returns>参数值</returns>
        </member>
        <member name="M:XCLNetTools.StringHander.FormHelper.GetDateTimeList(System.String)">
            <summary>
            获取DateTime参数数组
            </summary>
            <param name="name">参数名</param>
            <returns>参数值</returns>
        </member>
        <member name="M:XCLNetTools.StringHander.FormHelper.GetFromParamsValudByPre(System.String)">
            <summary>
            根据参数的name前缀，获取它的value数组
            </summary>
            <param name="preName">参数name值的前缀</param>
            <returns>参数值</returns>
        </member>
        <member name="M:XCLNetTools.StringHander.FormHelper.CreateHiddenHtml(System.Collections.Generic.List{XCLNetTools.Entity.TextValue})">
            <summary>
            把lst中的项生成input hidden标签
            </summary>
            <param name="lst">Key:hidden的name名字；Value:hidden的value</param>
            <returns>hidden字符串</returns>
        </member>
        <member name="M:XCLNetTools.StringHander.FormHelper.CreateHiddenHtml(System.String,System.String)">
            <summary>
            返回hidden
            </summary>
            <param name="name">hidden名</param>
            <param name="value">hidden值</param>
            <returns>hidden字符串</returns>
        </member>
        <member name="M:XCLNetTools.StringHander.FormHelper.GetQuerySerializeString">
            <summary>
            获取QueryString的参数序列化字符串（也就是a=b&amp;c=d的形式）
            </summary>
            <returns>参数序列化的结值</returns>
        </member>
        <member name="M:XCLNetTools.StringHander.FormHelper.GetFromSerializeString">
            <summary>
            获取Form的参数序列化字符串（也就是a=b&amp;c=d的形式）
            </summary>
            <returns>参数序列化的结值</returns>
        </member>
        <member name="M:XCLNetTools.StringHander.FormHelper.GetQueryFromSerializeString">
            <summary>
            获取QueryString和Form的参数序列化字符串（也就是a=b&amp;c=d的形式）
            </summary>
            <returns>参数序列化的结值</returns>
        </member>
        <member name="T:XCLNetTools.StringHander.PageValid">
            <summary>
            页面数据校验类
            </summary>
        </member>
        <member name="M:XCLNetTools.StringHander.PageValid.IsPhone(System.String)">
            <summary>
            是否为手机号
            </summary>
            <param name="inputData">待判断的值</param>
            <returns>判断结果</returns>
        </member>
        <member name="M:XCLNetTools.StringHander.PageValid.IsNumber(System.String)">
            <summary>
            是否为纯数字（不带正负号）
            </summary>
            <param name="inputData">待判断的值</param>
            <returns>判断结果</returns>
        </member>
        <member name="M:XCLNetTools.StringHander.PageValid.IsNumberSign(System.String)">
            <summary>
            是否数字（可带正负号）
            </summary>
            <param name="inputData">待判断的值</param>
            <returns>判断结果</returns>
        </member>
        <member name="M:XCLNetTools.StringHander.PageValid.IsDecimal(System.String)">
            <summary>
            是否是浮点数（不带正负）
            </summary>
            <param name="inputData">待判断的值</param>
            <returns>判断结果</returns>
        </member>
        <member name="M:XCLNetTools.StringHander.PageValid.IsDecimalSign(System.String)">
            <summary>
            是否是浮点数（可带正负号）
            </summary>
            <param name="inputData">待判断的值</param>
            <returns>判断结果</returns>
        </member>
        <member name="M:XCLNetTools.StringHander.PageValid.IsHasCHZN(System.String)">
            <summary>
            检测是否有中文字符
            </summary>
            <param name="inputData">待判断的值</param>
            <returns>判断结果</returns>
        </member>
        <member name="M:XCLNetTools.StringHander.PageValid.IsEmail(System.String)">
            <summary>
            是否是email
            </summary>
            <param name="inputData">待判断的值</param>
            <returns>判断结果</returns>
        </member>
        <member name="M:XCLNetTools.StringHander.PageValid.IsDateTime(System.String)">
            <summary>
            日期格式字符串判断
            </summary>
            <param name="str">待判断的值</param>
            <returns>判断结果</returns>
        </member>
        <member name="M:XCLNetTools.StringHander.PageValid.IsURL(System.String)">
            <summary>
            是否为URL地址
            </summary>
            <param name="inputData">待判断的值</param>
            <returns>判断结果</returns>
        </member>
        <member name="T:XCLNetTools.StringHander.RandomHelper">
            <summary>
            随机数操作类
            </summary>
        </member>
        <member name="M:XCLNetTools.StringHander.RandomHelper.GetRandomValue(System.Int32,System.Int32)">
            <summary>
            生成指定范围内的随机数（不重复）
            </summary>
            <param name="minValue">最小值（包含）</param>
            <param name="maxValue">最大值（不包含）</param>
            <returns>结果值</returns>
        </member>
        <member name="M:XCLNetTools.StringHander.RandomHelper.GenerateIdWithGuid">
            <summary>
            将GUID的哈希数作为Random的种子，然后生成一个非负随机数
            例如：1024588704
            </summary>
            <returns>结果值</returns>
        </member>
        <member name="M:XCLNetTools.StringHander.RandomHelper.GenerateId">
            <summary>
            根据GUID生成Int（有符号）
            例如：2069396417
            </summary>
            <returns>结果值</returns>
        </member>
        <member name="M:XCLNetTools.StringHander.RandomHelper.GenerateStringId">
            <summary>
            根据guid生成字符串(16位)
            例如：aded0a2611f8aa4a
            </summary>
            <returns>结果值</returns>
        </member>
        <member name="M:XCLNetTools.StringHander.RandomHelper.GenerateRandom(System.Int32,System.Boolean)">
            <summary>
            随机生成数字和字母组合
            </summary>
            <param name="len">长度</param>
            <param name="isIgnoreCase">是否区分大小写，默认为:false</param>
            <returns>结果值</returns>
        </member>
        <member name="M:XCLNetTools.StringHander.RandomHelper.GenerateRandomToChars(System.Int32,System.Boolean)">
            <summary>
            随机生成只有字母的组合
            </summary>
            <param name="len">长度</param>
            <param name="isIgnoreCase">是否区分大小写，默认为:false</param>
            <returns>结果值</returns>
        </member>
        <member name="M:XCLNetTools.StringHander.RandomHelper.GetGuidString(System.Int32)">
            <summary>
            截取GUID的前几个字符
            </summary>
            <param name="len">指定的长度</param>
            <returns>结果值</returns>
        </member>
        <member name="T:XCLNetTools.StringHander.Rmb">
            <summary>
            Rmb 的摘要说明。
            </summary>
        </member>
        <member name="M:XCLNetTools.StringHander.Rmb.ConvertToUpper(System.Decimal)">
            <summary>
            转换人民币大小金额
            </summary>
            <param name="num">金额</param>
            <returns>返回大写形式</returns>
        </member>
        <member name="T:XCLNetTools.StringHander.UrlOper">
            <summary>
            URL的操作类
            </summary>
        </member>
        <member name="M:XCLNetTools.StringHander.UrlOper.AddParam(System.String,System.String,System.String)">
            <summary>
            添加URL参数
            </summary>
            <param name="url">url</param>
            <param name="name">参数名</param>
            <param name="value">参数值</param>
            <returns>新的url</returns>
        </member>
        <member name="M:XCLNetTools.StringHander.UrlOper.AddParam(System.String,System.Collections.Specialized.NameValueCollection)">
            <summary>
            添加URL参数
            </summary>
            <param name="url">url</param>
            <param name="param">参数集合</param>
            <returns>新的url</returns>
        </member>
        <member name="M:XCLNetTools.StringHander.UrlOper.UpdateParam(System.String,System.String,System.String)">
            <summary>
            更新URL参数
            </summary>
            <param name="url">url</param>
            <param name="paramName">参数名</param>
            <param name="value">参数值</param>
            <returns>新的url</returns>
        </member>
        <member name="M:XCLNetTools.StringHander.UrlOper.RemoveParam(System.String,System.String)">
            <summary>
            删除url参数
            </summary>
            <param name="url">url</param>
            <param name="paramName">参数名</param>
            <returns>新的url</returns>
        </member>
        <member name="M:XCLNetTools.StringHander.UrlOper.ParseUrl(System.String,System.String@,System.Collections.Specialized.NameValueCollection@)">
            <summary>
            分析 url 字符串中的参数信息
            </summary>
            <param name="url">输入的 URL</param>
            <param name="baseUrl">输出 URL 的基础部分</param>
            <param name="nvc">输出分析后得到的 (参数名,参数值) 的集合</param>
        </member>
        <member name="M:XCLNetTools.StringHander.UrlOper.GetUrlError(System.String)">
             <summary>
             获取指定URL的请求状态：
            200 - 确定。客户端请求已成功。
            201 - 已创建。
            202 - 已接受。
            400 - 错误的请求
            401 - 访问被拒绝
            403 - 禁止访问
            404 - 未找到
            405 - 用来访问本页面的 HTTP 谓词不被允许（方法不被允许）
            406 - 客户端浏览器不接受所请求页面的 MIME 类型。
            407 - 要求进行代理身份验证。
            412 - 前提条件失败。
            413 – 请求实体太大。
            414 - 请求 URI 太长。
            415 – 不支持的媒体类型。
            416 – 所请求的范围无法满足。
            417 – 执行失败。
            423 – 锁定的错误
            500 - 内部服务器错误。
            501 - 页眉值指定了未实现的配置。
            502 - Web 服务器用作网关或代理服务器时收到了无效响应。
            503 - 服务不可用。这个错误代码为 IIS 6.0 所专用。
            504 - 网关超时。
            505 - HTTP 版本不受支持。
            </summary>
            <param name="curl">要请求的URL</param>
            <returns>状态码</returns>
        </member>
        <member name="T:XCLNetTools.XML.ConfigClass">
            <summary>
            Web.config 操作类
            </summary>
        </member>
        <member name="F:XCLNetTools.XML.ConfigClass.getConfigFilePath">
            <summary>
            取得置文件路径和名称
            </summary>
        </member>
        <member name="F:XCLNetTools.XML.ConfigClass.appSettingsName">
            <summary>
            config中的appsetting的节点名
            </summary>
        </member>
        <member name="P:XCLNetTools.XML.ConfigClass.LoadConfigDocument">
            <summary>
            读入配置文件
            </summary>
        </member>
        <member name="M:XCLNetTools.XML.ConfigClass.GetConfigurationSecion(System.String)">
            <summary>
            返回配置节
            </summary>
            <param name="sectionName">节点名，如【appSettings】</param>
            <returns>该配置节点对象</returns>
        </member>
        <member name="M:XCLNetTools.XML.ConfigClass.GetConfigString(System.String,System.String)">
            <summary>
            取得配置文件中的字符串KEY
            </summary>
            <param name="sectionName">节点名称（为空时，默认为"appSettings"）</param>
            <param name="key">KEY名</param>
            <returns>返回KEY值</returns>
        </member>
        <member name="M:XCLNetTools.XML.ConfigClass.GetConfigString(System.String)">
            <summary>
            取得appSettings中的配置节
            </summary>
            <param name="key">key名</param>
            <returns>value</returns>
        </member>
        <member name="M:XCLNetTools.XML.ConfigClass.GetConfigDecimal(System.String,System.String)">
            <summary>
            得到配置文件中的配置decimal信息
            </summary>
            <param name="sectionName">节点名称</param>
            <param name="key">KEY名称</param>
            <returns>返回浮点数</returns>
        </member>
        <member name="M:XCLNetTools.XML.ConfigClass.GetConfigDecimal(System.String)">
            <summary>
            取得配置文件中 默认节点的 浮点数型
            </summary>
            <param name="key">key名</param>
            <returns>value值</returns>
        </member>
        <member name="M:XCLNetTools.XML.ConfigClass.GetConfigInt(System.String,System.String)">
            <summary>
            得到配置文件中的配置int信息
            </summary>
            <param name="sectionName">节点名称</param>
            <param name="key">KEY名</param>
            <returns>返回整数</returns>
        </member>
        <member name="M:XCLNetTools.XML.ConfigClass.GetConfigInt(System.String)">
            <summary>
            得到配置文件中的默认节点配置int信息
            </summary>
            <param name="key">KEY名</param>
            <returns>返回整数</returns>
        </member>
        <member name="M:XCLNetTools.XML.ConfigClass.SetConfigKeyValue(System.String,System.String,System.String)">
            <summary>
            写入,更新配置文件节点
            </summary>
            <param name="sectionName">节点名称</param>
            <param name="key">键名</param>
            <param name="keyvalue">键值</param>
        </member>
        <member name="M:XCLNetTools.XML.ConfigClass.SetConfigKeyValue(System.String,System.String)">
            <summary>
            写入,更新配置文件默认节点
            </summary>
            <parma name="key">键名</parma>
            <parma name="keyvalue">键值</parma>
        </member>
        <member name="M:XCLNetTools.XML.ConfigClass.RemoveSectionKey(System.String,System.String)">
            <summary>
            删除配置文件节点
            </summary>
            <param name="SectionName">节名称</param>
            <param name="key">要删除的键</param>
        </member>
        <member name="M:XCLNetTools.XML.ConfigClass.RemoveSectionKey(System.String)">
            <summary>
            删除默认节点
            </summary>
            <param name="key">key名</param>
        </member>
        <member name="T:XCLNetTools.XML.XMLHelper">
            <summary>
            XMLHelper XML文档操作管理器
            </summary>
        </member>
        <member name="M:XCLNetTools.XML.XMLHelper.GetXmlNodeByXpath(System.String,System.String)">
            <summary>
            选择匹配XPath表达式的第一个节点XmlNode.
            </summary>
            <param name="xmlFileName">XML文档完全文件名(包含物理路径)</param>
            <param name="xpath">要匹配的XPath表达式(例如:"//节点名//子节点名")</param>
            <returns>返回XmlNode</returns>
        </member>
        <member name="M:XCLNetTools.XML.XMLHelper.GetXmlNodeListByXpath(System.String,System.String)">
            <summary>
            选择匹配XPath表达式的节点列表XmlNodeList.
            </summary>
            <param name="xmlFileName">XML文档完全文件名(包含物理路径)</param>
            <param name="xpath">要匹配的XPath表达式(例如:"//节点名//子节点名")</param>
            <returns>返回XmlNodeList</returns>
        </member>
        <member name="M:XCLNetTools.XML.XMLHelper.GetXmlAttribute(System.String,System.String,System.String)">
            <summary>
            选择匹配XPath表达式的第一个节点的匹配xmlAttributeName的属性XmlAttribute.
            </summary>
            <param name="xmlFileName">XML文档完全文件名(包含物理路径)</param>
            <param name="xpath">要匹配的XPath表达式(例如:"//节点名//子节点名</param>
            <param name="xmlAttributeName">要匹配xmlAttributeName的属性名称</param>
            <returns>返回xmlAttributeName</returns>
        </member>
        <member name="M:XCLNetTools.XML.XMLHelper.CreateXmlDocument(System.String,System.String,System.String,System.String,System.String)">
            <summary>
            创建一个XML文档
            </summary>
            <param name="xmlFileName">XML文档完全文件名(包含物理路径)</param>
            <param name="rootNodeName">XML文档根节点名称(须指定一个根节点名称)</param>
            <param name="version">XML文档版本号(必须为:"1.0")</param>
            <param name="encoding">XML文档编码方式</param>
            <param name="standalone">该值必须是"yes"或"no",如果为null,Save方法不在XML声明上写出独立属性</param>
            <returns>成功返回true,失败返回false</returns>
        </member>
        <member name="M:XCLNetTools.XML.XMLHelper.CreateXmlNodeByXPath(System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            依据匹配XPath表达式的第一个节点来创建它的子节点(如果此节点已存在则追加一个新的同名节点
            </summary>
            <param name="xmlFileName">XML文档完全文件名(包含物理路径)</param>
            <param name="xpath">要匹配的XPath表达式(例如:"//节点名//子节点名</param>
            <param name="xmlNodeName">要匹配xmlNodeName的节点名称</param>
            <param name="innerText">节点文本值</param>
            <param name="xmlAttributeName">要匹配xmlAttributeName的属性名称</param>
            <param name="value">属性值</param>
            <returns>成功返回true,失败返回false</returns>
        </member>
        <member name="M:XCLNetTools.XML.XMLHelper.CreateOrUpdateXmlNodeByXPath(System.String,System.String,System.String,System.String)">
            <summary>
            依据匹配XPath表达式的第一个节点来创建或更新它的子节点(如果节点存在则更新,不存在则创建)
            </summary>
            <param name="xmlFileName">XML文档完全文件名(包含物理路径)</param>
            <param name="xpath">要匹配的XPath表达式(例如:"//节点名//子节点名</param>
            <param name="xmlNodeName">要匹配xmlNodeName的节点名称</param>
            <param name="innerText">节点文本值</param>
            <returns>成功返回true,失败返回false</returns>
        </member>
        <member name="M:XCLNetTools.XML.XMLHelper.CreateOrUpdateXmlAttributeByXPath(System.String,System.String,System.String,System.String)">
            <summary>
            依据匹配XPath表达式的第一个节点来创建或更新它的属性(如果属性存在则更新,不存在则创建)
            </summary>
            <param name="xmlFileName">XML文档完全文件名(包含物理路径)</param>
            <param name="xpath">要匹配的XPath表达式(例如:"//节点名//子节点名</param>
            <param name="xmlAttributeName">要匹配xmlAttributeName的属性名称</param>
            <param name="value">属性值</param>
            <returns>成功返回true,失败返回false</returns>
        </member>
        <member name="M:XCLNetTools.XML.XMLHelper.DeleteXmlNodeByXPath(System.String,System.String)">
            <summary>
            删除匹配XPath表达式的第一个节点(节点中的子元素同时会被删除)
            </summary>
            <param name="xmlFileName">XML文档完全文件名(包含物理路径)</param>
            <param name="xpath">要匹配的XPath表达式(例如:"//节点名//子节点名</param>
            <returns>成功返回true,失败返回false</returns>
        </member>
        <member name="M:XCLNetTools.XML.XMLHelper.DeleteXmlAttributeByXPath(System.String,System.String,System.String)">
            <summary>
            删除匹配XPath表达式的第一个节点中的匹配参数xmlAttributeName的属性
            </summary>
            <param name="xmlFileName">XML文档完全文件名(包含物理路径)</param>
            <param name="xpath">要匹配的XPath表达式(例如:"//节点名//子节点名</param>
            <param name="xmlAttributeName">要删除的xmlAttributeName的属性名称</param>
            <returns>成功返回true,失败返回false</returns>
        </member>
        <member name="M:XCLNetTools.XML.XMLHelper.DeleteAllXmlAttributeByXPath(System.String,System.String)">
            <summary>
            删除匹配XPath表达式的第一个节点中的所有属性
            </summary>
            <param name="xmlFileName">XML文档完全文件名(包含物理路径)</param>
            <param name="xpath">要匹配的XPath表达式(例如:"//节点名//子节点名</param>
            <returns>成功返回true,失败返回false</returns>
        </member>
        <member name="M:XCLNetTools.XML.XMLHelper.UpdateXMLNodeInnerText(System.String,System.String,System.String)">
            <summary>
            更新指定xpath节点的innerText
            </summary>
        </member>
    </members>
</doc>
